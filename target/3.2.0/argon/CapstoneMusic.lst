
c:/Users/aiden/Desktop/IoT-Engineering/CapstoneProject/CapstoneMusic/target/3.2.0/argon/CapstoneMusic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f84  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000bafa0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003df9c  000bafa4  0001df9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007c4  2003e02c  2003e02c  0002e02c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000bb034  000bb034  0002b034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000bb05c  000bb05c  0002b05c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ba107  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0001f1b1  00000000  00000000  001e5167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0004c7fb  00000000  00000000  00204318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000038c0  00000000  00000000  00250b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000d308  00000000  00000000  002543d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004bd2e  00000000  00000000  002616db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00066491  00000000  00000000  002ad409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013710d  00000000  00000000  0031389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000a6e4  00000000  00000000  0044a9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f006 f8a3 	bl	ba178 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f006 f8ab 	bl	ba194 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003df9c 	.word	0x2003df9c
   b4048:	000bafa4 	.word	0x000bafa4
   b404c:	2003e02c 	.word	0x2003e02c
   b4050:	2003e02c 	.word	0x2003e02c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f004 fbb7 	bl	b87d0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000baf74 	.word	0x000baf74
   b407c:	000baf98 	.word	0x000baf98

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bf44 	b.w	b4f0c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fd6d 	bl	b4b64 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f004 bb57 	b.w	b8740 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f003 bf61 	b.w	b7f58 <malloc>

000b4096 <_Znaj>:
   b4096:	f003 bf5f 	b.w	b7f58 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f003 bf65 	b.w	b7f68 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40ae:	4770      	bx	lr

000b40b0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40b0:	b510      	push	{r4, lr}
  }
   b40b2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40b4:	4604      	mov	r4, r0
  }
   b40b6:	f7ff fff0 	bl	b409a <_ZdlPvj>
   b40ba:	4620      	mov	r0, r4
   b40bc:	bd10      	pop	{r4, pc}
	...

000b40c0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b40c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c2:	6803      	ldr	r3, [r0, #0]
   b40c4:	2b2f      	cmp	r3, #47	; 0x2f
{
   b40c6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b40c8:	d904      	bls.n	b40d4 <nrf_gpio_pin_port_decode+0x14>
   b40ca:	4a07      	ldr	r2, [pc, #28]	; (b40e8 <nrf_gpio_pin_port_decode+0x28>)
   b40cc:	2100      	movs	r1, #0
   b40ce:	200a      	movs	r0, #10
   b40d0:	f003 fe8e 	bl	b7df0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b40d4:	6823      	ldr	r3, [r4, #0]
   b40d6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40d8:	bf83      	ittte	hi
   b40da:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b40de:	4803      	ldrhi	r0, [pc, #12]	; (b40ec <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b40e0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b40e2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b40e6:	bd10      	pop	{r4, pc}
   b40e8:	000b7ad1 	.word	0x000b7ad1
   b40ec:	50000300 	.word	0x50000300

000b40f0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f0:	b40e      	push	{r1, r2, r3}
   b40f2:	b503      	push	{r0, r1, lr}
   b40f4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40fe:	f004 fa6a 	bl	b85d6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4102:	b002      	add	sp, #8
   b4104:	f85d eb04 	ldr.w	lr, [sp], #4
   b4108:	b003      	add	sp, #12
   b410a:	4770      	bx	lr

000b410c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b410c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b410e:	4604      	mov	r4, r0
   b4110:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4112:	7922      	ldrb	r2, [r4, #4]
   b4114:	68a3      	ldr	r3, [r4, #8]
   b4116:	b132      	cbz	r2, b4126 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4118:	b9a3      	cbnz	r3, b4144 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b411a:	490b      	ldr	r1, [pc, #44]	; (b4148 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b411c:	b002      	add	sp, #8
   b411e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4122:	f004 ba1d 	b.w	b8560 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4126:	4a09      	ldr	r2, [pc, #36]	; (b414c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4128:	7b26      	ldrb	r6, [r4, #12]
   b412a:	4d09      	ldr	r5, [pc, #36]	; (b4150 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b412c:	4909      	ldr	r1, [pc, #36]	; (b4154 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b412e:	7b64      	ldrb	r4, [r4, #13]
   b4130:	2e01      	cmp	r6, #1
   b4132:	bf18      	it	ne
   b4134:	4629      	movne	r1, r5
   b4136:	e9cd 1400 	strd	r1, r4, [sp]
   b413a:	4907      	ldr	r1, [pc, #28]	; (b4158 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b413c:	f7ff ffd8 	bl	b40f0 <_ZN5Print6printfEPKcz>
  }
   b4140:	b002      	add	sp, #8
   b4142:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4144:	4a05      	ldr	r2, [pc, #20]	; (b415c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4146:	e7ef      	b.n	b4128 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4148:	000ba465 	.word	0x000ba465
   b414c:	000ba4c3 	.word	0x000ba4c3
   b4150:	000ba461 	.word	0x000ba461
   b4154:	000ba45d 	.word	0x000ba45d
   b4158:	000ba47b 	.word	0x000ba47b
   b415c:	000ba454 	.word	0x000ba454

000b4160 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b4160:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4162:	f003 fcc5 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4166:	4b03      	ldr	r3, [pc, #12]	; (b4174 <_ZN10CloudClass7processEv+0x14>)
   b4168:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b416e:	f003 bee3 	b.w	b7f38 <spark_process>
   b4172:	bf00      	nop
   b4174:	2003e740 	.word	0x2003e740

000b4178 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	b40e      	push	{r1, r2, r3}
   b417a:	b500      	push	{lr}
   b417c:	b08c      	sub	sp, #48	; 0x30
   b417e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4180:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4184:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4188:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b418e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4190:	6801      	ldr	r1, [r0, #0]
   b4192:	aa04      	add	r2, sp, #16
   b4194:	201e      	movs	r0, #30
    attr.flags = 0;
   b4196:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b419a:	f003 fe39 	bl	b7e10 <log_message_v>
}
   b419e:	b00c      	add	sp, #48	; 0x30
   b41a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a4:	b003      	add	sp, #12
   b41a6:	4770      	bx	lr

000b41a8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b41a8:	b40e      	push	{r1, r2, r3}
   b41aa:	b500      	push	{lr}
   b41ac:	b08c      	sub	sp, #48	; 0x30
   b41ae:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b41b0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::error(const char *fmt, ...) const {
   b41b4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b41b8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ba:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b41be:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41c0:	6801      	ldr	r1, [r0, #0]
   b41c2:	aa04      	add	r2, sp, #16
   b41c4:	2032      	movs	r0, #50	; 0x32
    attr.flags = 0;
   b41c6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ca:	f003 fe21 	bl	b7e10 <log_message_v>
}
   b41ce:	b00c      	add	sp, #48	; 0x30
   b41d0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41d4:	b003      	add	sp, #12
   b41d6:	4770      	bx	lr

000b41d8 <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   b41d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b41da:	4d32      	ldr	r5, [pc, #200]	; (b42a4 <digitalWriteFast+0xcc>)
   b41dc:	4c32      	ldr	r4, [pc, #200]	; (b42a8 <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41de:	782b      	ldrb	r3, [r5, #0]
   b41e0:	f3bf 8f5b 	dmb	ish
   b41e4:	0106      	lsls	r6, r0, #4
    if (value)
   b41e6:	b371      	cbz	r1, b4246 <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b41e8:	07d8      	lsls	r0, r3, #31
   b41ea:	d409      	bmi.n	b4200 <digitalWriteFast+0x28>
   b41ec:	4628      	mov	r0, r5
   b41ee:	f7ff ff56 	bl	b409e <__cxa_guard_acquire>
   b41f2:	b128      	cbz	r0, b4200 <digitalWriteFast+0x28>
   b41f4:	f003 fbf4 	bl	b79e0 <HAL_Pin_Map>
   b41f8:	6020      	str	r0, [r4, #0]
   b41fa:	4628      	mov	r0, r5
   b41fc:	f7ff ff54 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4200:	6823      	ldr	r3, [r4, #0]
   b4202:	5d9b      	ldrb	r3, [r3, r6]
   b4204:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4206:	782b      	ldrb	r3, [r5, #0]
   b4208:	f3bf 8f5b 	dmb	ish
   b420c:	07d9      	lsls	r1, r3, #31
   b420e:	d409      	bmi.n	b4224 <digitalWriteFast+0x4c>
   b4210:	4824      	ldr	r0, [pc, #144]	; (b42a4 <digitalWriteFast+0xcc>)
   b4212:	f7ff ff44 	bl	b409e <__cxa_guard_acquire>
   b4216:	b128      	cbz	r0, b4224 <digitalWriteFast+0x4c>
   b4218:	f003 fbe2 	bl	b79e0 <HAL_Pin_Map>
   b421c:	6020      	str	r0, [r4, #0]
   b421e:	4821      	ldr	r0, [pc, #132]	; (b42a4 <digitalWriteFast+0xcc>)
   b4220:	f7ff ff42 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4224:	6820      	ldr	r0, [r4, #0]
   b4226:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4228:	a801      	add	r0, sp, #4
   b422a:	7873      	ldrb	r3, [r6, #1]
   b422c:	f003 031f 	and.w	r3, r3, #31
   b4230:	433b      	orrs	r3, r7
   b4232:	9301      	str	r3, [sp, #4]
   b4234:	f7ff ff44 	bl	b40c0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4238:	9a01      	ldr	r2, [sp, #4]
   b423a:	2301      	movs	r3, #1
   b423c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b423e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   b4242:	b003      	add	sp, #12
   b4244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4246:	07da      	lsls	r2, r3, #31
   b4248:	d409      	bmi.n	b425e <digitalWriteFast+0x86>
   b424a:	4628      	mov	r0, r5
   b424c:	f7ff ff27 	bl	b409e <__cxa_guard_acquire>
   b4250:	b128      	cbz	r0, b425e <digitalWriteFast+0x86>
   b4252:	f003 fbc5 	bl	b79e0 <HAL_Pin_Map>
   b4256:	6020      	str	r0, [r4, #0]
   b4258:	4628      	mov	r0, r5
   b425a:	f7ff ff25 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b425e:	6823      	ldr	r3, [r4, #0]
   b4260:	5d9b      	ldrb	r3, [r3, r6]
   b4262:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b4264:	782b      	ldrb	r3, [r5, #0]
   b4266:	f3bf 8f5b 	dmb	ish
   b426a:	07db      	lsls	r3, r3, #31
   b426c:	d409      	bmi.n	b4282 <digitalWriteFast+0xaa>
   b426e:	480d      	ldr	r0, [pc, #52]	; (b42a4 <digitalWriteFast+0xcc>)
   b4270:	f7ff ff15 	bl	b409e <__cxa_guard_acquire>
   b4274:	b128      	cbz	r0, b4282 <digitalWriteFast+0xaa>
   b4276:	f003 fbb3 	bl	b79e0 <HAL_Pin_Map>
   b427a:	6020      	str	r0, [r4, #0]
   b427c:	4809      	ldr	r0, [pc, #36]	; (b42a4 <digitalWriteFast+0xcc>)
   b427e:	f7ff ff13 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b4282:	6820      	ldr	r0, [r4, #0]
   b4284:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4286:	a801      	add	r0, sp, #4
   b4288:	7873      	ldrb	r3, [r6, #1]
   b428a:	f003 031f 	and.w	r3, r3, #31
   b428e:	433b      	orrs	r3, r7
   b4290:	9301      	str	r3, [sp, #4]
   b4292:	f7ff ff15 	bl	b40c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b4296:	9a01      	ldr	r2, [sp, #4]
   b4298:	2301      	movs	r3, #1
   b429a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b429c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   b42a0:	e7cf      	b.n	b4242 <digitalWriteFast+0x6a>
   b42a2:	bf00      	nop
   b42a4:	2003e038 	.word	0x2003e038
   b42a8:	2003e03c 	.word	0x2003e03c

000b42ac <_Z5blinkv>:
    music = true;
    songTimer = millis();
    musicPlayer.startPlayingFile(files[fileNum]);
  }

void blink(void) {
   b42ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42ae:	4e21      	ldr	r6, [pc, #132]	; (b4334 <_Z5blinkv+0x88>)
   b42b0:	4d21      	ldr	r5, [pc, #132]	; (b4338 <_Z5blinkv+0x8c>)
   b42b2:	7833      	ldrb	r3, [r6, #0]
   b42b4:	f3bf 8f5b 	dmb	ish
   b42b8:	f013 0f01 	tst.w	r3, #1
   b42bc:	d109      	bne.n	b42d2 <_Z5blinkv+0x26>
   b42be:	4630      	mov	r0, r6
   b42c0:	f7ff feed 	bl	b409e <__cxa_guard_acquire>
   b42c4:	b128      	cbz	r0, b42d2 <_Z5blinkv+0x26>
   b42c6:	f003 fb8b 	bl	b79e0 <HAL_Pin_Map>
   b42ca:	6028      	str	r0, [r5, #0]
   b42cc:	4630      	mov	r0, r6
   b42ce:	f7ff feeb 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42d2:	682b      	ldr	r3, [r5, #0]
   b42d4:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42d8:	7833      	ldrb	r3, [r6, #0]
   b42da:	f3bf 8f5b 	dmb	ish
   b42de:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42e0:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b42e4:	d409      	bmi.n	b42fa <_Z5blinkv+0x4e>
   b42e6:	4813      	ldr	r0, [pc, #76]	; (b4334 <_Z5blinkv+0x88>)
   b42e8:	f7ff fed9 	bl	b409e <__cxa_guard_acquire>
   b42ec:	b128      	cbz	r0, b42fa <_Z5blinkv+0x4e>
   b42ee:	f003 fb77 	bl	b79e0 <HAL_Pin_Map>
   b42f2:	6028      	str	r0, [r5, #0]
   b42f4:	480f      	ldr	r0, [pc, #60]	; (b4334 <_Z5blinkv+0x88>)
   b42f6:	f7ff fed7 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b42fa:	682b      	ldr	r3, [r5, #0]
   b42fc:	f893 4071 	ldrb.w	r4, [r3, #113]	; 0x71
   b4300:	f004 041f 	and.w	r4, r4, #31
   b4304:	433c      	orrs	r4, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4306:	a801      	add	r0, sp, #4
   b4308:	9401      	str	r4, [sp, #4]
   b430a:	f7ff fed9 	bl	b40c0 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   b430e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   b4312:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b4314:	a801      	add	r0, sp, #4
   b4316:	f7ff fed3 	bl	b40c0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b431a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   b431c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b4320:	40d9      	lsrs	r1, r3
  digitalWriteFast(D7, !pinReadFast(D7));
   b4322:	43c9      	mvns	r1, r1
   b4324:	f001 0101 	and.w	r1, r1, #1
   b4328:	2007      	movs	r0, #7
   b432a:	f7ff ff55 	bl	b41d8 <digitalWriteFast>
   b432e:	b003      	add	sp, #12
   b4330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4332:	bf00      	nop
   b4334:	2003e038 	.word	0x2003e038
   b4338:	2003e03c 	.word	0x2003e03c

000b433c <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b433c:	6803      	ldr	r3, [r0, #0]
   b433e:	b12b      	cbz	r3, b434c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4340:	6842      	ldr	r2, [r0, #4]
   b4342:	4293      	cmp	r3, r2
   b4344:	d202      	bcs.n	b434c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4346:	4618      	mov	r0, r3
   b4348:	f005 befe 	b.w	ba148 <atoi>
   b434c:	2000      	movs	r0, #0
   b434e:	4770      	bx	lr

000b4350 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4350:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4352:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4354:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4356:	b145      	cbz	r5, b436a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4358:	6843      	ldr	r3, [r0, #4]
   b435a:	429d      	cmp	r5, r3
   b435c:	d205      	bcs.n	b436a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b435e:	4628      	mov	r0, r5
   b4360:	f005 ff60 	bl	ba224 <strlen>
   b4364:	3001      	adds	r0, #1
   b4366:	4405      	add	r5, r0
   b4368:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b436a:	4620      	mov	r0, r4
   b436c:	bd38      	pop	{r3, r4, r5, pc}

000b436e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b436e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4370:	4604      	mov	r4, r0
   b4372:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4374:	460d      	mov	r5, r1
   b4376:	b921      	cbnz	r1, b4382 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4378:	6803      	ldr	r3, [r0, #0]
   b437a:	1c7a      	adds	r2, r7, #1
   b437c:	6042      	str	r2, [r0, #4]
   b437e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4382:	4608      	mov	r0, r1
   b4384:	f005 ff4e 	bl	ba224 <strlen>
    if (len + l > buff_size)
   b4388:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b438a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b438c:	19f2      	adds	r2, r6, r7
   b438e:	429a      	cmp	r2, r3
   b4390:	d8f6      	bhi.n	b4380 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4392:	6820      	ldr	r0, [r4, #0]
   b4394:	4632      	mov	r2, r6
   b4396:	4629      	mov	r1, r5
   b4398:	4438      	add	r0, r7
   b439a:	f005 feed 	bl	ba178 <memcpy>
    len += l;
   b439e:	6860      	ldr	r0, [r4, #4]
   b43a0:	4430      	add	r0, r6
   b43a2:	6060      	str	r0, [r4, #4]
   b43a4:	e7ec      	b.n	b4380 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b43a8 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b43a8:	b538      	push	{r3, r4, r5, lr}
   b43aa:	4604      	mov	r4, r0
   b43ac:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b43ae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b43b2:	6825      	ldr	r5, [r4, #0]
   b43b4:	4a04      	ldr	r2, [pc, #16]	; (b43c8 <_ZN10BlynkParam3addEi+0x20>)
   b43b6:	1a09      	subs	r1, r1, r0
   b43b8:	4428      	add	r0, r5
   b43ba:	f003 fde5 	bl	b7f88 <snprintf>
   b43be:	6863      	ldr	r3, [r4, #4]
   b43c0:	3001      	adds	r0, #1
   b43c2:	4403      	add	r3, r0
   b43c4:	6063      	str	r3, [r4, #4]
    }
   b43c6:	bd38      	pop	{r3, r4, r5, pc}
   b43c8:	000ba498 	.word	0x000ba498

000b43cc <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b43cc:	b538      	push	{r3, r4, r5, lr}
   b43ce:	4604      	mov	r4, r0
   b43d0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b43d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b43d6:	6825      	ldr	r5, [r4, #0]
   b43d8:	4a04      	ldr	r2, [pc, #16]	; (b43ec <_ZN10BlynkParam3addEl+0x20>)
   b43da:	1a09      	subs	r1, r1, r0
   b43dc:	4428      	add	r0, r5
   b43de:	f003 fdd3 	bl	b7f88 <snprintf>
   b43e2:	6863      	ldr	r3, [r4, #4]
   b43e4:	3001      	adds	r0, #1
   b43e6:	4403      	add	r3, r0
   b43e8:	6063      	str	r3, [r4, #4]
    }
   b43ea:	bd38      	pop	{r3, r4, r5, pc}
   b43ec:	000ba49b 	.word	0x000ba49b

000b43f0 <_Z9playMusicv>:
  {
   b43f0:	b510      	push	{r4, lr}
    if (fileNum == 0)
   b43f2:	4c0d      	ldr	r4, [pc, #52]	; (b4428 <_Z9playMusicv+0x38>)
   b43f4:	6823      	ldr	r3, [r4, #0]
   b43f6:	b9a3      	cbnz	r3, b4422 <_Z9playMusicv+0x32>
      musicPlayer.setVolume(8, 8);
   b43f8:	2208      	movs	r2, #8
      musicPlayer.setVolume(1, 1);
   b43fa:	4611      	mov	r1, r2
   b43fc:	480b      	ldr	r0, [pc, #44]	; (b442c <_Z9playMusicv+0x3c>)
   b43fe:	f001 fae3 	bl	b59c8 <_ZN15Adafruit_VS10539setVolumeEhh>
    music = true;
   b4402:	4b0b      	ldr	r3, [pc, #44]	; (b4430 <_Z9playMusicv+0x40>)
   b4404:	2201      	movs	r2, #1
   b4406:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4408:	f003 fb72 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    songTimer = millis();
   b440c:	4b09      	ldr	r3, [pc, #36]	; (b4434 <_Z9playMusicv+0x44>)
    musicPlayer.startPlayingFile(files[fileNum]);
   b440e:	4a0a      	ldr	r2, [pc, #40]	; (b4438 <_Z9playMusicv+0x48>)
    songTimer = millis();
   b4410:	6018      	str	r0, [r3, #0]
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4412:	6823      	ldr	r3, [r4, #0]
    musicPlayer.startPlayingFile(files[fileNum]);
   b4414:	4805      	ldr	r0, [pc, #20]	; (b442c <_Z9playMusicv+0x3c>)
   b4416:	011b      	lsls	r3, r3, #4
  }
   b4418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    musicPlayer.startPlayingFile(files[fileNum]);
   b441c:	58d1      	ldr	r1, [r2, r3]
   b441e:	f001 bc4d 	b.w	b5cbc <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc>
      musicPlayer.setVolume(1, 1);
   b4422:	2201      	movs	r2, #1
   b4424:	e7e9      	b.n	b43fa <_Z9playMusicv+0xa>
   b4426:	bf00      	nop
   b4428:	2003e590 	.word	0x2003e590
   b442c:	2003e638 	.word	0x2003e638
   b4430:	2003dfbc 	.word	0x2003dfbc
   b4434:	2003e6a0 	.word	0x2003e6a0
   b4438:	2003e598 	.word	0x2003e598

000b443c <BlynkWidgetWrite0>:
{
   b443c:	b510      	push	{r4, lr}
  if (millis() >= timerOfMine + 5000)
   b443e:	4c0c      	ldr	r4, [pc, #48]	; (b4470 <BlynkWidgetWrite0+0x34>)
   b4440:	f003 fb56 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
   b4444:	6823      	ldr	r3, [r4, #0]
   b4446:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   b444a:	3308      	adds	r3, #8
   b444c:	4283      	cmp	r3, r0
   b444e:	d807      	bhi.n	b4460 <BlynkWidgetWrite0+0x24>
    if (!music)
   b4450:	4b08      	ldr	r3, [pc, #32]	; (b4474 <BlynkWidgetWrite0+0x38>)
   b4452:	781a      	ldrb	r2, [r3, #0]
   b4454:	b92a      	cbnz	r2, b4462 <BlynkWidgetWrite0+0x26>
      playMusic();
   b4456:	f7ff ffcb 	bl	b43f0 <_Z9playMusicv>
   b445a:	f003 fb49 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    timerOfMine = millis();
   b445e:	6020      	str	r0, [r4, #0]
}
   b4460:	bd10      	pop	{r4, pc}
      music = false;
   b4462:	2200      	movs	r2, #0
      musicPlayer.stopPlaying();
   b4464:	4804      	ldr	r0, [pc, #16]	; (b4478 <BlynkWidgetWrite0+0x3c>)
      music = false;
   b4466:	701a      	strb	r2, [r3, #0]
      musicPlayer.stopPlaying();
   b4468:	f001 fa9e 	bl	b59a8 <_ZN26Adafruit_VS1053_FilePlayer11stopPlayingEv>
   b446c:	e7f5      	b.n	b445a <BlynkWidgetWrite0+0x1e>
   b446e:	bf00      	nop
   b4470:	2003e6a4 	.word	0x2003e6a4
   b4474:	2003dfbc 	.word	0x2003dfbc
   b4478:	2003e638 	.word	0x2003e638

000b447c <BlynkWidgetWrite2>:
{
   b447c:	b510      	push	{r4, lr}
  if (millis() >= timerOfMine + 5000)
   b447e:	4c07      	ldr	r4, [pc, #28]	; (b449c <BlynkWidgetWrite2+0x20>)
   b4480:	f003 fb36 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
   b4484:	6823      	ldr	r3, [r4, #0]
   b4486:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   b448a:	3308      	adds	r3, #8
   b448c:	4283      	cmp	r3, r0
   b448e:	d804      	bhi.n	b449a <BlynkWidgetWrite2+0x1e>
    playMusic();
   b4490:	f7ff ffae 	bl	b43f0 <_Z9playMusicv>
   b4494:	f003 fb2c 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    timerOfMine = millis();
   b4498:	6020      	str	r0, [r4, #0]
}
   b449a:	bd10      	pop	{r4, pc}
   b449c:	2003e6a4 	.word	0x2003e6a4

000b44a0 <BlynkWidgetWrite1>:
{
   b44a0:	b538      	push	{r3, r4, r5, lr}
  if (millis() >= timerOfMine + 5000)
   b44a2:	4d0b      	ldr	r5, [pc, #44]	; (b44d0 <BlynkWidgetWrite1+0x30>)
{
   b44a4:	460c      	mov	r4, r1
   b44a6:	f003 fb23 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() >= timerOfMine + 5000)
   b44aa:	682b      	ldr	r3, [r5, #0]
   b44ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
   b44b0:	3308      	adds	r3, #8
   b44b2:	4283      	cmp	r3, r0
   b44b4:	d80a      	bhi.n	b44cc <BlynkWidgetWrite1+0x2c>
    int         asInt() const       { return atoi(buff); }
   b44b6:	6820      	ldr	r0, [r4, #0]
   b44b8:	f005 fe46 	bl	ba148 <atoi>
    fileNum = param.asInt() - 1;
   b44bc:	4b05      	ldr	r3, [pc, #20]	; (b44d4 <BlynkWidgetWrite1+0x34>)
   b44be:	3801      	subs	r0, #1
   b44c0:	6018      	str	r0, [r3, #0]
    playMusic();
   b44c2:	f7ff ff95 	bl	b43f0 <_Z9playMusicv>
   b44c6:	f003 fb13 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    timerOfMine = millis();
   b44ca:	6028      	str	r0, [r5, #0]
}
   b44cc:	bd38      	pop	{r3, r4, r5, pc}
   b44ce:	bf00      	nop
   b44d0:	2003e6a4 	.word	0x2003e6a4
   b44d4:	2003e590 	.word	0x2003e590

000b44d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b44d8:	b508      	push	{r3, lr}
        state = CONNECTING;
   b44da:	2300      	movs	r3, #0
   b44dc:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b44de:	6800      	ldr	r0, [r0, #0]
   b44e0:	f004 fe34 	bl	b914c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b44e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b44e8:	f002 bf40 	b.w	b736c <BlynkNoOpCbk>

000b44ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b44ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b44f0:	188f      	adds	r7, r1, r2
   b44f2:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b44f4:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b44f6:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b44fa:	4606      	mov	r6, r0
   b44fc:	4689      	mov	r9, r1
   b44fe:	4690      	mov	r8, r2
    if (it >= param.end())
   b4500:	f080 80c2 	bcs.w	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4504:	a805      	add	r0, sp, #20
   b4506:	880d      	ldrh	r5, [r1, #0]
   b4508:	f7ff ff22 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
   b450c:	6803      	ldr	r3, [r0, #0]
   b450e:	42bb      	cmp	r3, r7
   b4510:	f080 80ba 	bcs.w	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4514:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4516:	7803      	ldrb	r3, [r0, #0]
   b4518:	2b41      	cmp	r3, #65	; 0x41
   b451a:	d149      	bne.n	b45b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b451c:	3001      	adds	r0, #1
   b451e:	f005 fe13 	bl	ba148 <atoi>
   b4522:	2805      	cmp	r0, #5
   b4524:	dd37      	ble.n	b4596 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4526:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4528:	f247 2376 	movw	r3, #29302	; 0x7276
   b452c:	429d      	cmp	r5, r3
   b452e:	f000 80d3 	beq.w	b46d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4532:	d841      	bhi.n	b45b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4534:	f247 2361 	movw	r3, #29281	; 0x7261
   b4538:	429d      	cmp	r5, r3
   b453a:	f000 80a8 	beq.w	b468e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b453e:	f247 2364 	movw	r3, #29284	; 0x7264
   b4542:	429d      	cmp	r5, r3
   b4544:	d06b      	beq.n	b461e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b4546:	f646 5370 	movw	r3, #28016	; 0x6d70
   b454a:	429d      	cmp	r5, r3
   b454c:	d141      	bne.n	b45d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b454e:	4d78      	ldr	r5, [pc, #480]	; (b4730 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4550:	4e78      	ldr	r6, [pc, #480]	; (b4734 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4552:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b4748 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b4556:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b4558:	42b8      	cmp	r0, r7
   b455a:	f080 8095 	bcs.w	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b455e:	7803      	ldrb	r3, [r0, #0]
   b4560:	2b41      	cmp	r3, #65	; 0x41
   b4562:	d14b      	bne.n	b45fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4564:	3001      	adds	r0, #1
   b4566:	f005 fdef 	bl	ba148 <atoi>
   b456a:	2805      	cmp	r0, #5
   b456c:	dd39      	ble.n	b45e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b456e:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4570:	a805      	add	r0, sp, #20
   b4572:	f7ff feed 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4576:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b457a:	4629      	mov	r1, r5
   b457c:	4648      	mov	r0, r9
   b457e:	f005 fe3f 	bl	ba200 <strcmp>
   b4582:	4601      	mov	r1, r0
   b4584:	2800      	cmp	r0, #0
   b4586:	d13d      	bne.n	b4604 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4588:	4620      	mov	r0, r4
   b458a:	f004 ff65 	bl	b9458 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b458e:	a805      	add	r0, sp, #20
   b4590:	f7ff fede 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4594:	e7df      	b.n	b4556 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4596:	9805      	ldr	r0, [sp, #20]
   b4598:	3001      	adds	r0, #1
   b459a:	f005 fdd5 	bl	ba148 <atoi>
   b459e:	2800      	cmp	r0, #0
   b45a0:	dbc1      	blt.n	b4526 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b45a2:	9805      	ldr	r0, [sp, #20]
   b45a4:	3001      	adds	r0, #1
   b45a6:	f005 fdcf 	bl	ba148 <atoi>
   b45aa:	300e      	adds	r0, #14
   b45ac:	b2c4      	uxtb	r4, r0
   b45ae:	e7bb      	b.n	b4528 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b45b0:	a805      	add	r0, sp, #20
   b45b2:	f7ff fec3 	bl	b433c <_ZNK10BlynkParam8iterator5asIntEv>
   b45b6:	e7f9      	b.n	b45ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b45b8:	f247 7364 	movw	r3, #30564	; 0x7764
   b45bc:	429d      	cmp	r5, r3
   b45be:	d04f      	beq.n	b4660 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b45c0:	f247 7376 	movw	r3, #30582	; 0x7776
   b45c4:	429d      	cmp	r5, r3
   b45c6:	f000 8097 	beq.w	b46f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b45ca:	f247 7361 	movw	r3, #30561	; 0x7761
   b45ce:	429d      	cmp	r5, r3
   b45d0:	d06f      	beq.n	b46b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b45d2:	2300      	movs	r3, #0
   b45d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b45d8:	2202      	movs	r2, #2
   b45da:	9200      	str	r2, [sp, #0]
   b45dc:	8b72      	ldrh	r2, [r6, #26]
   b45de:	4619      	mov	r1, r3
   b45e0:	e03a      	b.n	b4658 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b45e2:	9805      	ldr	r0, [sp, #20]
   b45e4:	3001      	adds	r0, #1
   b45e6:	f005 fdaf 	bl	ba148 <atoi>
   b45ea:	2800      	cmp	r0, #0
   b45ec:	dbbf      	blt.n	b456e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b45ee:	9805      	ldr	r0, [sp, #20]
   b45f0:	3001      	adds	r0, #1
   b45f2:	f005 fda9 	bl	ba148 <atoi>
   b45f6:	300e      	adds	r0, #14
   b45f8:	b2c4      	uxtb	r4, r0
   b45fa:	e7b9      	b.n	b4570 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b45fc:	a805      	add	r0, sp, #20
   b45fe:	f7ff fe9d 	bl	b433c <_ZNK10BlynkParam8iterator5asIntEv>
   b4602:	e7f9      	b.n	b45f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4604:	4631      	mov	r1, r6
   b4606:	4648      	mov	r0, r9
   b4608:	f005 fdfa 	bl	ba200 <strcmp>
   b460c:	b128      	cbz	r0, b461a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b460e:	4641      	mov	r1, r8
   b4610:	4648      	mov	r0, r9
   b4612:	f005 fdf5 	bl	ba200 <strcmp>
   b4616:	2800      	cmp	r0, #0
   b4618:	d1b9      	bne.n	b458e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b461a:	2101      	movs	r1, #1
   b461c:	e7b4      	b.n	b4588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b461e:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4620:	4945      	ldr	r1, [pc, #276]	; (b4738 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4622:	9307      	str	r3, [sp, #28]
   b4624:	a807      	add	r0, sp, #28
   b4626:	2310      	movs	r3, #16
   b4628:	2500      	movs	r5, #0
   b462a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b462e:	f7ff fe9e 	bl	b436e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4632:	a807      	add	r0, sp, #28
   b4634:	4621      	mov	r1, r4
   b4636:	f7ff feb7 	bl	b43a8 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b463a:	4620      	mov	r0, r4
   b463c:	f004 ff36 	bl	b94ac <digitalRead>
        rsp.add(analogRead(pin));
   b4640:	4601      	mov	r1, r0
   b4642:	a807      	add	r0, sp, #28
   b4644:	f7ff fec2 	bl	b43cc <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4648:	9b08      	ldr	r3, [sp, #32]
   b464a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b464e:	3b01      	subs	r3, #1
   b4650:	9300      	str	r3, [sp, #0]
   b4652:	9b07      	ldr	r3, [sp, #28]
   b4654:	462a      	mov	r2, r5
   b4656:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4658:	4630      	mov	r0, r6
   b465a:	f000 fb97 	bl	b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b465e:	e013      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4660:	a805      	add	r0, sp, #20
   b4662:	f7ff fe75 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
   b4666:	6803      	ldr	r3, [r0, #0]
   b4668:	429f      	cmp	r7, r3
   b466a:	d90d      	bls.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b466c:	b2a4      	uxth	r4, r4
   b466e:	2101      	movs	r1, #1
   b4670:	4620      	mov	r0, r4
   b4672:	f004 fef1 	bl	b9458 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4676:	a805      	add	r0, sp, #20
   b4678:	f7ff fe60 	bl	b433c <_ZNK10BlynkParam8iterator5asIntEv>
   b467c:	1e01      	subs	r1, r0, #0
   b467e:	bf18      	it	ne
   b4680:	2101      	movne	r1, #1
   b4682:	4620      	mov	r0, r4
   b4684:	f004 fef9 	bl	b947a <digitalWrite>
    }
}
   b4688:	b00f      	add	sp, #60	; 0x3c
   b468a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b468e:	ab0a      	add	r3, sp, #40	; 0x28
   b4690:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4692:	a807      	add	r0, sp, #28
   b4694:	2310      	movs	r3, #16
   b4696:	4929      	ldr	r1, [pc, #164]	; (b473c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b4698:	2500      	movs	r5, #0
   b469a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b469e:	f7ff fe66 	bl	b436e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b46a2:	a807      	add	r0, sp, #28
   b46a4:	4621      	mov	r1, r4
   b46a6:	f7ff fe7f 	bl	b43a8 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b46aa:	4620      	mov	r0, r4
   b46ac:	f004 ff11 	bl	b94d2 <analogRead>
   b46b0:	e7c6      	b.n	b4640 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b46b2:	a805      	add	r0, sp, #20
   b46b4:	f7ff fe4c 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
   b46b8:	6803      	ldr	r3, [r0, #0]
   b46ba:	429f      	cmp	r7, r3
   b46bc:	d9e4      	bls.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b46be:	b2a4      	uxth	r4, r4
   b46c0:	2101      	movs	r1, #1
   b46c2:	4620      	mov	r0, r4
   b46c4:	f004 fec8 	bl	b9458 <pinMode>
        analogWrite(pin, it.asInt());
   b46c8:	a805      	add	r0, sp, #20
   b46ca:	f7ff fe37 	bl	b433c <_ZNK10BlynkParam8iterator5asIntEv>
   b46ce:	4601      	mov	r1, r0
   b46d0:	4620      	mov	r0, r4
   b46d2:	f004 ff15 	bl	b9500 <_Z11analogWritetm>
    } break;
   b46d6:	e7d7      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b46d8:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b46da:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b46de:	f002 fe47 	bl	b7370 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b46e2:	4603      	mov	r3, r0
            handler(req);
   b46e4:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b46e6:	b123      	cbz	r3, b46f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b46e8:	4a15      	ldr	r2, [pc, #84]	; (b4740 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b46ea:	4293      	cmp	r3, r2
   b46ec:	d001      	beq.n	b46f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b46ee:	4798      	blx	r3
   b46f0:	e7ca      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b46f2:	f002 fe39 	bl	b7368 <BlynkWidgetRead>
        }
    }
   b46f6:	e7c7      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b46f8:	a805      	add	r0, sp, #20
   b46fa:	f7ff fe29 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b46fe:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4700:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4704:	eba3 0109 	sub.w	r1, r3, r9
   b4708:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b470c:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b470e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4712:	910c      	str	r1, [sp, #48]	; 0x30
   b4714:	f002 fe36 	bl	b7384 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4718:	4603      	mov	r3, r0
            handler(req, param);
   b471a:	a90a      	add	r1, sp, #40	; 0x28
   b471c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b471e:	b123      	cbz	r3, b472a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4720:	4a08      	ldr	r2, [pc, #32]	; (b4744 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4722:	4293      	cmp	r3, r2
   b4724:	d001      	beq.n	b472a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4726:	4798      	blx	r3
   b4728:	e7ae      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b472a:	f002 fe1e 	bl	b736a <BlynkWidgetWrite>
    } break;
   b472e:	e7ab      	b.n	b4688 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4730:	000ba54b 	.word	0x000ba54b
   b4734:	000ba49f 	.word	0x000ba49f
   b4738:	000ba4a7 	.word	0x000ba4a7
   b473c:	000ba4aa 	.word	0x000ba4aa
   b4740:	000b7369 	.word	0x000b7369
   b4744:	000b736b 	.word	0x000b736b
   b4748:	000ba4a3 	.word	0x000ba4a3

000b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4750:	b08c      	sub	sp, #48	; 0x30
   b4752:	af04      	add	r7, sp, #16
   b4754:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4756:	2205      	movs	r2, #5
   b4758:	6800      	ldr	r0, [r0, #0]
   b475a:	1d39      	adds	r1, r7, #4
   b475c:	f003 ff81 	bl	b8662 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4760:	b398      	cbz	r0, b47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4762:	2805      	cmp	r0, #5
   b4764:	d004      	beq.n	b4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4766:	2000      	movs	r0, #0
}
   b4768:	3720      	adds	r7, #32
   b476a:	46bd      	mov	sp, r7
   b476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4770:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4774:	ba5b      	rev16	r3, r3
   b4776:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4778:	f8a7 3005 	strh.w	r3, [r7, #5]
   b477c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4780:	ba5b      	rev16	r3, r3
   b4782:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b4786:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b478a:	2a00      	cmp	r2, #0
   b478c:	d0eb      	beq.n	b4766 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b478e:	793b      	ldrb	r3, [r7, #4]
   b4790:	bb23      	cbnz	r3, b47dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b4792:	f002 fde7 	bl	b7364 <_Z11BlynkMillisv>
   b4796:	4602      	mov	r2, r0
   b4798:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b479a:	7f60      	ldrb	r0, [r4, #29]
   b479c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b47a0:	b9c0      	cbnz	r0, b47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b47a2:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b47a6:	2901      	cmp	r1, #1
   b47a8:	d114      	bne.n	b47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b47aa:	2b09      	cmp	r3, #9
   b47ac:	d00f      	beq.n	b47ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b47ae:	2bc8      	cmp	r3, #200	; 0xc8
   b47b0:	d001      	beq.n	b47b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b47b2:	2b04      	cmp	r3, #4
   b47b4:	d1d8      	bne.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b47b6:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b47b8:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b47ba:	4620      	mov	r0, r4
                state = CONNECTED;
   b47bc:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b47be:	f000 fb93 	bl	b4ee8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b47c2:	f7ff fccd 	bl	b4160 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b47c6:	f002 fdd1 	bl	b736c <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b47ca:	2001      	movs	r0, #1
   b47cc:	e7cc      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b47ce:	2303      	movs	r3, #3
   b47d0:	7763      	strb	r3, [r4, #29]
                break;
   b47d2:	e7c9      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b47d4:	1f58      	subs	r0, r3, #5
   b47d6:	bf18      	it	ne
   b47d8:	2001      	movne	r0, #1
   b47da:	e7c5      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b47dc:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b47e0:	d903      	bls.n	b47ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b47e2:	4620      	mov	r0, r4
   b47e4:	f7ff fe78 	bl	b44d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b47e8:	e7ef      	b.n	b47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b47ea:	f108 0308 	add.w	r3, r8, #8
   b47ee:	466e      	mov	r6, sp
   b47f0:	08db      	lsrs	r3, r3, #3
   b47f2:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b47f6:	469d      	mov	sp, r3
   b47f8:	ad04      	add	r5, sp, #16
   b47fa:	6820      	ldr	r0, [r4, #0]
   b47fc:	4642      	mov	r2, r8
   b47fe:	4629      	mov	r1, r5
   b4800:	f003 ff2f 	bl	b8662 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4804:	4580      	cmp	r8, r0
   b4806:	f04f 0000 	mov.w	r0, #0
   b480a:	d17f      	bne.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b480c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4810:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4812:	f002 fda7 	bl	b7364 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4816:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4818:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b481a:	2b14      	cmp	r3, #20
   b481c:	f000 80a6 	beq.w	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4820:	d848      	bhi.n	b48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b4822:	2b0f      	cmp	r3, #15
   b4824:	f000 80a2 	beq.w	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b4828:	d807      	bhi.n	b483a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b482a:	2b02      	cmp	r3, #2
   b482c:	d048      	beq.n	b48c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b482e:	2b06      	cmp	r3, #6
   b4830:	d051      	beq.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b4832:	4620      	mov	r0, r4
   b4834:	f7ff fe50 	bl	b44d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4838:	e058      	b.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b483a:	2b11      	cmp	r3, #17
   b483c:	d1f9      	bne.n	b4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b483e:	2300      	movs	r3, #0
   b4840:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4842:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4846:	442b      	add	r3, r5
        if (it >= param.end())
   b4848:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b484a:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b484e:	d24d      	bcs.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4850:	f107 000c 	add.w	r0, r7, #12
   b4854:	f8d5 8000 	ldr.w	r8, [r5]
   b4858:	f7ff fd7a 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b485c:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b485e:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4862:	1b5d      	subs	r5, r3, r5
   b4864:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4866:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b486a:	687b      	ldr	r3, [r7, #4]
   b486c:	61fd      	str	r5, [r7, #28]
   b486e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4872:	8363      	strh	r3, [r4, #26]
   b4874:	4b64      	ldr	r3, [pc, #400]	; (b4a08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4876:	4598      	cmp	r8, r3
   b4878:	f000 80bf 	beq.w	b49fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b487c:	f200 808c 	bhi.w	b4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4880:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4884:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4888:	4413      	add	r3, r2
   b488a:	4598      	cmp	r8, r3
   b488c:	f000 809d 	beq.w	b49ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4890:	d879      	bhi.n	b4986 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b4892:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b4896:	3b06      	subs	r3, #6
   b4898:	4598      	cmp	r8, r3
   b489a:	f000 809c 	beq.w	b49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b489e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b48a2:	3303      	adds	r3, #3
   b48a4:	4598      	cmp	r8, r3
   b48a6:	d16b      	bne.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b48a8:	f107 0114 	add.w	r1, r7, #20
   b48ac:	4638      	mov	r0, r7
   b48ae:	f002 fd5c 	bl	b736a <BlynkWidgetWrite>
   b48b2:	e065      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b48b4:	2b29      	cmp	r3, #41	; 0x29
   b48b6:	d01b      	beq.n	b48f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b48b8:	2b37      	cmp	r3, #55	; 0x37
   b48ba:	d017      	beq.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b48bc:	2b1d      	cmp	r3, #29
   b48be:	d1b8      	bne.n	b4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b48c0:	7f63      	ldrb	r3, [r4, #29]
   b48c2:	b943      	cbnz	r3, b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b48c4:	2301      	movs	r3, #1
   b48c6:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b48c8:	4620      	mov	r0, r4
   b48ca:	f000 fb0d 	bl	b4ee8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b48ce:	f7ff fc47 	bl	b4160 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b48d2:	f002 fd4b 	bl	b736c <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b48d6:	2300      	movs	r3, #0
   b48d8:	21c8      	movs	r1, #200	; 0xc8
   b48da:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b48de:	9100      	str	r1, [sp, #0]
   b48e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b48e4:	4619      	mov	r1, r3
   b48e6:	4620      	mov	r0, r4
   b48e8:	f000 fa50 	bl	b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b48ec:	2001      	movs	r0, #1
   b48ee:	e00d      	b.n	b490c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b48f0:	68a3      	ldr	r3, [r4, #8]
   b48f2:	b91b      	cbnz	r3, b48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b48f4:	2040      	movs	r0, #64	; 0x40
   b48f6:	f003 fb2f 	bl	b7f58 <malloc>
   b48fa:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b48fc:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4900:	44a8      	add	r8, r5
        if (it >= param.end())
   b4902:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4904:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4908:	d302      	bcc.n	b4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b490a:	2000      	movs	r0, #0
   b490c:	46b5      	mov	sp, r6
   b490e:	e72b      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4910:	4629      	mov	r1, r5
   b4912:	2240      	movs	r2, #64	; 0x40
   b4914:	68a0      	ldr	r0, [r4, #8]
   b4916:	f005 fc8d 	bl	ba234 <strncpy>
        redir_serv[63] = '\0';
   b491a:	68a3      	ldr	r3, [r4, #8]
   b491c:	2500      	movs	r5, #0
   b491e:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b4922:	f107 0014 	add.w	r0, r7, #20
   b4926:	f7ff fd13 	bl	b4350 <_ZN10BlynkParam8iteratorppEv>
   b492a:	6803      	ldr	r3, [r0, #0]
   b492c:	4598      	cmp	r8, r3
   b492e:	d91b      	bls.n	b4968 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4930:	6978      	ldr	r0, [r7, #20]
   b4932:	b120      	cbz	r0, b493e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b4934:	69bb      	ldr	r3, [r7, #24]
   b4936:	4298      	cmp	r0, r3
   b4938:	d214      	bcs.n	b4964 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b493a:	f005 fc09 	bl	ba150 <atol>
            redir_port = it.asLong();
   b493e:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4940:	6820      	ldr	r0, [r4, #0]
   b4942:	f004 fc03 	bl	b914c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4946:	6823      	ldr	r3, [r4, #0]
   b4948:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b494a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b494c:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b494e:	2300      	movs	r3, #0
   b4950:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4952:	f002 fd07 	bl	b7364 <_Z11BlynkMillisv>
   b4956:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b495a:	3808      	subs	r0, #8
   b495c:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4960:	6160      	str	r0, [r4, #20]
   b4962:	e7c3      	b.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4964:	4628      	mov	r0, r5
   b4966:	e7ea      	b.n	b493e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4968:	2550      	movs	r5, #80	; 0x50
   b496a:	e7e9      	b.n	b4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b496c:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b496e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4972:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4976:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4978:	4629      	mov	r1, r5
   b497a:	4620      	mov	r0, r4
   b497c:	f7ff fdb6 	bl	b44ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4980:	2300      	movs	r3, #0
   b4982:	8363      	strh	r3, [r4, #26]
   b4984:	e7b2      	b.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4986:	4b21      	ldr	r3, [pc, #132]	; (b4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b4988:	4598      	cmp	r8, r3
   b498a:	d1f9      	bne.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b498c:	f107 0114 	add.w	r1, r7, #20
   b4990:	4638      	mov	r0, r7
   b4992:	f002 fcea 	bl	b736a <BlynkWidgetWrite>
   b4996:	e7f3      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4998:	4b1d      	ldr	r3, [pc, #116]	; (b4a10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b499a:	4598      	cmp	r8, r3
   b499c:	d021      	beq.n	b49e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b499e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b49a2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b49a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b49aa:	4598      	cmp	r8, r3
   b49ac:	d01f      	beq.n	b49ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b49ae:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b49b2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b49b6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b49ba:	4598      	cmp	r8, r3
   b49bc:	d1e0      	bne.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b49be:	f107 0114 	add.w	r1, r7, #20
   b49c2:	4638      	mov	r0, r7
   b49c4:	f002 fcd1 	bl	b736a <BlynkWidgetWrite>
   b49c8:	e7da      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b49ca:	f107 0114 	add.w	r1, r7, #20
   b49ce:	4638      	mov	r0, r7
   b49d0:	f002 fccb 	bl	b736a <BlynkWidgetWrite>
   b49d4:	e7d4      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b49d6:	f107 0114 	add.w	r1, r7, #20
   b49da:	4638      	mov	r0, r7
   b49dc:	f002 fcc5 	bl	b736a <BlynkWidgetWrite>
   b49e0:	e7ce      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b49e2:	f107 0114 	add.w	r1, r7, #20
   b49e6:	4638      	mov	r0, r7
   b49e8:	f002 fcbf 	bl	b736a <BlynkWidgetWrite>
   b49ec:	e7c8      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b49ee:	f107 0114 	add.w	r1, r7, #20
   b49f2:	4638      	mov	r0, r7
   b49f4:	f002 fcb9 	bl	b736a <BlynkWidgetWrite>
   b49f8:	e7c2      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b49fa:	f107 0114 	add.w	r1, r7, #20
   b49fe:	4638      	mov	r0, r7
   b4a00:	f002 fcb3 	bl	b736a <BlynkWidgetWrite>
   b4a04:	e7bc      	b.n	b4980 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4a06:	bf00      	nop
   b4a08:	00736676 	.word	0x00736676
   b4a0c:	00676264 	.word	0x00676264
   b4a10:	6e6f6361 	.word	0x6e6f6361

000b4a14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a18:	4604      	mov	r4, r0
   b4a1a:	b08c      	sub	sp, #48	; 0x30
   b4a1c:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4a1e:	f7ff fb9f 	bl	b4160 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4a22:	7f63      	ldrb	r3, [r4, #29]
   b4a24:	2b02      	cmp	r3, #2
   b4a26:	d01e      	beq.n	b4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4a28:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4a2a:	8b62      	ldrh	r2, [r4, #26]
   b4a2c:	3301      	adds	r3, #1
   b4a2e:	b2db      	uxtb	r3, r3
   b4a30:	7723      	strb	r3, [r4, #28]
   b4a32:	b9aa      	cbnz	r2, b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4a34:	2b02      	cmp	r3, #2
   b4a36:	d813      	bhi.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4a38:	6820      	ldr	r0, [r4, #0]
   b4a3a:	f004 fa4f 	bl	b8edc <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4a3e:	b1a8      	cbz	r0, b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4a40:	b925      	cbnz	r5, b4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b4a42:	6820      	ldr	r0, [r4, #0]
   b4a44:	f004 fb28 	bl	b9098 <_ZN9TCPClient9availableEv>
   b4a48:	2800      	cmp	r0, #0
   b4a4a:	dd0f      	ble.n	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4a4c:	4620      	mov	r0, r4
   b4a4e:	f7ff fe7d 	bl	b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4a52:	2800      	cmp	r0, #0
   b4a54:	d1f5      	bne.n	b4a42 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b4a56:	6820      	ldr	r0, [r4, #0]
   b4a58:	f004 fb78 	bl	b914c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4a5c:	f002 fc86 	bl	b736c <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4a60:	7f23      	ldrb	r3, [r4, #28]
   b4a62:	3b01      	subs	r3, #1
   b4a64:	7723      	strb	r3, [r4, #28]
}
   b4a66:	b00c      	add	sp, #48	; 0x30
   b4a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4a6c:	f002 fc7a 	bl	b7364 <_Z11BlynkMillisv>
   b4a70:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4a72:	6820      	ldr	r0, [r4, #0]
   b4a74:	f004 fa32 	bl	b8edc <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4a78:	7f67      	ldrb	r7, [r4, #29]
   b4a7a:	2f01      	cmp	r7, #1
   b4a7c:	4606      	mov	r6, r0
   b4a7e:	d124      	bne.n	b4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4a80:	b920      	cbnz	r0, b4a8c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4a82:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4a84:	4620      	mov	r0, r4
   b4a86:	f7ff fd27 	bl	b44d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4a8a:	e7e9      	b.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4a8c:	68e3      	ldr	r3, [r4, #12]
   b4a8e:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4a92:	1aeb      	subs	r3, r5, r3
   b4a94:	4293      	cmp	r3, r2
   b4a96:	d8f5      	bhi.n	b4a84 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4a98:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4a9c:	4293      	cmp	r3, r2
   b4a9e:	d803      	bhi.n	b4aa8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4aa0:	6923      	ldr	r3, [r4, #16]
   b4aa2:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4aa4:	4293      	cmp	r3, r2
   b4aa6:	d9db      	bls.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4aa8:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4aaa:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4aae:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4ab0:	4293      	cmp	r3, r2
   b4ab2:	d9d5      	bls.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4ab4:	2300      	movs	r3, #0
   b4ab6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4aba:	9300      	str	r3, [sp, #0]
   b4abc:	461a      	mov	r2, r3
   b4abe:	2106      	movs	r1, #6
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	f000 f963 	bl	b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4ac6:	6165      	str	r5, [r4, #20]
                return false;
   b4ac8:	e7ca      	b.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b4aca:	2f00      	cmp	r7, #0
   b4acc:	d1c8      	bne.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4ace:	6963      	ldr	r3, [r4, #20]
   b4ad0:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4ad2:	b140      	cbz	r0, b4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b4ad4:	f241 7270 	movw	r2, #6000	; 0x1770
   b4ad8:	4293      	cmp	r3, r2
   b4ada:	d9c1      	bls.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b4adc:	6820      	ldr	r0, [r4, #0]
   b4ade:	f004 fb35 	bl	b914c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4ae2:	7767      	strb	r7, [r4, #29]
            return false;
   b4ae4:	e7bc      	b.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4ae6:	f241 3288 	movw	r2, #5000	; 0x1388
   b4aea:	4293      	cmp	r3, r2
   b4aec:	d9b8      	bls.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4aee:	6820      	ldr	r0, [r4, #0]
   b4af0:	f004 fb2c 	bl	b914c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4af4:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4af8:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4afc:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4b00:	f1be 0f00 	cmp.w	lr, #0
   b4b04:	d01b      	beq.n	b4b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b4b06:	4633      	mov	r3, r6
   b4b08:	4642      	mov	r2, r8
   b4b0a:	4671      	mov	r1, lr
   b4b0c:	4660      	mov	r0, ip
   b4b0e:	f004 f967 	bl	b8de0 <_ZN9TCPClient7connectEPKctm>
   b4b12:	2801      	cmp	r0, #1
   b4b14:	d1d7      	bne.n	b4ac6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b16:	6863      	ldr	r3, [r4, #4]
   b4b18:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4b1a:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b1c:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4b1e:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b20:	f005 fb80 	bl	ba224 <strlen>
   b4b24:	2200      	movs	r2, #0
   b4b26:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4b2a:	9b05      	ldr	r3, [sp, #20]
   b4b2c:	9000      	str	r0, [sp, #0]
   b4b2e:	462a      	mov	r2, r5
   b4b30:	211d      	movs	r1, #29
   b4b32:	4620      	mov	r0, r4
   b4b34:	f000 f92a 	bl	b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4b38:	6923      	ldr	r3, [r4, #16]
   b4b3a:	6163      	str	r3, [r4, #20]
            return true;
   b4b3c:	e790      	b.n	b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4b3e:	4b08      	ldr	r3, [pc, #32]	; (b4b60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4b40:	9306      	str	r3, [sp, #24]
   b4b42:	f10c 0720 	add.w	r7, ip, #32
   b4b46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4b48:	ae07      	add	r6, sp, #28
   b4b4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4b4c:	683b      	ldr	r3, [r7, #0]
   b4b4e:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4b50:	4642      	mov	r2, r8
   b4b52:	4673      	mov	r3, lr
   b4b54:	a906      	add	r1, sp, #24
   b4b56:	4660      	mov	r0, ip
   b4b58:	f004 fa22 	bl	b8fa0 <_ZN9TCPClient7connectE9IPAddresstm>
   b4b5c:	e7d9      	b.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4b5e:	bf00      	nop
   b4b60:	000bab5c 	.word	0x000bab5c

000b4b64 <loop>:
{
   b4b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  Blynk.run();
   b4b66:	2100      	movs	r1, #0
{
   b4b68:	b08d      	sub	sp, #52	; 0x34
  Blynk.run();
   b4b6a:	4872      	ldr	r0, [pc, #456]	; (b4d34 <loop+0x1d0>)
  if (millis() >= scrollTime + 350)
   b4b6c:	4e72      	ldr	r6, [pc, #456]	; (b4d38 <loop+0x1d4>)
  Blynk.run();
   b4b6e:	f7ff ff51 	bl	b4a14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  Serial.println("Loop");
   b4b72:	f003 ff57 	bl	b8a24 <_Z16_fetch_usbserialv>
   b4b76:	4971      	ldr	r1, [pc, #452]	; (b4d3c <loop+0x1d8>)
   b4b78:	f003 fd05 	bl	b8586 <_ZN5Print7printlnEPKc>
   b4b7c:	f002 ffb8 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() >= scrollTime + 350)
   b4b80:	6833      	ldr	r3, [r6, #0]
   b4b82:	f503 73af 	add.w	r3, r3, #350	; 0x15e
   b4b86:	4283      	cmp	r3, r0
   b4b88:	d849      	bhi.n	b4c1e <loop+0xba>
    lcd.setCursor(fileScrollDiff, 0);
   b4b8a:	4d6d      	ldr	r5, [pc, #436]	; (b4d40 <loop+0x1dc>)
    lcd.clear();
   b4b8c:	486d      	ldr	r0, [pc, #436]	; (b4d44 <loop+0x1e0>)
   b4b8e:	4c6e      	ldr	r4, [pc, #440]	; (b4d48 <loop+0x1e4>)
   b4b90:	f002 fe3c 	bl	b780c <_ZN13LiquidCrystal5clearEv>
    lcd.setCursor(fileScrollDiff, 0);
   b4b94:	2200      	movs	r2, #0
   b4b96:	7829      	ldrb	r1, [r5, #0]
   b4b98:	486a      	ldr	r0, [pc, #424]	; (b4d44 <loop+0x1e0>)
   b4b9a:	f002 fe41 	bl	b7820 <_ZN13LiquidCrystal9setCursorEhh>
    String toDisect = fileNames[fileNum];
   b4b9e:	4b6b      	ldr	r3, [pc, #428]	; (b4d4c <loop+0x1e8>)
   b4ba0:	6819      	ldr	r1, [r3, #0]
   b4ba2:	4b6b      	ldr	r3, [pc, #428]	; (b4d50 <loop+0x1ec>)
   b4ba4:	4668      	mov	r0, sp
   b4ba6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   b4baa:	f003 fc02 	bl	b83b2 <_ZN6StringC1ERKS_>
    String toDisplay;
   b4bae:	4969      	ldr	r1, [pc, #420]	; (b4d54 <loop+0x1f0>)
   b4bb0:	a804      	add	r0, sp, #16
   b4bb2:	f003 fbbe 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
    if (0 < fileScrollDiff)
   b4bb6:	682a      	ldr	r2, [r5, #0]
   b4bb8:	2a00      	cmp	r2, #0
   b4bba:	dd4b      	ble.n	b4c54 <loop+0xf0>
      unsigned int pos = fileScroll + 16;
   b4bbc:	6823      	ldr	r3, [r4, #0]
   b4bbe:	3310      	adds	r3, #16
      toDisplay = toDisect.substring(0, pos - fileScrollDiff);
   b4bc0:	1a9b      	subs	r3, r3, r2
   b4bc2:	4669      	mov	r1, sp
   b4bc4:	2200      	movs	r2, #0
   b4bc6:	a808      	add	r0, sp, #32
   b4bc8:	f003 fc78 	bl	b84bc <_ZNK6String9substringEjj>
   b4bcc:	a908      	add	r1, sp, #32
   b4bce:	a804      	add	r0, sp, #16
   b4bd0:	f003 fbfa 	bl	b83c8 <_ZN6StringaSEOS_>
   b4bd4:	a808      	add	r0, sp, #32
   b4bd6:	f003 fb61 	bl	b829c <_ZN6StringD1Ev>
      fileScrollDiff--;
   b4bda:	682b      	ldr	r3, [r5, #0]
   b4bdc:	3b01      	subs	r3, #1
   b4bde:	602b      	str	r3, [r5, #0]
    Serial.println(toDisplay + "Hi");
   b4be0:	f003 ff20 	bl	b8a24 <_Z16_fetch_usbserialv>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4be4:	a904      	add	r1, sp, #16
   b4be6:	4604      	mov	r4, r0
   b4be8:	a808      	add	r0, sp, #32
   b4bea:	f003 fbe2 	bl	b83b2 <_ZN6StringC1ERKS_>
   b4bee:	495a      	ldr	r1, [pc, #360]	; (b4d58 <loop+0x1f4>)
   b4bf0:	a808      	add	r0, sp, #32
   b4bf2:	f003 fc4d 	bl	b8490 <_ZplRK15StringSumHelperPKc>
   b4bf6:	6801      	ldr	r1, [r0, #0]
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	f003 fcc4 	bl	b8586 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   b4bfe:	a808      	add	r0, sp, #32
   b4c00:	f003 fb4c 	bl	b829c <_ZN6StringD1Ev>
    lcd.print(toDisplay);
   b4c04:	9904      	ldr	r1, [sp, #16]
   b4c06:	484f      	ldr	r0, [pc, #316]	; (b4d44 <loop+0x1e0>)
   b4c08:	f003 fcaa 	bl	b8560 <_ZN5Print5printEPKc>
   b4c0c:	f002 ff70 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    scrollTime = millis();
   b4c10:	6030      	str	r0, [r6, #0]
    String toDisplay;
   b4c12:	a804      	add	r0, sp, #16
   b4c14:	f003 fb42 	bl	b829c <_ZN6StringD1Ev>
    String toDisect = fileNames[fileNum];
   b4c18:	4668      	mov	r0, sp
   b4c1a:	f003 fb3f 	bl	b829c <_ZN6StringD1Ev>
  if (millis() >= secondLineTime + 10000)
   b4c1e:	4c4f      	ldr	r4, [pc, #316]	; (b4d5c <loop+0x1f8>)
   b4c20:	f002 ff66 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
   b4c24:	6823      	ldr	r3, [r4, #0]
   b4c26:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
   b4c2a:	3310      	adds	r3, #16
   b4c2c:	4283      	cmp	r3, r0
   b4c2e:	d87e      	bhi.n	b4d2e <loop+0x1ca>
   b4c30:	f002 ff5e 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
    secondLine = !secondLine;
   b4c34:	4a4a      	ldr	r2, [pc, #296]	; (b4d60 <loop+0x1fc>)
    secondLineTime = millis();
   b4c36:	6020      	str	r0, [r4, #0]
    secondLine = !secondLine;
   b4c38:	7813      	ldrb	r3, [r2, #0]
   b4c3a:	f083 0301 	eor.w	r3, r3, #1
   b4c3e:	7013      	strb	r3, [r2, #0]
    if (!music)
   b4c40:	4a48      	ldr	r2, [pc, #288]	; (b4d64 <loop+0x200>)
   b4c42:	7812      	ldrb	r2, [r2, #0]
   b4c44:	b9fa      	cbnz	r2, b4c86 <loop+0x122>
      lineTwo = "No Track";
   b4c46:	4948      	ldr	r1, [pc, #288]	; (b4d68 <loop+0x204>)
        lineTwo = "BPM: " + fileBpm[fileNum];
   b4c48:	4848      	ldr	r0, [pc, #288]	; (b4d6c <loop+0x208>)
}
   b4c4a:	b00d      	add	sp, #52	; 0x34
   b4c4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lineTwo = "BPM: " + fileBpm[fileNum];
   b4c50:	f003 bbc2 	b.w	b83d8 <_ZN6StringaSEPKc>
    else if (nameLength >= fileScroll)
   b4c54:	6822      	ldr	r2, [r4, #0]
   b4c56:	9b02      	ldr	r3, [sp, #8]
   b4c58:	429a      	cmp	r2, r3
   b4c5a:	dc10      	bgt.n	b4c7e <loop+0x11a>
      toDisplay = toDisect.substring(fileScroll, pos);
   b4c5c:	f102 0310 	add.w	r3, r2, #16
   b4c60:	4669      	mov	r1, sp
   b4c62:	a808      	add	r0, sp, #32
   b4c64:	f003 fc2a 	bl	b84bc <_ZNK6String9substringEjj>
   b4c68:	a908      	add	r1, sp, #32
   b4c6a:	a804      	add	r0, sp, #16
   b4c6c:	f003 fbac 	bl	b83c8 <_ZN6StringaSEOS_>
   b4c70:	a808      	add	r0, sp, #32
   b4c72:	f003 fb13 	bl	b829c <_ZN6StringD1Ev>
      fileScroll++;
   b4c76:	6823      	ldr	r3, [r4, #0]
   b4c78:	3301      	adds	r3, #1
      fileScroll = 0;
   b4c7a:	6023      	str	r3, [r4, #0]
   b4c7c:	e7b0      	b.n	b4be0 <loop+0x7c>
      fileScrollDiff = 16;
   b4c7e:	2310      	movs	r3, #16
   b4c80:	602b      	str	r3, [r5, #0]
      fileScroll = 0;
   b4c82:	2300      	movs	r3, #0
   b4c84:	e7f9      	b.n	b4c7a <loop+0x116>
      if (secondLine)
   b4c86:	b13b      	cbz	r3, b4c98 <loop+0x134>
        lineTwo = "BPM: " + fileBpm[fileNum];
   b4c88:	4b30      	ldr	r3, [pc, #192]	; (b4d4c <loop+0x1e8>)
   b4c8a:	4939      	ldr	r1, [pc, #228]	; (b4d70 <loop+0x20c>)
   b4c8c:	681a      	ldr	r2, [r3, #0]
   b4c8e:	4b39      	ldr	r3, [pc, #228]	; (b4d74 <loop+0x210>)
   b4c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   b4c94:	4419      	add	r1, r3
   b4c96:	e7d7      	b.n	b4c48 <loop+0xe4>
   b4c98:	f002 ff2a 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long playDuration = millis() - songTimer;
   b4c9c:	4b36      	ldr	r3, [pc, #216]	; (b4d78 <loop+0x214>)
   b4c9e:	681b      	ldr	r3, [r3, #0]
        float playSeconds = playDuration/1000.0 - 0.5; //so it always rounds down
   b4ca0:	1ac0      	subs	r0, r0, r3
   b4ca2:	f004 ff47 	bl	b9b34 <__aeabi_ui2d>
   b4ca6:	4b35      	ldr	r3, [pc, #212]	; (b4d7c <loop+0x218>)
   b4ca8:	2200      	movs	r2, #0
   b4caa:	f005 f8e7 	bl	b9e7c <__aeabi_ddiv>
   b4cae:	4b34      	ldr	r3, [pc, #208]	; (b4d80 <loop+0x21c>)
   b4cb0:	2200      	movs	r2, #0
   b4cb2:	f004 fe01 	bl	b98b8 <__aeabi_dsub>
   b4cb6:	f005 f9f1 	bl	ba09c <__aeabi_d2f>
        playDuration = int(playSeconds);
   b4cba:	ee07 0a90 	vmov	s15, r0
   b4cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	StringSumHelper(const char *p) : String(p) {}
   b4cc2:	4930      	ldr	r1, [pc, #192]	; (b4d84 <loop+0x220>)
   b4cc4:	ee17 4a90 	vmov	r4, s15
   b4cc8:	a804      	add	r0, sp, #16
   b4cca:	f003 fb32 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
        lineTwo = "Time Left: " + String(int((playDuration / 60) - 0.5)) + ":" + String(playDuration % 60);
   b4cce:	273c      	movs	r7, #60	; 0x3c
   b4cd0:	fbb4 f6f7 	udiv	r6, r4, r7
   b4cd4:	4630      	mov	r0, r6
   b4cd6:	f004 ff2d 	bl	b9b34 <__aeabi_ui2d>
   b4cda:	4b29      	ldr	r3, [pc, #164]	; (b4d80 <loop+0x21c>)
   b4cdc:	2200      	movs	r2, #0
   b4cde:	f004 fdeb 	bl	b98b8 <__aeabi_dsub>
   b4ce2:	f005 f9b3 	bl	ba04c <__aeabi_d2iz>
   b4ce6:	220a      	movs	r2, #10
   b4ce8:	4601      	mov	r1, r0
   b4cea:	4668      	mov	r0, sp
   b4cec:	f003 fb86 	bl	b83fc <_ZN6StringC1Eih>
   b4cf0:	4669      	mov	r1, sp
   b4cf2:	a804      	add	r0, sp, #16
   b4cf4:	f003 fbc0 	bl	b8478 <_ZplRK15StringSumHelperRK6String>
   b4cf8:	4923      	ldr	r1, [pc, #140]	; (b4d88 <loop+0x224>)
   b4cfa:	f003 fbc9 	bl	b8490 <_ZplRK15StringSumHelperPKc>
   b4cfe:	220a      	movs	r2, #10
   b4d00:	4605      	mov	r5, r0
   b4d02:	fb07 4116 	mls	r1, r7, r6, r4
   b4d06:	a808      	add	r0, sp, #32
   b4d08:	f003 fb8b 	bl	b8422 <_ZN6StringC1Emh>
   b4d0c:	a908      	add	r1, sp, #32
   b4d0e:	4628      	mov	r0, r5
   b4d10:	f003 fbb2 	bl	b8478 <_ZplRK15StringSumHelperRK6String>
   b4d14:	4601      	mov	r1, r0
   b4d16:	4815      	ldr	r0, [pc, #84]	; (b4d6c <loop+0x208>)
   b4d18:	f003 fb3c 	bl	b8394 <_ZN6StringaSERKS_>
   b4d1c:	a808      	add	r0, sp, #32
   b4d1e:	f003 fabd 	bl	b829c <_ZN6StringD1Ev>
   b4d22:	4668      	mov	r0, sp
   b4d24:	f003 faba 	bl	b829c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4d28:	a804      	add	r0, sp, #16
   b4d2a:	f003 fab7 	bl	b829c <_ZN6StringD1Ev>
}
   b4d2e:	b00d      	add	sp, #52	; 0x34
   b4d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4d32:	bf00      	nop
   b4d34:	2003e040 	.word	0x2003e040
   b4d38:	2003e698 	.word	0x2003e698
   b4d3c:	000ba4ad 	.word	0x000ba4ad
   b4d40:	2003dfb8 	.word	0x2003dfb8
   b4d44:	2003e608 	.word	0x2003e608
   b4d48:	2003e594 	.word	0x2003e594
   b4d4c:	2003e590 	.word	0x2003e590
   b4d50:	2003e520 	.word	0x2003e520
   b4d54:	000ba4c3 	.word	0x000ba4c3
   b4d58:	000ba4b2 	.word	0x000ba4b2
   b4d5c:	2003e69c 	.word	0x2003e69c
   b4d60:	2003dfbd 	.word	0x2003dfbd
   b4d64:	2003dfbc 	.word	0x2003dfbc
   b4d68:	000ba4b5 	.word	0x000ba4b5
   b4d6c:	2003e628 	.word	0x2003e628
   b4d70:	000ba4be 	.word	0x000ba4be
   b4d74:	2003df9c 	.word	0x2003df9c
   b4d78:	2003e6a0 	.word	0x2003e6a0
   b4d7c:	408f4000 	.word	0x408f4000
   b4d80:	3fe00000 	.word	0x3fe00000
   b4d84:	000ba4c4 	.word	0x000ba4c4
   b4d88:	000ba4d0 	.word	0x000ba4d0

000b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d90:	b083      	sub	sp, #12
   b4d92:	af00      	add	r7, sp, #0
   b4d94:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4d96:	6800      	ldr	r0, [r0, #0]
   b4d98:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4d9a:	4688      	mov	r8, r1
   b4d9c:	4616      	mov	r6, r2
   b4d9e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4da0:	46eb      	mov	fp, sp
   b4da2:	f004 f89b 	bl	b8edc <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4da6:	2800      	cmp	r0, #0
   b4da8:	d07f      	beq.n	b4eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4daa:	f1b8 0f1d 	cmp.w	r8, #29
   b4dae:	d804      	bhi.n	b4dba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4db0:	4b4c      	ldr	r3, [pc, #304]	; (b4ee4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4db2:	fa23 f308 	lsr.w	r3, r3, r8
   b4db6:	07db      	lsls	r3, r3, #31
   b4db8:	d402      	bmi.n	b4dc0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4dba:	7f63      	ldrb	r3, [r4, #29]
   b4dbc:	2b01      	cmp	r3, #1
   b4dbe:	d174      	bne.n	b4eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4dc0:	b946      	cbnz	r6, b4dd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4dc2:	8b66      	ldrh	r6, [r4, #26]
   b4dc4:	b936      	cbnz	r6, b4dd4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4dc6:	8b23      	ldrh	r3, [r4, #24]
   b4dc8:	3301      	adds	r3, #1
   b4dca:	b29b      	uxth	r3, r3
   b4dcc:	2b00      	cmp	r3, #0
   b4dce:	d071      	beq.n	b4eb4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4dd0:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4dd2:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4dd4:	f1a8 030c 	sub.w	r3, r8, #12
   b4dd8:	2b08      	cmp	r3, #8
   b4dda:	d816      	bhi.n	b4e0a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4ddc:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4de0:	4293      	cmp	r3, r2
   b4de2:	bf38      	it	cc
   b4de4:	4613      	movcc	r3, r2
   b4de6:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4dea:	f002 fabb 	bl	b7364 <_Z11BlynkMillisv>
   b4dee:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4df2:	2800      	cmp	r0, #0
   b4df4:	db60      	blt.n	b4eb8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4df6:	2100      	movs	r1, #0
   b4df8:	4620      	mov	r0, r4
   b4dfa:	f7ff fe0b 	bl	b4a14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4dfe:	f002 fab1 	bl	b7364 <_Z11BlynkMillisv>
   b4e02:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4e06:	2800      	cmp	r0, #0
   b4e08:	daf5      	bge.n	b4df6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4e0a:	f1b9 0f00 	cmp.w	r9, #0
   b4e0e:	d05a      	beq.n	b4ec6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4e10:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4e14:	2a00      	cmp	r2, #0
   b4e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4e18:	bf08      	it	eq
   b4e1a:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4e1c:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4e20:	f10a 0307 	add.w	r3, sl, #7
   b4e24:	f023 0307 	bic.w	r3, r3, #7
   b4e28:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4e2e:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4e32:	18ea      	adds	r2, r5, r3
   b4e34:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4e38:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4e3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4e3e:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4e42:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4e46:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4e4a:	f1b9 0f00 	cmp.w	r9, #0
   b4e4e:	d03c      	beq.n	b4eca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4e50:	2d00      	cmp	r5, #0
   b4e52:	d03a      	beq.n	b4eca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4e54:	462a      	mov	r2, r5
   b4e56:	4649      	mov	r1, r9
   b4e58:	f10d 0005 	add.w	r0, sp, #5
   b4e5c:	f005 f98c 	bl	ba178 <memcpy>
        pos += length;
   b4e60:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4e64:	b13b      	cbz	r3, b4e76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4e68:	b12b      	cbz	r3, b4e76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4e6a:	461a      	mov	r2, r3
   b4e6c:	687b      	ldr	r3, [r7, #4]
   b4e6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4e70:	4418      	add	r0, r3
   b4e72:	f005 f981 	bl	ba178 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4e76:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4e78:	4555      	cmp	r5, sl
   b4e7a:	d22a      	bcs.n	b4ed2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4e7c:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4e80:	687b      	ldr	r3, [r7, #4]
   b4e82:	6820      	ldr	r0, [r4, #0]
   b4e84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4e88:	bf28      	it	cs
   b4e8a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4e8e:	1959      	adds	r1, r3, r5
   b4e90:	f003 fefb 	bl	b8c8a <_ZN9TCPClient5writeEPKhj>
   b4e94:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4e96:	2000      	movs	r0, #0
   b4e98:	f002 fa62 	bl	b7360 <_Z10BlynkDelaym>
        if (w == 0) {
   b4e9c:	b9be      	cbnz	r6, b4ece <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4e9e:	6820      	ldr	r0, [r4, #0]
   b4ea0:	f004 f954 	bl	b914c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4ea4:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4ea6:	f002 fa61 	bl	b736c <BlynkNoOpCbk>
}
   b4eaa:	370c      	adds	r7, #12
   b4eac:	46dd      	mov	sp, fp
   b4eae:	46bd      	mov	sp, r7
   b4eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4eb4:	2301      	movs	r3, #1
   b4eb6:	e78b      	b.n	b4dd0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4eb8:	7f21      	ldrb	r1, [r4, #28]
   b4eba:	2900      	cmp	r1, #0
   b4ebc:	d1a5      	bne.n	b4e0a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4ebe:	4620      	mov	r0, r4
   b4ec0:	f7ff fda8 	bl	b4a14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4ec4:	e7a1      	b.n	b4e0a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4ec6:	2305      	movs	r3, #5
   b4ec8:	e7a3      	b.n	b4e12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4eca:	2005      	movs	r0, #5
   b4ecc:	e7c9      	b.n	b4e62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4ece:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4ed0:	e7d2      	b.n	b4e78 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4ed2:	d003      	beq.n	b4edc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4ed4:	4620      	mov	r0, r4
   b4ed6:	f7ff faff 	bl	b44d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4eda:	e7e6      	b.n	b4eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4edc:	f002 fa42 	bl	b7364 <_Z11BlynkMillisv>
   b4ee0:	6120      	str	r0, [r4, #16]
   b4ee2:	e7e2      	b.n	b4eaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4ee4:	20000045 	.word	0x20000045

000b4ee8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4ee8:	b500      	push	{lr}
   b4eea:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4eec:	ab04      	add	r3, sp, #16
   b4eee:	2200      	movs	r2, #0
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	234f      	movs	r3, #79	; 0x4f
   b4ef4:	9300      	str	r3, [sp, #0]
   b4ef6:	9202      	str	r2, [sp, #8]
   b4ef8:	4b03      	ldr	r3, [pc, #12]	; (b4f08 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4efa:	2111      	movs	r1, #17
   b4efc:	f7ff ff46 	bl	b4d8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4f00:	b015      	add	sp, #84	; 0x54
   b4f02:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f06:	bf00      	nop
   b4f08:	000ba644 	.word	0x000ba644

000b4f0c <setup>:
{
   b4f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  lcd.begin(16, 2);
   b4f10:	2300      	movs	r3, #0
{
   b4f12:	b094      	sub	sp, #80	; 0x50
  lcd.begin(16, 2);
   b4f14:	2202      	movs	r2, #2
   b4f16:	4870      	ldr	r0, [pc, #448]	; (b50d8 <setup+0x1cc>)
        this->authkey = auth;
   b4f18:	4d70      	ldr	r5, [pc, #448]	; (b50dc <setup+0x1d0>)
   b4f1a:	2110      	movs	r1, #16
   b4f1c:	f002 fcaa 	bl	b7874 <_ZN13LiquidCrystal5beginEhhh>
  lcd.setBacklight(HIGH);
   b4f20:	2101      	movs	r1, #1
   b4f22:	486d      	ldr	r0, [pc, #436]	; (b50d8 <setup+0x1cc>)
   b4f24:	f002 fb95 	bl	b7652 <_ZN13LiquidCrystal12setBacklightEh>
  Serial.begin(9600);
   b4f28:	f003 fd7c 	bl	b8a24 <_Z16_fetch_usbserialv>
   b4f2c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f30:	f003 fd6c 	bl	b8a0c <_ZN9USBSerial5beginEl>
  Blynk.begin("ttCOyuu9x3tXApkPe1m4LMgI5BNNzq5d", IPAddress(167, 172, 234, 162), 8080);
   b4f34:	23a2      	movs	r3, #162	; 0xa2
   b4f36:	22ac      	movs	r2, #172	; 0xac
   b4f38:	21a7      	movs	r1, #167	; 0xa7
   b4f3a:	9300      	str	r3, [sp, #0]
   b4f3c:	a802      	add	r0, sp, #8
   b4f3e:	23ea      	movs	r3, #234	; 0xea
   b4f40:	f003 fcf6 	bl	b8930 <_ZN9IPAddressC1Ehhhh>
   b4f44:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4f46:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4f4a:	f002 fa09 	bl	b7360 <_Z10BlynkDelaym>
   b4f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4f50:	af09      	add	r7, sp, #36	; 0x24
   b4f52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4f54:	6823      	ldr	r3, [r4, #0]
   b4f56:	703b      	strb	r3, [r7, #0]
   b4f58:	4b61      	ldr	r3, [pc, #388]	; (b50e0 <setup+0x1d4>)
   b4f5a:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4f5c:	f002 fa02 	bl	b7364 <_Z11BlynkMillisv>
   b4f60:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4f64:	3808      	subs	r0, #8
   b4f66:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4f6a:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4f6e:	6168      	str	r0, [r5, #20]
   b4f70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4f74:	ae0f      	add	r6, sp, #60	; 0x3c
   b4f76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4f78:	682c      	ldr	r4, [r5, #0]
   b4f7a:	683b      	ldr	r3, [r7, #0]
   b4f7c:	7033      	strb	r3, [r6, #0]
        domain = NULL;
   b4f7e:	f04f 0800 	mov.w	r8, #0
        port = p;
   b4f82:	f641 7390 	movw	r3, #8080	; 0x1f90
        domain = NULL;
   b4f86:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
        port = p;
   b4f8a:	8723      	strh	r3, [r4, #56]	; 0x38
   b4f8c:	af0f      	add	r7, sp, #60	; 0x3c
   b4f8e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4f90:	3420      	adds	r4, #32
   b4f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f94:	6833      	ldr	r3, [r6, #0]
   b4f96:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4f98:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4f9c:	6828      	ldr	r0, [r5, #0]
   b4f9e:	f004 f8d5 	bl	b914c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4fa2:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4fa6:	f002 f9dd 	bl	b7364 <_Z11BlynkMillisv>
   b4faa:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4fac:	7f6b      	ldrb	r3, [r5, #29]
   b4fae:	2b01      	cmp	r3, #1
   b4fb0:	d00c      	beq.n	b4fcc <setup+0xc0>
               (BlynkMillis() - started < timeout))
   b4fb2:	f002 f9d7 	bl	b7364 <_Z11BlynkMillisv>
   b4fb6:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4fb8:	42b0      	cmp	r0, r6
   b4fba:	d804      	bhi.n	b4fc6 <setup+0xba>
            run();
   b4fbc:	2100      	movs	r1, #0
   b4fbe:	4628      	mov	r0, r5
   b4fc0:	f7ff fd28 	bl	b4a14 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4fc4:	e7f2      	b.n	b4fac <setup+0xa0>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4fc6:	7f6b      	ldrb	r3, [r5, #29]
   b4fc8:	2b01      	cmp	r3, #1
   b4fca:	d1e7      	bne.n	b4f9c <setup+0x90>
  Serial.println("wwww");
   b4fcc:	f003 fd2a 	bl	b8a24 <_Z16_fetch_usbserialv>
   b4fd0:	4944      	ldr	r1, [pc, #272]	; (b50e4 <setup+0x1d8>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4fd2:	4c45      	ldr	r4, [pc, #276]	; (b50e8 <setup+0x1dc>)
   b4fd4:	f003 fad7 	bl	b8586 <_ZN5Print7printlnEPKc>
  pinMode(D7, OUTPUT);
   b4fd8:	2101      	movs	r1, #1
   b4fda:	2007      	movs	r0, #7
   b4fdc:	f004 fa3c 	bl	b9458 <pinMode>
  Serial.println("jjjj");
   b4fe0:	f003 fd20 	bl	b8a24 <_Z16_fetch_usbserialv>
   b4fe4:	4941      	ldr	r1, [pc, #260]	; (b50ec <setup+0x1e0>)
   b4fe6:	f003 face 	bl	b8586 <_ZN5Print7printlnEPKc>
class SPISettings : public Printable {
   b4fea:	4b41      	ldr	r3, [pc, #260]	; (b50f0 <setup+0x1e4>)
   b4fec:	930e      	str	r3, [sp, #56]	; 0x38
   b4fee:	2300      	movs	r3, #0
   b4ff0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   b4ff4:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b4ff8:	4b3e      	ldr	r3, [pc, #248]	; (b50f4 <setup+0x1e8>)
   b4ffa:	9310      	str	r3, [sp, #64]	; 0x40
   b4ffc:	2501      	movs	r5, #1
   b4ffe:	ab0e      	add	r3, sp, #56	; 0x38
   b5000:	2202      	movs	r2, #2
   b5002:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b5006:	4630      	mov	r0, r6
   b5008:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
   b500c:	f001 ff96 	bl	b6f3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b5010:	b388      	cbz	r0, b5076 <setup+0x16a>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b5012:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b5014:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b5018:	f001 fc00 	bl	b681c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b501c:	4629      	mov	r1, r5
   b501e:	4620      	mov	r0, r4
   b5020:	f001 fe36 	bl	b6c90 <_ZN9FatVolume4initEh>
   b5024:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b5028:	4601      	mov	r1, r0
   b502a:	b1f8      	cbz	r0, b506c <setup+0x160>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b502c:	492e      	ldr	r1, [pc, #184]	; (b50e8 <setup+0x1dc>)
   b502e:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b5032:	f001 fa2a 	bl	b648a <_ZN7FatFile8openRootEP9FatVolume>
   b5036:	b1f0      	cbz	r0, b5076 <setup+0x16a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   b5038:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b503c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5040:	d019      	beq.n	b5076 <setup+0x16a>
      return false;
    }
    m_cwd = dir;
   b5042:	4b2d      	ldr	r3, [pc, #180]	; (b50f8 <setup+0x1ec>)
  while (!musicPlayer.begin())
   b5044:	4c2d      	ldr	r4, [pc, #180]	; (b50fc <setup+0x1f0>)
   b5046:	601d      	str	r5, [r3, #0]
  Serial.println("SD OK!");
   b5048:	f003 fcec 	bl	b8a24 <_Z16_fetch_usbserialv>
   b504c:	492c      	ldr	r1, [pc, #176]	; (b5100 <setup+0x1f4>)
   b504e:	f003 fa9a 	bl	b8586 <_ZN5Print7printlnEPKc>
  Serial.println("gggg");
   b5052:	f003 fce7 	bl	b8a24 <_Z16_fetch_usbserialv>
   b5056:	492b      	ldr	r1, [pc, #172]	; (b5104 <setup+0x1f8>)
   b5058:	f003 fa95 	bl	b8586 <_ZN5Print7printlnEPKc>
  while (!musicPlayer.begin())
   b505c:	4620      	mov	r0, r4
   b505e:	f000 fd98 	bl	b5b92 <_ZN26Adafruit_VS1053_FilePlayer5beginEv>
   b5062:	b978      	cbnz	r0, b5084 <setup+0x178>
    musicPlayer.begin();
   b5064:	4620      	mov	r0, r4
   b5066:	f000 fd94 	bl	b5b92 <_ZN26Adafruit_VS1053_FilePlayer5beginEv>
  while (!musicPlayer.begin())
   b506a:	e7f7      	b.n	b505c <setup+0x150>
    return (part ? init(part) : init(1) || init(0))
   b506c:	4620      	mov	r0, r4
   b506e:	f001 fe0f 	bl	b6c90 <_ZN9FatVolume4initEh>
   b5072:	2800      	cmp	r0, #0
   b5074:	d1da      	bne.n	b502c <setup+0x120>
    Log.error("SD failed, or not present");
   b5076:	4924      	ldr	r1, [pc, #144]	; (b5108 <setup+0x1fc>)
   b5078:	4824      	ldr	r0, [pc, #144]	; (b510c <setup+0x200>)
   b507a:	f7ff f895 	bl	b41a8 <_ZNK5spark6Logger5errorEPKcz>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   b507e:	f002 fd3f 	bl	b7b00 <os_thread_yield>
   b5082:	e7fc      	b.n	b507e <setup+0x172>
  Serial.println("rrrr");
   b5084:	f003 fcce 	bl	b8a24 <_Z16_fetch_usbserialv>
   b5088:	4921      	ldr	r1, [pc, #132]	; (b5110 <setup+0x204>)
   b508a:	f003 fa7c 	bl	b8586 <_ZN5Print7printlnEPKc>
  musicPlayer.setVolume(1, 1);
   b508e:	2201      	movs	r2, #1
   b5090:	4611      	mov	r1, r2
   b5092:	481a      	ldr	r0, [pc, #104]	; (b50fc <setup+0x1f0>)
   b5094:	f000 fc98 	bl	b59c8 <_ZN15Adafruit_VS10539setVolumeEhh>
  Serial.println("EEEE");
   b5098:	f003 fcc4 	bl	b8a24 <_Z16_fetch_usbserialv>
   b509c:	491d      	ldr	r1, [pc, #116]	; (b5114 <setup+0x208>)
   b509e:	f003 fa72 	bl	b8586 <_ZN5Print7printlnEPKc>
  if (musicPlayer.useInterrupt(D6))
   b50a2:	4816      	ldr	r0, [pc, #88]	; (b50fc <setup+0x1f0>)
   b50a4:	2106      	movs	r1, #6
   b50a6:	f000 f9ed 	bl	b5484 <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh>
   b50aa:	b178      	cbz	r0, b50cc <setup+0x1c0>
    digitalWrite(D7, HIGH);
   b50ac:	2101      	movs	r1, #1
   b50ae:	2007      	movs	r0, #7
   b50b0:	f004 f9e3 	bl	b947a <digitalWrite>
    musicPlayer.setIsrCallback(blink);
   b50b4:	4918      	ldr	r1, [pc, #96]	; (b5118 <setup+0x20c>)
   b50b6:	4811      	ldr	r0, [pc, #68]	; (b50fc <setup+0x1f0>)
   b50b8:	f000 f992 	bl	b53e0 <_ZN26Adafruit_VS1053_FilePlayer14setIsrCallbackEPFvvE>
  Serial.println("AAAHHHH");
   b50bc:	f003 fcb2 	bl	b8a24 <_Z16_fetch_usbserialv>
   b50c0:	4916      	ldr	r1, [pc, #88]	; (b511c <setup+0x210>)
}
   b50c2:	b014      	add	sp, #80	; 0x50
   b50c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.println("AAAHHHH");
   b50c8:	f003 ba5d 	b.w	b8586 <_ZN5Print7printlnEPKc>
    Log.info("DREQ pin is not an interrupt pin");
   b50cc:	4914      	ldr	r1, [pc, #80]	; (b5120 <setup+0x214>)
   b50ce:	480f      	ldr	r0, [pc, #60]	; (b510c <setup+0x200>)
   b50d0:	f7ff f852 	bl	b4178 <_ZNK5spark6Logger4infoEPKcz>
   b50d4:	e7f2      	b.n	b50bc <setup+0x1b0>
   b50d6:	bf00      	nop
   b50d8:	2003e608 	.word	0x2003e608
   b50dc:	2003e040 	.word	0x2003e040
   b50e0:	000ba4d2 	.word	0x000ba4d2
   b50e4:	000ba4f3 	.word	0x000ba4f3
   b50e8:	2003e060 	.word	0x2003e060
   b50ec:	000ba4f8 	.word	0x000ba4f8
   b50f0:	000ba630 	.word	0x000ba630
   b50f4:	02faf080 	.word	0x02faf080
   b50f8:	2003e6b8 	.word	0x2003e6b8
   b50fc:	2003e638 	.word	0x2003e638
   b5100:	000ba4fd 	.word	0x000ba4fd
   b5104:	000ba504 	.word	0x000ba504
   b5108:	000ba509 	.word	0x000ba509
   b510c:	2003e6e0 	.word	0x2003e6e0
   b5110:	000ba523 	.word	0x000ba523
   b5114:	000ba528 	.word	0x000ba528
   b5118:	000b42ad 	.word	0x000b42ad
   b511c:	000ba54e 	.word	0x000ba54e
   b5120:	000ba52d 	.word	0x000ba52d

000b5124 <_GLOBAL__sub_I_Blynk>:
   b5124:	b530      	push	{r4, r5, lr}
        : domain(NULL), port(0)
   b5126:	4c4d      	ldr	r4, [pc, #308]	; (b525c <_GLOBAL__sub_I_Blynk+0x138>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5128:	4d4d      	ldr	r5, [pc, #308]	; (b5260 <_GLOBAL__sub_I_Blynk+0x13c>)
SYSTEM_THREAD(ENABLED);
   b512a:	2100      	movs	r1, #0
   b512c:	b085      	sub	sp, #20
SYSTEM_THREAD(ENABLED);
   b512e:	2001      	movs	r0, #1
   b5130:	f002 fe86 	bl	b7e40 <system_thread_set_state>
   b5134:	4620      	mov	r0, r4
   b5136:	f004 f853 	bl	b91e0 <_ZN9TCPClientC1Ev>
   b513a:	f104 001c 	add.w	r0, r4, #28
   b513e:	f003 fbb3 	bl	b88a8 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5142:	4a48      	ldr	r2, [pc, #288]	; (b5264 <_GLOBAL__sub_I_Blynk+0x140>)
   b5144:	2300      	movs	r3, #0
   b5146:	e9c2 4300 	strd	r4, r3, [r2]
   b514a:	6363      	str	r3, [r4, #52]	; 0x34
   b514c:	8723      	strh	r3, [r4, #56]	; 0x38
  SdFat() {
   b514e:	4c46      	ldr	r4, [pc, #280]	; (b5268 <_GLOBAL__sub_I_Blynk+0x144>)
   b5150:	6193      	str	r3, [r2, #24]
   b5152:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b5156:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b515a:	8393      	strh	r3, [r2, #28]
   b515c:	2264      	movs	r2, #100	; 0x64
   b515e:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b5162:	4a42      	ldr	r2, [pc, #264]	; (b526c <_GLOBAL__sub_I_Blynk+0x148>)
   b5164:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b5168:	2201      	movs	r2, #1
   b516a:	6063      	str	r3, [r4, #4]
   b516c:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b5170:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b5174:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b5178:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b517c:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b5180:	7829      	ldrb	r1, [r5, #0]
   b5182:	f3bf 8f5b 	dmb	ish
   b5186:	4011      	ands	r1, r2
   b5188:	d10b      	bne.n	b51a2 <_GLOBAL__sub_I_Blynk+0x7e>
   b518a:	4628      	mov	r0, r5
   b518c:	9103      	str	r1, [sp, #12]
   b518e:	f7fe ff86 	bl	b409e <__cxa_guard_acquire>
   b5192:	9903      	ldr	r1, [sp, #12]
   b5194:	b128      	cbz	r0, b51a2 <_GLOBAL__sub_I_Blynk+0x7e>
   b5196:	4836      	ldr	r0, [pc, #216]	; (b5270 <_GLOBAL__sub_I_Blynk+0x14c>)
   b5198:	f002 ff62 	bl	b8060 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b519c:	4628      	mov	r0, r5
   b519e:	f7fe ff83 	bl	b40a8 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b51a2:	4b33      	ldr	r3, [pc, #204]	; (b5270 <_GLOBAL__sub_I_Blynk+0x14c>)
   b51a4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
LiquidCrystal lcd(0);
   b51a8:	2100      	movs	r1, #0
   b51aa:	4832      	ldr	r0, [pc, #200]	; (b5274 <_GLOBAL__sub_I_Blynk+0x150>)
   b51ac:	f002 fa12 	bl	b75d4 <_ZN13LiquidCrystalC1Eh>
   b51b0:	f002 fc9e 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
unsigned long timerOfMine = millis();
   b51b4:	4b30      	ldr	r3, [pc, #192]	; (b5278 <_GLOBAL__sub_I_Blynk+0x154>)
   b51b6:	6018      	str	r0, [r3, #0]
   b51b8:	f002 fc9a 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
unsigned long scrollTime = millis();
   b51bc:	4b2f      	ldr	r3, [pc, #188]	; (b527c <_GLOBAL__sub_I_Blynk+0x158>)
   b51be:	6018      	str	r0, [r3, #0]
   b51c0:	f002 fc96 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
unsigned long secondLineTime = millis();
   b51c4:	4b2e      	ldr	r3, [pc, #184]	; (b5280 <_GLOBAL__sub_I_Blynk+0x15c>)
String lineTwo = "Loading...";
   b51c6:	492f      	ldr	r1, [pc, #188]	; (b5284 <_GLOBAL__sub_I_Blynk+0x160>)
unsigned long secondLineTime = millis();
   b51c8:	6018      	str	r0, [r3, #0]
String lineTwo = "Loading...";
   b51ca:	482f      	ldr	r0, [pc, #188]	; (b5288 <_GLOBAL__sub_I_Blynk+0x164>)
   b51cc:	f003 f8b1 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
String files[7] = {"1.mp3", "2.mp3", "3.mp3", "4.mp3", "5.mp3", "6.mp3", "7.mp3"};
   b51d0:	492e      	ldr	r1, [pc, #184]	; (b528c <_GLOBAL__sub_I_Blynk+0x168>)
   b51d2:	482f      	ldr	r0, [pc, #188]	; (b5290 <_GLOBAL__sub_I_Blynk+0x16c>)
   b51d4:	f003 f8ad 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b51d8:	492e      	ldr	r1, [pc, #184]	; (b5294 <_GLOBAL__sub_I_Blynk+0x170>)
   b51da:	482f      	ldr	r0, [pc, #188]	; (b5298 <_GLOBAL__sub_I_Blynk+0x174>)
   b51dc:	f003 f8a9 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b51e0:	492e      	ldr	r1, [pc, #184]	; (b529c <_GLOBAL__sub_I_Blynk+0x178>)
   b51e2:	482f      	ldr	r0, [pc, #188]	; (b52a0 <_GLOBAL__sub_I_Blynk+0x17c>)
   b51e4:	f003 f8a5 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b51e8:	492e      	ldr	r1, [pc, #184]	; (b52a4 <_GLOBAL__sub_I_Blynk+0x180>)
   b51ea:	482f      	ldr	r0, [pc, #188]	; (b52a8 <_GLOBAL__sub_I_Blynk+0x184>)
   b51ec:	f003 f8a1 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b51f0:	492e      	ldr	r1, [pc, #184]	; (b52ac <_GLOBAL__sub_I_Blynk+0x188>)
   b51f2:	482f      	ldr	r0, [pc, #188]	; (b52b0 <_GLOBAL__sub_I_Blynk+0x18c>)
   b51f4:	f003 f89d 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b51f8:	492e      	ldr	r1, [pc, #184]	; (b52b4 <_GLOBAL__sub_I_Blynk+0x190>)
   b51fa:	482f      	ldr	r0, [pc, #188]	; (b52b8 <_GLOBAL__sub_I_Blynk+0x194>)
   b51fc:	f003 f899 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5200:	492e      	ldr	r1, [pc, #184]	; (b52bc <_GLOBAL__sub_I_Blynk+0x198>)
   b5202:	482f      	ldr	r0, [pc, #188]	; (b52c0 <_GLOBAL__sub_I_Blynk+0x19c>)
   b5204:	f003 f895 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
String fileNames[7] = {"Hard Rock Backing Track", "Piano Backing Track", "Acoustic Backing Track", "Funk Backing Track", "R n B Backing Track", "Soft Rock Backing Track", "Orchestral Backing Track"};
   b5208:	492e      	ldr	r1, [pc, #184]	; (b52c4 <_GLOBAL__sub_I_Blynk+0x1a0>)
   b520a:	482f      	ldr	r0, [pc, #188]	; (b52c8 <_GLOBAL__sub_I_Blynk+0x1a4>)
   b520c:	f003 f891 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5210:	492e      	ldr	r1, [pc, #184]	; (b52cc <_GLOBAL__sub_I_Blynk+0x1a8>)
   b5212:	482f      	ldr	r0, [pc, #188]	; (b52d0 <_GLOBAL__sub_I_Blynk+0x1ac>)
   b5214:	f003 f88d 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5218:	492e      	ldr	r1, [pc, #184]	; (b52d4 <_GLOBAL__sub_I_Blynk+0x1b0>)
   b521a:	482f      	ldr	r0, [pc, #188]	; (b52d8 <_GLOBAL__sub_I_Blynk+0x1b4>)
   b521c:	f003 f889 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5220:	492e      	ldr	r1, [pc, #184]	; (b52dc <_GLOBAL__sub_I_Blynk+0x1b8>)
   b5222:	482f      	ldr	r0, [pc, #188]	; (b52e0 <_GLOBAL__sub_I_Blynk+0x1bc>)
   b5224:	f003 f885 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5228:	492e      	ldr	r1, [pc, #184]	; (b52e4 <_GLOBAL__sub_I_Blynk+0x1c0>)
   b522a:	482f      	ldr	r0, [pc, #188]	; (b52e8 <_GLOBAL__sub_I_Blynk+0x1c4>)
   b522c:	f003 f881 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5230:	492e      	ldr	r1, [pc, #184]	; (b52ec <_GLOBAL__sub_I_Blynk+0x1c8>)
   b5232:	482f      	ldr	r0, [pc, #188]	; (b52f0 <_GLOBAL__sub_I_Blynk+0x1cc>)
   b5234:	f003 f87d 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
   b5238:	492e      	ldr	r1, [pc, #184]	; (b52f4 <_GLOBAL__sub_I_Blynk+0x1d0>)
   b523a:	482f      	ldr	r0, [pc, #188]	; (b52f8 <_GLOBAL__sub_I_Blynk+0x1d4>)
   b523c:	f003 f879 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
Adafruit_VS1053_FilePlayer musicPlayer(MP3_RESET, MP3_CS, MP3_DCS, DREQ, SD_CS);
   b5240:	2304      	movs	r3, #4
   b5242:	2202      	movs	r2, #2
   b5244:	e9cd 3200 	strd	r3, r2, [sp]
   b5248:	f04f 31ff 	mov.w	r1, #4294967295
   b524c:	2305      	movs	r3, #5
   b524e:	2203      	movs	r2, #3
   b5250:	482a      	ldr	r0, [pc, #168]	; (b52fc <_GLOBAL__sub_I_Blynk+0x1d8>)
   b5252:	f000 f8cb 	bl	b53ec <_ZN26Adafruit_VS1053_FilePlayerC1Eaaaaa>
   b5256:	b005      	add	sp, #20
   b5258:	bd30      	pop	{r4, r5, pc}
   b525a:	bf00      	nop
   b525c:	2003e4e4 	.word	0x2003e4e4
   b5260:	2003e02c 	.word	0x2003e02c
   b5264:	2003e040 	.word	0x2003e040
   b5268:	2003e060 	.word	0x2003e060
   b526c:	000ba630 	.word	0x000ba630
   b5270:	2003e030 	.word	0x2003e030
   b5274:	2003e608 	.word	0x2003e608
   b5278:	2003e6a4 	.word	0x2003e6a4
   b527c:	2003e698 	.word	0x2003e698
   b5280:	2003e69c 	.word	0x2003e69c
   b5284:	000ba556 	.word	0x000ba556
   b5288:	2003e628 	.word	0x2003e628
   b528c:	000ba561 	.word	0x000ba561
   b5290:	2003e598 	.word	0x2003e598
   b5294:	000ba567 	.word	0x000ba567
   b5298:	2003e5a8 	.word	0x2003e5a8
   b529c:	000ba56d 	.word	0x000ba56d
   b52a0:	2003e5b8 	.word	0x2003e5b8
   b52a4:	000ba573 	.word	0x000ba573
   b52a8:	2003e5c8 	.word	0x2003e5c8
   b52ac:	000ba579 	.word	0x000ba579
   b52b0:	2003e5d8 	.word	0x2003e5d8
   b52b4:	000ba57f 	.word	0x000ba57f
   b52b8:	2003e5e8 	.word	0x2003e5e8
   b52bc:	000ba585 	.word	0x000ba585
   b52c0:	2003e5f8 	.word	0x2003e5f8
   b52c4:	000ba58b 	.word	0x000ba58b
   b52c8:	2003e520 	.word	0x2003e520
   b52cc:	000ba5a3 	.word	0x000ba5a3
   b52d0:	2003e530 	.word	0x2003e530
   b52d4:	000ba5b7 	.word	0x000ba5b7
   b52d8:	2003e540 	.word	0x2003e540
   b52dc:	000ba5ce 	.word	0x000ba5ce
   b52e0:	2003e550 	.word	0x2003e550
   b52e4:	000ba5e1 	.word	0x000ba5e1
   b52e8:	2003e560 	.word	0x2003e560
   b52ec:	000ba5f5 	.word	0x000ba5f5
   b52f0:	2003e570 	.word	0x2003e570
   b52f4:	000ba60d 	.word	0x000ba60d
   b52f8:	2003e580 	.word	0x2003e580
   b52fc:	2003e638 	.word	0x2003e638

000b5300 <_ZN4File9availableEv>:
    return isFile() ? fileSize() - curPosition() : 0;
   b5300:	7c03      	ldrb	r3, [r0, #16]
   b5302:	f013 0308 	ands.w	r3, r3, #8
   b5306:	bf1e      	ittt	ne
   b5308:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b530a:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b530c:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b530e:	2b00      	cmp	r3, #0
  }
   b5310:	bfac      	ite	ge
   b5312:	4618      	movge	r0, r3
   b5314:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b5318:	4770      	bx	lr

000b531a <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b531a:	4770      	bx	lr

000b531c <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b531c:	3010      	adds	r0, #16
   b531e:	f001 ba47 	b.w	b67b0 <_ZN7FatFile4syncEv>

000b5322 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b5322:	3010      	adds	r0, #16
   b5324:	f001 b965 	b.w	b65f2 <_ZN7FatFile4peekEv>

000b5328 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b5328:	3010      	adds	r0, #16
   b532a:	f001 bacb 	b.w	b68c4 <_ZN7FatFile5writeEPKvj>

000b532e <_ZN4FileD0Ev>:
class File : public FatFile, public Stream {
   b532e:	b510      	push	{r4, lr}
   b5330:	2134      	movs	r1, #52	; 0x34
   b5332:	4604      	mov	r4, r0
   b5334:	f7fe feb1 	bl	b409a <_ZdlPvj>
   b5338:	4620      	mov	r0, r4
   b533a:	bd10      	pop	{r4, pc}

000b533c <nrf_gpio_pin_port_decode>:
{
   b533c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b533e:	6803      	ldr	r3, [r0, #0]
   b5340:	2b2f      	cmp	r3, #47	; 0x2f
{
   b5342:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5344:	d904      	bls.n	b5350 <nrf_gpio_pin_port_decode+0x14>
   b5346:	4a07      	ldr	r2, [pc, #28]	; (b5364 <nrf_gpio_pin_port_decode+0x28>)
   b5348:	2100      	movs	r1, #0
   b534a:	200a      	movs	r0, #10
   b534c:	f002 fd50 	bl	b7df0 <panic_>
    if (*p_pin < P0_PIN_NUM)
   b5350:	6823      	ldr	r3, [r4, #0]
   b5352:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5354:	bf83      	ittte	hi
   b5356:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b535a:	4803      	ldrhi	r0, [pc, #12]	; (b5368 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b535c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b535e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
}
   b5362:	bd10      	pop	{r4, pc}
   b5364:	000b7ad1 	.word	0x000b7ad1
   b5368:	50000300 	.word	0x50000300

000b536c <nrf_gpio_pin_set>:
{
   b536c:	b507      	push	{r0, r1, r2, lr}
   b536e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5370:	a801      	add	r0, sp, #4
   b5372:	f7ff ffe3 	bl	b533c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5376:	9a01      	ldr	r2, [sp, #4]
   b5378:	2301      	movs	r3, #1
   b537a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   b537c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   b5380:	b003      	add	sp, #12
   b5382:	f85d fb04 	ldr.w	pc, [sp], #4

000b5386 <nrf_gpio_pin_clear>:
{
   b5386:	b507      	push	{r0, r1, r2, lr}
   b5388:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b538a:	a801      	add	r0, sp, #4
   b538c:	f7ff ffd6 	bl	b533c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5390:	9a01      	ldr	r2, [sp, #4]
   b5392:	2301      	movs	r3, #1
   b5394:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   b5396:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   b539a:	b003      	add	sp, #12
   b539c:	f85d fb04 	ldr.w	pc, [sp], #4

000b53a0 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b53a0:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b53a2:	2201      	movs	r2, #1
   b53a4:	f88d 1007 	strb.w	r1, [sp, #7]
   b53a8:	3010      	adds	r0, #16
   b53aa:	f10d 0107 	add.w	r1, sp, #7
   b53ae:	f001 fa89 	bl	b68c4 <_ZN7FatFile5writeEPKvj>
  }
   b53b2:	b003      	add	sp, #12
   b53b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b53b8 <_ZN7FatFile4readEv>:
  int read() {
   b53b8:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b53ba:	2201      	movs	r2, #1
   b53bc:	f10d 0107 	add.w	r1, sp, #7
   b53c0:	f001 f869 	bl	b6496 <_ZN7FatFile4readEPvj>
   b53c4:	2801      	cmp	r0, #1
   b53c6:	bf0c      	ite	eq
   b53c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b53cc:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b53d0:	b003      	add	sp, #12
   b53d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b53d6 <_ZN4File4readEv>:
  int read() {
   b53d6:	b508      	push	{r3, lr}
    return FatFile::read();
   b53d8:	3010      	adds	r0, #16
   b53da:	f7ff ffed 	bl	b53b8 <_ZN7FatFile4readEv>
  }
   b53de:	bd08      	pop	{r3, pc}

000b53e0 <_ZN26Adafruit_VS1053_FilePlayer14setIsrCallbackEPFvvE>:
#define VS1053_DATA_SPI_SETTING     SPISettings(8000000, MSBFIRST, SPI_MODE0)

void (*Adafruit_VS1053_FilePlayer::isrCallback)(void) = NULL;

void Adafruit_VS1053_FilePlayer::setIsrCallback(void (*cb)(void)) {
  if (cb) Adafruit_VS1053_FilePlayer::isrCallback = cb;
   b53e0:	b109      	cbz	r1, b53e6 <_ZN26Adafruit_VS1053_FilePlayer14setIsrCallbackEPFvvE+0x6>
   b53e2:	4b01      	ldr	r3, [pc, #4]	; (b53e8 <_ZN26Adafruit_VS1053_FilePlayer14setIsrCallbackEPFvvE+0x8>)
   b53e4:	6019      	str	r1, [r3, #0]
}
   b53e6:	4770      	bx	lr
   b53e8:	2003e6ac 	.word	0x2003e6ac

000b53ec <_ZN26Adafruit_VS1053_FilePlayerC1Eaaaaa>:
    return true;
  }
  return false;
}

Adafruit_VS1053_FilePlayer::Adafruit_VS1053_FilePlayer(
   b53ec:	b530      	push	{r4, r5, lr}
  _miso = -1;
  _clk = -1;
  useHardwareSPI = true;
  _reset = rst;
  _cs = cs;
  _dcs = dcs;
   b53ee:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  _dreq = dreq;
   b53f2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
  _cs = cs;
   b53f6:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  _mosi = -1;
   b53fa:	25ff      	movs	r5, #255	; 0xff
  _dreq = dreq;
   b53fc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5404:	2300      	movs	r3, #0
  _mosi = -1;
   b5406:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
  _miso = -1;
   b540a:	f880 5023 	strb.w	r5, [r0, #35]	; 0x23
  _clk = -1;
   b540e:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
   b5412:	8703      	strh	r3, [r0, #56]	; 0x38
  useHardwareSPI = true;
   b5414:	2501      	movs	r5, #1
    Print() : write_error(0) {}
   b5416:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5418:	6302      	str	r2, [r0, #48]	; 0x30
  playingMusic = false;
   b541a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  File() {}
   b541e:	4a05      	ldr	r2, [pc, #20]	; (b5434 <_ZN26Adafruit_VS1053_FilePlayerC1Eaaaaa+0x48>)
  _cardCS = cardcs;
   b5420:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  useHardwareSPI = true;
   b5424:	f880 5020 	strb.w	r5, [r0, #32]
  _reset = rst;
   b5428:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
   b542c:	6282      	str	r2, [r0, #40]	; 0x28
  _cardCS = cardcs;
   b542e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
   b5432:	bd30      	pop	{r4, r5, pc}
   b5434:	000ba6a0 	.word	0x000ba6a0

000b5438 <_ZN15Adafruit_VS105312readyForDataEv>:

  plugin.close();
  return 0xFFFF;
}

boolean Adafruit_VS1053::readyForData(void) {
   b5438:	b508      	push	{r3, lr}
  return digitalRead(_dreq);
   b543a:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
   b543e:	f004 f835 	bl	b94ac <digitalRead>
}
   b5442:	3800      	subs	r0, #0
   b5444:	bf18      	it	ne
   b5446:	2001      	movne	r0, #1
   b5448:	bd08      	pop	{r3, pc}
	...

000b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b544c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b544e:	4c0b      	ldr	r4, [pc, #44]	; (b547c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5450:	7821      	ldrb	r1, [r4, #0]
   b5452:	f3bf 8f5b 	dmb	ish
   b5456:	f011 0101 	ands.w	r1, r1, #1
   b545a:	d10b      	bne.n	b5474 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b545c:	4620      	mov	r0, r4
   b545e:	9101      	str	r1, [sp, #4]
   b5460:	f7fe fe1d 	bl	b409e <__cxa_guard_acquire>
   b5464:	9901      	ldr	r1, [sp, #4]
   b5466:	b128      	cbz	r0, b5474 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5468:	4805      	ldr	r0, [pc, #20]	; (b5480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b546a:	f002 fdf9 	bl	b8060 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b546e:	4620      	mov	r0, r4
   b5470:	f7fe fe1a 	bl	b40a8 <__cxa_guard_release>
        return instance;
    }
   b5474:	4802      	ldr	r0, [pc, #8]	; (b5480 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5476:	b002      	add	sp, #8
   b5478:	bd10      	pop	{r4, pc}
   b547a:	bf00      	nop
   b547c:	2003e02c 	.word	0x2003e02c
   b5480:	2003e030 	.word	0x2003e030

000b5484 <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh>:
  myself = this;  // oy vey
   b5484:	4b0c      	ldr	r3, [pc, #48]	; (b54b8 <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh+0x34>)
  if (type == VS1053_FILEPLAYER_PIN_INT) {
   b5486:	2905      	cmp	r1, #5
boolean Adafruit_VS1053_FilePlayer::useInterrupt(uint8_t type) {
   b5488:	b513      	push	{r0, r1, r4, lr}
  myself = this;  // oy vey
   b548a:	6018      	str	r0, [r3, #0]
  if (type == VS1053_FILEPLAYER_PIN_INT) {
   b548c:	d111      	bne.n	b54b2 <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh+0x2e>
    int8_t irq = digitalPinToInterrupt(_dreq);
   b548e:	f990 4021 	ldrsb.w	r4, [r0, #33]	; 0x21
    if (irq == -1) 
   b5492:	1c63      	adds	r3, r4, #1
   b5494:	d00d      	beq.n	b54b2 <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh+0x2e>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
    }
    static void usingInterrupt(uint8_t arg) {
        instance().usingInterrupt(arg);
   b5496:	f7ff ffd9 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    attachInterrupt(irq, feeder, RISING);
   b549a:	2300      	movs	r3, #0
   b549c:	9300      	str	r3, [sp, #0]
   b549e:	4907      	ldr	r1, [pc, #28]	; (b54bc <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh+0x38>)
   b54a0:	f04f 33ff 	mov.w	r3, #4294967295
   b54a4:	2201      	movs	r2, #1
   b54a6:	b2a0      	uxth	r0, r4
   b54a8:	f003 fae4 	bl	b8a74 <_Z15attachInterrupttPFvvE13InterruptModeah>
    return true;
   b54ac:	2001      	movs	r0, #1
}
   b54ae:	b002      	add	sp, #8
   b54b0:	bd10      	pop	{r4, pc}
  return false;
   b54b2:	2000      	movs	r0, #0
   b54b4:	e7fb      	b.n	b54ae <_ZN26Adafruit_VS1053_FilePlayer12useInterruptEh+0x2a>
   b54b6:	bf00      	nop
   b54b8:	2003e6a8 	.word	0x2003e6a8
   b54bc:	000b5c9d 	.word	0x000b5c9d

000b54c0 <_ZN15Adafruit_VS10538spiwriteEPht>:
  spiwrite(&x, 1);
}


void Adafruit_VS1053::spiwrite(uint8_t *c, uint16_t num)
{
   b54c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // MSB first, clock low when inactive (CPOL 0), data valid on leading edge (CPHA 0)
  // Make sure clock starts low

  if (useHardwareSPI) {
   b54c4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
   b54c8:	4680      	mov	r8, r0
   b54ca:	460f      	mov	r7, r1
   b54cc:	4691      	mov	r9, r2
  if (useHardwareSPI) {
   b54ce:	2b00      	cmp	r3, #0
   b54d0:	f040 80d5 	bne.w	b567e <_ZN15Adafruit_VS10538spiwriteEPht+0x1be>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b54d4:	4c85      	ldr	r4, [pc, #532]	; (b56ec <_ZN15Adafruit_VS10538spiwriteEPht+0x22c>)
   b54d6:	4d86      	ldr	r5, [pc, #536]	; (b56f0 <_ZN15Adafruit_VS10538spiwriteEPht+0x230>)
   b54d8:	4489      	add	r9, r1
      c++;
    }
#endif
  } 
  else {
    while (num--) {
   b54da:	454f      	cmp	r7, r9
   b54dc:	f000 80d7 	beq.w	b568e <_ZN15Adafruit_VS10538spiwriteEPht+0x1ce>
   b54e0:	f04f 0a07 	mov.w	sl, #7
      for (int8_t i=7; i>=0; i--) {
#if defined(PARTICLE)
        pinResetFast(_clk);
   b54e4:	f998 6024 	ldrsb.w	r6, [r8, #36]	; 0x24
   b54e8:	7823      	ldrb	r3, [r4, #0]
   b54ea:	f3bf 8f5b 	dmb	ish
   b54ee:	07da      	lsls	r2, r3, #31
   b54f0:	b2b6      	uxth	r6, r6
   b54f2:	d409      	bmi.n	b5508 <_ZN15Adafruit_VS10538spiwriteEPht+0x48>
   b54f4:	4620      	mov	r0, r4
   b54f6:	f7fe fdd2 	bl	b409e <__cxa_guard_acquire>
   b54fa:	b128      	cbz	r0, b5508 <_ZN15Adafruit_VS10538spiwriteEPht+0x48>
   b54fc:	f002 fa70 	bl	b79e0 <HAL_Pin_Map>
   b5500:	6028      	str	r0, [r5, #0]
   b5502:	4620      	mov	r0, r4
   b5504:	f7fe fdd0 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5508:	682b      	ldr	r3, [r5, #0]
   b550a:	0136      	lsls	r6, r6, #4
   b550c:	f813 b006 	ldrb.w	fp, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5510:	7823      	ldrb	r3, [r4, #0]
   b5512:	f3bf 8f5b 	dmb	ish
   b5516:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5518:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b551c:	d409      	bmi.n	b5532 <_ZN15Adafruit_VS10538spiwriteEPht+0x72>
   b551e:	4620      	mov	r0, r4
   b5520:	f7fe fdbd 	bl	b409e <__cxa_guard_acquire>
   b5524:	b128      	cbz	r0, b5532 <_ZN15Adafruit_VS10538spiwriteEPht+0x72>
   b5526:	f002 fa5b 	bl	b79e0 <HAL_Pin_Map>
   b552a:	6028      	str	r0, [r5, #0]
   b552c:	4620      	mov	r0, r4
   b552e:	f7fe fdbb 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5532:	682b      	ldr	r3, [r5, #0]
   b5534:	4433      	add	r3, r6
   b5536:	7858      	ldrb	r0, [r3, #1]
   b5538:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_clear(nrf_pin);
   b553c:	ea40 000b 	orr.w	r0, r0, fp
   b5540:	f7ff ff21 	bl	b5386 <nrf_gpio_pin_clear>
        if (c[0] & (1<<i))
   b5544:	783b      	ldrb	r3, [r7, #0]
   b5546:	f998 6022 	ldrsb.w	r6, [r8, #34]	; 0x22
   b554a:	fa43 f30a 	asr.w	r3, r3, sl
   b554e:	f013 0f01 	tst.w	r3, #1
          pinSetFast(_mosi);
   b5552:	b2b6      	uxth	r6, r6
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5554:	7823      	ldrb	r3, [r4, #0]
   b5556:	f3bf 8f5b 	dmb	ish
        if (c[0] & (1<<i))
   b555a:	f000 809b 	beq.w	b5694 <_ZN15Adafruit_VS10538spiwriteEPht+0x1d4>
   b555e:	07d8      	lsls	r0, r3, #31
   b5560:	d409      	bmi.n	b5576 <_ZN15Adafruit_VS10538spiwriteEPht+0xb6>
   b5562:	4620      	mov	r0, r4
   b5564:	f7fe fd9b 	bl	b409e <__cxa_guard_acquire>
   b5568:	b128      	cbz	r0, b5576 <_ZN15Adafruit_VS10538spiwriteEPht+0xb6>
   b556a:	f002 fa39 	bl	b79e0 <HAL_Pin_Map>
   b556e:	6028      	str	r0, [r5, #0]
   b5570:	4620      	mov	r0, r4
   b5572:	f7fe fd99 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5576:	682b      	ldr	r3, [r5, #0]
   b5578:	0136      	lsls	r6, r6, #4
   b557a:	f813 b006 	ldrb.w	fp, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b557e:	7823      	ldrb	r3, [r4, #0]
   b5580:	f3bf 8f5b 	dmb	ish
   b5584:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5586:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b558a:	d409      	bmi.n	b55a0 <_ZN15Adafruit_VS10538spiwriteEPht+0xe0>
   b558c:	4620      	mov	r0, r4
   b558e:	f7fe fd86 	bl	b409e <__cxa_guard_acquire>
   b5592:	b128      	cbz	r0, b55a0 <_ZN15Adafruit_VS10538spiwriteEPht+0xe0>
   b5594:	f002 fa24 	bl	b79e0 <HAL_Pin_Map>
   b5598:	6028      	str	r0, [r5, #0]
   b559a:	4620      	mov	r0, r4
   b559c:	f7fe fd84 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b55a0:	682b      	ldr	r3, [r5, #0]
   b55a2:	441e      	add	r6, r3
   b55a4:	7870      	ldrb	r0, [r6, #1]
   b55a6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b55aa:	ea40 000b 	orr.w	r0, r0, fp
   b55ae:	f7ff fedd 	bl	b536c <nrf_gpio_pin_set>
        else
          pinResetFast(_mosi);
        pinSetFast(_clk);
   b55b2:	f998 6024 	ldrsb.w	r6, [r8, #36]	; 0x24
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b55b6:	7823      	ldrb	r3, [r4, #0]
   b55b8:	f3bf 8f5b 	dmb	ish
   b55bc:	07d8      	lsls	r0, r3, #31
   b55be:	b2b6      	uxth	r6, r6
   b55c0:	d409      	bmi.n	b55d6 <_ZN15Adafruit_VS10538spiwriteEPht+0x116>
   b55c2:	4620      	mov	r0, r4
   b55c4:	f7fe fd6b 	bl	b409e <__cxa_guard_acquire>
   b55c8:	b128      	cbz	r0, b55d6 <_ZN15Adafruit_VS10538spiwriteEPht+0x116>
   b55ca:	f002 fa09 	bl	b79e0 <HAL_Pin_Map>
   b55ce:	6028      	str	r0, [r5, #0]
   b55d0:	4620      	mov	r0, r4
   b55d2:	f7fe fd69 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b55d6:	682b      	ldr	r3, [r5, #0]
   b55d8:	0136      	lsls	r6, r6, #4
   b55da:	f813 b006 	ldrb.w	fp, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b55de:	7823      	ldrb	r3, [r4, #0]
   b55e0:	f3bf 8f5b 	dmb	ish
   b55e4:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b55e6:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b55ea:	d409      	bmi.n	b5600 <_ZN15Adafruit_VS10538spiwriteEPht+0x140>
   b55ec:	4620      	mov	r0, r4
   b55ee:	f7fe fd56 	bl	b409e <__cxa_guard_acquire>
   b55f2:	b128      	cbz	r0, b5600 <_ZN15Adafruit_VS10538spiwriteEPht+0x140>
   b55f4:	f002 f9f4 	bl	b79e0 <HAL_Pin_Map>
   b55f8:	6028      	str	r0, [r5, #0]
   b55fa:	4620      	mov	r0, r4
   b55fc:	f7fe fd54 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5600:	682b      	ldr	r3, [r5, #0]
   b5602:	4433      	add	r3, r6
   b5604:	7858      	ldrb	r0, [r3, #1]
   b5606:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b560a:	ea40 000b 	orr.w	r0, r0, fp
   b560e:	f7ff fead 	bl	b536c <nrf_gpio_pin_set>
      for (int8_t i=7; i>=0; i--) {
   b5612:	f1ba 0a01 	subs.w	sl, sl, #1
   b5616:	f4bf af65 	bcs.w	b54e4 <_ZN15Adafruit_VS10538spiwriteEPht+0x24>
      }
      pinResetFast(_clk);
   b561a:	f998 6024 	ldrsb.w	r6, [r8, #36]	; 0x24
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b561e:	7823      	ldrb	r3, [r4, #0]
   b5620:	f3bf 8f5b 	dmb	ish
   b5624:	07da      	lsls	r2, r3, #31
   b5626:	b2b6      	uxth	r6, r6
   b5628:	d409      	bmi.n	b563e <_ZN15Adafruit_VS10538spiwriteEPht+0x17e>
   b562a:	4620      	mov	r0, r4
   b562c:	f7fe fd37 	bl	b409e <__cxa_guard_acquire>
   b5630:	b128      	cbz	r0, b563e <_ZN15Adafruit_VS10538spiwriteEPht+0x17e>
   b5632:	f002 f9d5 	bl	b79e0 <HAL_Pin_Map>
   b5636:	6028      	str	r0, [r5, #0]
   b5638:	4620      	mov	r0, r4
   b563a:	f7fe fd35 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b563e:	682b      	ldr	r3, [r5, #0]
   b5640:	0136      	lsls	r6, r6, #4
   b5642:	f813 a006 	ldrb.w	sl, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5646:	7823      	ldrb	r3, [r4, #0]
   b5648:	f3bf 8f5b 	dmb	ish
   b564c:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b564e:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5652:	d409      	bmi.n	b5668 <_ZN15Adafruit_VS10538spiwriteEPht+0x1a8>
   b5654:	4620      	mov	r0, r4
   b5656:	f7fe fd22 	bl	b409e <__cxa_guard_acquire>
   b565a:	b128      	cbz	r0, b5668 <_ZN15Adafruit_VS10538spiwriteEPht+0x1a8>
   b565c:	f002 f9c0 	bl	b79e0 <HAL_Pin_Map>
   b5660:	6028      	str	r0, [r5, #0]
   b5662:	4620      	mov	r0, r4
   b5664:	f7fe fd20 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5668:	682b      	ldr	r3, [r5, #0]
   b566a:	4433      	add	r3, r6
          *mosiportreg &= ~mosipin;
	      *clkportreg |= clkpin;
      }
      *clkportreg &= ~clkpin;   // Make sure clock ends low
#endif
      c++;
   b566c:	3701      	adds	r7, #1
   b566e:	7858      	ldrb	r0, [r3, #1]
   b5670:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_clear(nrf_pin);
   b5674:	ea40 000a 	orr.w	r0, r0, sl
   b5678:	f7ff fe85 	bl	b5386 <nrf_gpio_pin_clear>
    while (num--) {
   b567c:	e72d      	b.n	b54da <_ZN15Adafruit_VS10538spiwriteEPht+0x1a>
    }
    byte transfer(byte data) {
        return instance().transfer(data);
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
   b567e:	f7ff fee5 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5682:	2200      	movs	r2, #0
   b5684:	9200      	str	r2, [sp, #0]
   b5686:	464b      	mov	r3, r9
   b5688:	4639      	mov	r1, r7
   b568a:	f002 fd95 	bl	b81b8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
    }
  }
}
   b568e:	b003      	add	sp, #12
   b5690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5694:	07da      	lsls	r2, r3, #31
   b5696:	d409      	bmi.n	b56ac <_ZN15Adafruit_VS10538spiwriteEPht+0x1ec>
   b5698:	4620      	mov	r0, r4
   b569a:	f7fe fd00 	bl	b409e <__cxa_guard_acquire>
   b569e:	b128      	cbz	r0, b56ac <_ZN15Adafruit_VS10538spiwriteEPht+0x1ec>
   b56a0:	f002 f99e 	bl	b79e0 <HAL_Pin_Map>
   b56a4:	6028      	str	r0, [r5, #0]
   b56a6:	4620      	mov	r0, r4
   b56a8:	f7fe fcfe 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b56ac:	682b      	ldr	r3, [r5, #0]
   b56ae:	0136      	lsls	r6, r6, #4
   b56b0:	f813 b006 	ldrb.w	fp, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b56b4:	7823      	ldrb	r3, [r4, #0]
   b56b6:	f3bf 8f5b 	dmb	ish
   b56ba:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b56bc:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b56c0:	d409      	bmi.n	b56d6 <_ZN15Adafruit_VS10538spiwriteEPht+0x216>
   b56c2:	4620      	mov	r0, r4
   b56c4:	f7fe fceb 	bl	b409e <__cxa_guard_acquire>
   b56c8:	b128      	cbz	r0, b56d6 <_ZN15Adafruit_VS10538spiwriteEPht+0x216>
   b56ca:	f002 f989 	bl	b79e0 <HAL_Pin_Map>
   b56ce:	6028      	str	r0, [r5, #0]
   b56d0:	4620      	mov	r0, r4
   b56d2:	f7fe fce9 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b56d6:	682b      	ldr	r3, [r5, #0]
   b56d8:	4433      	add	r3, r6
   b56da:	7858      	ldrb	r0, [r3, #1]
   b56dc:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_clear(nrf_pin);
   b56e0:	ea40 000b 	orr.w	r0, r0, fp
   b56e4:	f7ff fe4f 	bl	b5386 <nrf_gpio_pin_clear>
}
   b56e8:	e763      	b.n	b55b2 <_ZN15Adafruit_VS10538spiwriteEPht+0xf2>
   b56ea:	bf00      	nop
   b56ec:	2003e038 	.word	0x2003e038
   b56f0:	2003e03c 	.word	0x2003e03c

000b56f4 <_ZN15Adafruit_VS10538spiwriteEh>:
{
   b56f4:	b500      	push	{lr}
   b56f6:	b089      	sub	sp, #36	; 0x24
   b56f8:	f10d 031f 	add.w	r3, sp, #31
   b56fc:	f023 031f 	bic.w	r3, r3, #31
  spiwrite(&x, 1);
   b5700:	2201      	movs	r2, #1
  uint8_t x __attribute__ ((aligned (32))) = c;
   b5702:	7019      	strb	r1, [r3, #0]
  spiwrite(&x, 1);
   b5704:	4619      	mov	r1, r3
   b5706:	f7ff fedb 	bl	b54c0 <_ZN15Adafruit_VS10538spiwriteEPht>
}
   b570a:	b009      	add	sp, #36	; 0x24
   b570c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5710 <_ZN15Adafruit_VS10537spireadEv>:
{
   b5710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (useHardwareSPI) {
   b5714:	f890 7020 	ldrb.w	r7, [r0, #32]
{
   b5718:	4606      	mov	r6, r0
  if (useHardwareSPI) {
   b571a:	b13f      	cbz	r7, b572c <_ZN15Adafruit_VS10537spireadEv+0x1c>
        return instance().transfer(data);
   b571c:	f7ff fe96 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5720:	2100      	movs	r1, #0
}
   b5722:	b003      	add	sp, #12
   b5724:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5728:	f002 bd40 	b.w	b81ac <_ZN8SPIClass8transferEh>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b572c:	4c74      	ldr	r4, [pc, #464]	; (b5900 <_ZN15Adafruit_VS10537spireadEv+0x1f0>)
   b572e:	4d75      	ldr	r5, [pc, #468]	; (b5904 <_ZN15Adafruit_VS10537spireadEv+0x1f4>)
   b5730:	f04f 0907 	mov.w	r9, #7
      if (pinReadFast(_miso))
   b5734:	f996 b023 	ldrsb.w	fp, [r6, #35]	; 0x23
   b5738:	7823      	ldrb	r3, [r4, #0]
   b573a:	f3bf 8f5b 	dmb	ish
   b573e:	07db      	lsls	r3, r3, #31
   b5740:	fa1f fb8b 	uxth.w	fp, fp
   b5744:	d409      	bmi.n	b575a <_ZN15Adafruit_VS10537spireadEv+0x4a>
   b5746:	4620      	mov	r0, r4
   b5748:	f7fe fca9 	bl	b409e <__cxa_guard_acquire>
   b574c:	b128      	cbz	r0, b575a <_ZN15Adafruit_VS10537spireadEv+0x4a>
   b574e:	f002 f947 	bl	b79e0 <HAL_Pin_Map>
   b5752:	6028      	str	r0, [r5, #0]
   b5754:	4620      	mov	r0, r4
   b5756:	f7fe fca7 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b575a:	682b      	ldr	r3, [r5, #0]
   b575c:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   b5760:	f813 800b 	ldrb.w	r8, [r3, fp]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5764:	7823      	ldrb	r3, [r4, #0]
   b5766:	f3bf 8f5b 	dmb	ish
   b576a:	07d8      	lsls	r0, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b576c:	ea4f 1a48 	mov.w	sl, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5770:	d409      	bmi.n	b5786 <_ZN15Adafruit_VS10537spireadEv+0x76>
   b5772:	4620      	mov	r0, r4
   b5774:	f7fe fc93 	bl	b409e <__cxa_guard_acquire>
   b5778:	b128      	cbz	r0, b5786 <_ZN15Adafruit_VS10537spireadEv+0x76>
   b577a:	f002 f931 	bl	b79e0 <HAL_Pin_Map>
   b577e:	6028      	str	r0, [r5, #0]
   b5780:	4620      	mov	r0, r4
   b5782:	f7fe fc91 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5786:	682b      	ldr	r3, [r5, #0]
   b5788:	445b      	add	r3, fp
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b578a:	a801      	add	r0, sp, #4
   b578c:	f893 8001 	ldrb.w	r8, [r3, #1]
   b5790:	f008 081f 	and.w	r8, r8, #31
   b5794:	ea48 080a 	orr.w	r8, r8, sl
    (void)nrf_gpio_pin_read(nrf_pin);
   b5798:	f8cd 8004 	str.w	r8, [sp, #4]
   b579c:	f7ff fdce 	bl	b533c <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   b57a0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   b57a4:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b57a8:	a801      	add	r0, sp, #4
   b57aa:	f7ff fdc7 	bl	b533c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b57ae:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   b57b0:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      pinSetFast(_clk);
   b57b4:	f996 8024 	ldrsb.w	r8, [r6, #36]	; 0x24
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   b57b8:	40d3      	lsrs	r3, r2
      if (pinReadFast(_miso))
   b57ba:	07d9      	lsls	r1, r3, #31
        x |= (1<<i);
   b57bc:	bf42      	ittt	mi
   b57be:	2301      	movmi	r3, #1
   b57c0:	fa03 f309 	lslmi.w	r3, r3, r9
   b57c4:	431f      	orrmi	r7, r3
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b57c6:	7823      	ldrb	r3, [r4, #0]
   b57c8:	f3bf 8f5b 	dmb	ish
   b57cc:	bf48      	it	mi
   b57ce:	b27f      	sxtbmi	r7, r7
   b57d0:	07da      	lsls	r2, r3, #31
      pinSetFast(_clk);
   b57d2:	fa1f f888 	uxth.w	r8, r8
   b57d6:	d409      	bmi.n	b57ec <_ZN15Adafruit_VS10537spireadEv+0xdc>
   b57d8:	4620      	mov	r0, r4
   b57da:	f7fe fc60 	bl	b409e <__cxa_guard_acquire>
   b57de:	b128      	cbz	r0, b57ec <_ZN15Adafruit_VS10537spireadEv+0xdc>
   b57e0:	f002 f8fe 	bl	b79e0 <HAL_Pin_Map>
   b57e4:	6028      	str	r0, [r5, #0]
   b57e6:	4620      	mov	r0, r4
   b57e8:	f7fe fc5e 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b57ec:	682b      	ldr	r3, [r5, #0]
   b57ee:	ea4f 1808 	mov.w	r8, r8, lsl #4
   b57f2:	f813 a008 	ldrb.w	sl, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b57f6:	7823      	ldrb	r3, [r4, #0]
   b57f8:	f3bf 8f5b 	dmb	ish
   b57fc:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b57fe:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5802:	d409      	bmi.n	b5818 <_ZN15Adafruit_VS10537spireadEv+0x108>
   b5804:	4620      	mov	r0, r4
   b5806:	f7fe fc4a 	bl	b409e <__cxa_guard_acquire>
   b580a:	b128      	cbz	r0, b5818 <_ZN15Adafruit_VS10537spireadEv+0x108>
   b580c:	f002 f8e8 	bl	b79e0 <HAL_Pin_Map>
   b5810:	6028      	str	r0, [r5, #0]
   b5812:	4620      	mov	r0, r4
   b5814:	f7fe fc48 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5818:	682b      	ldr	r3, [r5, #0]
   b581a:	4443      	add	r3, r8
   b581c:	7858      	ldrb	r0, [r3, #1]
   b581e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   b5822:	ea40 000a 	orr.w	r0, r0, sl
   b5826:	f7ff fda1 	bl	b536c <nrf_gpio_pin_set>
      pinResetFast(_clk);
   b582a:	f996 8024 	ldrsb.w	r8, [r6, #36]	; 0x24
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b582e:	7823      	ldrb	r3, [r4, #0]
   b5830:	f3bf 8f5b 	dmb	ish
   b5834:	07d8      	lsls	r0, r3, #31
   b5836:	fa1f f888 	uxth.w	r8, r8
   b583a:	d409      	bmi.n	b5850 <_ZN15Adafruit_VS10537spireadEv+0x140>
   b583c:	4620      	mov	r0, r4
   b583e:	f7fe fc2e 	bl	b409e <__cxa_guard_acquire>
   b5842:	b128      	cbz	r0, b5850 <_ZN15Adafruit_VS10537spireadEv+0x140>
   b5844:	f002 f8cc 	bl	b79e0 <HAL_Pin_Map>
   b5848:	6028      	str	r0, [r5, #0]
   b584a:	4620      	mov	r0, r4
   b584c:	f7fe fc2c 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5850:	682b      	ldr	r3, [r5, #0]
   b5852:	ea4f 1808 	mov.w	r8, r8, lsl #4
   b5856:	f813 a008 	ldrb.w	sl, [r3, r8]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b585a:	7823      	ldrb	r3, [r4, #0]
   b585c:	f3bf 8f5b 	dmb	ish
   b5860:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5862:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5866:	d409      	bmi.n	b587c <_ZN15Adafruit_VS10537spireadEv+0x16c>
   b5868:	4620      	mov	r0, r4
   b586a:	f7fe fc18 	bl	b409e <__cxa_guard_acquire>
   b586e:	b128      	cbz	r0, b587c <_ZN15Adafruit_VS10537spireadEv+0x16c>
   b5870:	f002 f8b6 	bl	b79e0 <HAL_Pin_Map>
   b5874:	6028      	str	r0, [r5, #0]
   b5876:	4620      	mov	r0, r4
   b5878:	f7fe fc16 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b587c:	682b      	ldr	r3, [r5, #0]
   b587e:	4443      	add	r3, r8
   b5880:	7858      	ldrb	r0, [r3, #1]
   b5882:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_clear(nrf_pin);
   b5886:	ea40 000a 	orr.w	r0, r0, sl
   b588a:	f7ff fd7c 	bl	b5386 <nrf_gpio_pin_clear>
    for (i=7; i>=0; i--) {
   b588e:	f1b9 0901 	subs.w	r9, r9, #1
   b5892:	f4bf af4f 	bcs.w	b5734 <_ZN15Adafruit_VS10537spireadEv+0x24>
    pinResetFast(_clk);
   b5896:	f996 6024 	ldrsb.w	r6, [r6, #36]	; 0x24
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b589a:	7823      	ldrb	r3, [r4, #0]
   b589c:	f3bf 8f5b 	dmb	ish
   b58a0:	07da      	lsls	r2, r3, #31
   b58a2:	b2b6      	uxth	r6, r6
   b58a4:	d409      	bmi.n	b58ba <_ZN15Adafruit_VS10537spireadEv+0x1aa>
   b58a6:	4816      	ldr	r0, [pc, #88]	; (b5900 <_ZN15Adafruit_VS10537spireadEv+0x1f0>)
   b58a8:	f7fe fbf9 	bl	b409e <__cxa_guard_acquire>
   b58ac:	b128      	cbz	r0, b58ba <_ZN15Adafruit_VS10537spireadEv+0x1aa>
   b58ae:	f002 f897 	bl	b79e0 <HAL_Pin_Map>
   b58b2:	6028      	str	r0, [r5, #0]
   b58b4:	4812      	ldr	r0, [pc, #72]	; (b5900 <_ZN15Adafruit_VS10537spireadEv+0x1f0>)
   b58b6:	f7fe fbf7 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b58ba:	682b      	ldr	r3, [r5, #0]
   b58bc:	0136      	lsls	r6, r6, #4
   b58be:	f813 8006 	ldrb.w	r8, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b58c2:	7823      	ldrb	r3, [r4, #0]
   b58c4:	f3bf 8f5b 	dmb	ish
   b58c8:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b58ca:	ea4f 1848 	mov.w	r8, r8, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b58ce:	d409      	bmi.n	b58e4 <_ZN15Adafruit_VS10537spireadEv+0x1d4>
   b58d0:	480b      	ldr	r0, [pc, #44]	; (b5900 <_ZN15Adafruit_VS10537spireadEv+0x1f0>)
   b58d2:	f7fe fbe4 	bl	b409e <__cxa_guard_acquire>
   b58d6:	b128      	cbz	r0, b58e4 <_ZN15Adafruit_VS10537spireadEv+0x1d4>
   b58d8:	f002 f882 	bl	b79e0 <HAL_Pin_Map>
   b58dc:	6028      	str	r0, [r5, #0]
   b58de:	4808      	ldr	r0, [pc, #32]	; (b5900 <_ZN15Adafruit_VS10537spireadEv+0x1f0>)
   b58e0:	f7fe fbe2 	bl	b40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b58e4:	682b      	ldr	r3, [r5, #0]
   b58e6:	441e      	add	r6, r3
   b58e8:	7870      	ldrb	r0, [r6, #1]
   b58ea:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_clear(nrf_pin);
   b58ee:	ea40 0008 	orr.w	r0, r0, r8
   b58f2:	f7ff fd48 	bl	b5386 <nrf_gpio_pin_clear>
}
   b58f6:	b2f8      	uxtb	r0, r7
   b58f8:	b003      	add	sp, #12
   b58fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b58fe:	bf00      	nop
   b5900:	2003e038 	.word	0x2003e038
   b5904:	2003e03c 	.word	0x2003e03c

000b5908 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   b5908:	b508      	push	{r3, lr}
        instance().endTransaction();
   b590a:	f7ff fd9f 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b590e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b5912:	f002 bbc3 	b.w	b809c <_ZN8SPIClass14endTransactionEv>

000b5916 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b5916:	b507      	push	{r0, r1, r2, lr}
   b5918:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b591a:	f7ff fd97 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b591e:	9901      	ldr	r1, [sp, #4]
    }
   b5920:	b003      	add	sp, #12
   b5922:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b5926:	f002 bbd3 	b.w	b80d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000b592c <_ZN15Adafruit_VS10538sciWriteEht>:
void Adafruit_VS1053::sciWrite(uint8_t addr, uint16_t data) {
   b592c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (useHardwareSPI) SPI.beginTransaction(VS1053_CONTROL_SPI_SETTING);
   b592e:	f890 3020 	ldrb.w	r3, [r0, #32]
void Adafruit_VS1053::sciWrite(uint8_t addr, uint16_t data) {
   b5932:	4604      	mov	r4, r0
   b5934:	460e      	mov	r6, r1
   b5936:	4615      	mov	r5, r2
  if (useHardwareSPI) SPI.beginTransaction(VS1053_CONTROL_SPI_SETTING);
   b5938:	b163      	cbz	r3, b5954 <_ZN15Adafruit_VS10538sciWriteEht+0x28>
      dataMode_{dataMode}
   b593a:	4b19      	ldr	r3, [pc, #100]	; (b59a0 <_ZN15Adafruit_VS10538sciWriteEht+0x74>)
   b593c:	9300      	str	r3, [sp, #0]
   b593e:	2300      	movs	r3, #0
   b5940:	f88d 3004 	strb.w	r3, [sp, #4]
   b5944:	4b17      	ldr	r3, [pc, #92]	; (b59a4 <_ZN15Adafruit_VS10538sciWriteEht+0x78>)
   b5946:	9302      	str	r3, [sp, #8]
   b5948:	4668      	mov	r0, sp
   b594a:	2301      	movs	r3, #1
   b594c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5950:	f7ff ffe1 	bl	b5916 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
  digitalWrite(_cs, LOW);  
   b5954:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5958:	2100      	movs	r1, #0
   b595a:	b280      	uxth	r0, r0
   b595c:	f003 fd8d 	bl	b947a <digitalWrite>
  spiwrite(VS1053_SCI_WRITE);
   b5960:	2102      	movs	r1, #2
   b5962:	4620      	mov	r0, r4
   b5964:	f7ff fec6 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
  spiwrite(addr);
   b5968:	4631      	mov	r1, r6
   b596a:	4620      	mov	r0, r4
   b596c:	f7ff fec2 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
  spiwrite(data >> 8);
   b5970:	0a29      	lsrs	r1, r5, #8
   b5972:	4620      	mov	r0, r4
   b5974:	f7ff febe 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
  spiwrite(data & 0xFF);
   b5978:	b2e9      	uxtb	r1, r5
   b597a:	4620      	mov	r0, r4
   b597c:	f7ff feba 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
  digitalWrite(_cs, HIGH);
   b5980:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5984:	2101      	movs	r1, #1
   b5986:	b280      	uxth	r0, r0
   b5988:	f003 fd77 	bl	b947a <digitalWrite>
  if (useHardwareSPI) SPI.endTransaction();
   b598c:	f894 3020 	ldrb.w	r3, [r4, #32]
   b5990:	b123      	cbz	r3, b599c <_ZN15Adafruit_VS10538sciWriteEht+0x70>
}
   b5992:	b004      	add	sp, #16
   b5994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (useHardwareSPI) SPI.endTransaction();
   b5998:	f7ff bfb6 	b.w	b5908 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b599c:	b004      	add	sp, #16
   b599e:	bd70      	pop	{r4, r5, r6, pc}
   b59a0:	000ba630 	.word	0x000ba630
   b59a4:	0003d090 	.word	0x0003d090

000b59a8 <_ZN26Adafruit_VS1053_FilePlayer11stopPlayingEv>:
void Adafruit_VS1053_FilePlayer::stopPlaying(void) {
   b59a8:	b510      	push	{r4, lr}
  sciWrite(VS1053_REG_MODE, VS1053_MODE_SM_LINE1 | VS1053_MODE_SM_SDINEW | VS1053_MODE_SM_CANCEL);
   b59aa:	f644 0208 	movw	r2, #18440	; 0x4808
void Adafruit_VS1053_FilePlayer::stopPlaying(void) {
   b59ae:	4604      	mov	r4, r0
  sciWrite(VS1053_REG_MODE, VS1053_MODE_SM_LINE1 | VS1053_MODE_SM_SDINEW | VS1053_MODE_SM_CANCEL);
   b59b0:	2100      	movs	r1, #0
   b59b2:	f7ff ffbb 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  playingMusic = false;
   b59b6:	2300      	movs	r3, #0
   b59b8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  currentTrack.close();
   b59bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
   b59c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  currentTrack.close();
   b59c4:	f000 bf2a 	b.w	b681c <_ZN7FatFile5closeEv>

000b59c8 <_ZN15Adafruit_VS10539setVolumeEhh>:
void Adafruit_VS1053::setVolume(uint8_t left, uint8_t right) {
   b59c8:	b507      	push	{r0, r1, r2, lr}
  v |= right;
   b59ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
void Adafruit_VS1053::setVolume(uint8_t left, uint8_t right) {
   b59ce:	9001      	str	r0, [sp, #4]
  v |= right;
   b59d0:	9200      	str	r2, [sp, #0]
  noInterrupts(); //cli();
   b59d2:	f003 f879 	bl	b8ac8 <_Z12noInterruptsv>
  sciWrite(VS1053_REG_VOLUME, v);
   b59d6:	9a00      	ldr	r2, [sp, #0]
   b59d8:	9801      	ldr	r0, [sp, #4]
   b59da:	210b      	movs	r1, #11
   b59dc:	f7ff ffa6 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
}
   b59e0:	b003      	add	sp, #12
   b59e2:	f85d eb04 	ldr.w	lr, [sp], #4
  interrupts();  //sei();
   b59e6:	f003 b871 	b.w	b8acc <_Z10interruptsv>

000b59ea <_ZN15Adafruit_VS10539softResetEv>:
void Adafruit_VS1053::softReset(void) {
   b59ea:	b508      	push	{r3, lr}
  sciWrite(VS1053_REG_MODE, VS1053_MODE_SM_SDINEW | VS1053_MODE_SM_RESET);
   b59ec:	f640 0204 	movw	r2, #2052	; 0x804
   b59f0:	2100      	movs	r1, #0
   b59f2:	f7ff ff9b 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
}
   b59f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(100);
   b59fa:	2064      	movs	r0, #100	; 0x64
   b59fc:	f002 be5e 	b.w	b86bc <delay>

000b5a00 <_ZN15Adafruit_VS10535resetEv>:
void Adafruit_VS1053::reset() {
   b5a00:	b510      	push	{r4, lr}
   b5a02:	4604      	mov	r4, r0
  if (_reset >= 0) {
   b5a04:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
   b5a08:	2800      	cmp	r0, #0
   b5a0a:	db0c      	blt.n	b5a26 <_ZN15Adafruit_VS10535resetEv+0x26>
    digitalWrite(_reset, LOW);
   b5a0c:	2100      	movs	r1, #0
   b5a0e:	b280      	uxth	r0, r0
   b5a10:	f003 fd33 	bl	b947a <digitalWrite>
    delay(100);
   b5a14:	2064      	movs	r0, #100	; 0x64
   b5a16:	f002 fe51 	bl	b86bc <delay>
    digitalWrite(_reset, HIGH);
   b5a1a:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5a1e:	2101      	movs	r1, #1
   b5a20:	b280      	uxth	r0, r0
   b5a22:	f003 fd2a 	bl	b947a <digitalWrite>
  digitalWrite(_cs, HIGH);
   b5a26:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5a2a:	2101      	movs	r1, #1
   b5a2c:	b280      	uxth	r0, r0
   b5a2e:	f003 fd24 	bl	b947a <digitalWrite>
  digitalWrite(_dcs, HIGH);
   b5a32:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
   b5a36:	2101      	movs	r1, #1
   b5a38:	b280      	uxth	r0, r0
   b5a3a:	f003 fd1e 	bl	b947a <digitalWrite>
  delay(100);
   b5a3e:	2064      	movs	r0, #100	; 0x64
   b5a40:	f002 fe3c 	bl	b86bc <delay>
  softReset();
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff ffd0 	bl	b59ea <_ZN15Adafruit_VS10539softResetEv>
  delay(100);
   b5a4a:	2064      	movs	r0, #100	; 0x64
   b5a4c:	f002 fe36 	bl	b86bc <delay>
  sciWrite(VS1053_REG_CLOCKF, 0x6000);
   b5a50:	4620      	mov	r0, r4
   b5a52:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
   b5a56:	2103      	movs	r1, #3
   b5a58:	f7ff ff68 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  setVolume(40, 40);
   b5a5c:	2228      	movs	r2, #40	; 0x28
   b5a5e:	4620      	mov	r0, r4
   b5a60:	4611      	mov	r1, r2
}
   b5a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setVolume(40, 40);
   b5a66:	f7ff bfaf 	b.w	b59c8 <_ZN15Adafruit_VS10539setVolumeEhh>
	...

000b5a6c <_ZN15Adafruit_VS10537sciReadEh>:
uint16_t Adafruit_VS1053::sciRead(uint8_t addr) {
   b5a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (useHardwareSPI) SPI.beginTransaction(VS1053_CONTROL_SPI_SETTING);
   b5a6e:	f890 3020 	ldrb.w	r3, [r0, #32]
uint16_t Adafruit_VS1053::sciRead(uint8_t addr) {
   b5a72:	4604      	mov	r4, r0
   b5a74:	460d      	mov	r5, r1
  if (useHardwareSPI) SPI.beginTransaction(VS1053_CONTROL_SPI_SETTING);
   b5a76:	b163      	cbz	r3, b5a92 <_ZN15Adafruit_VS10537sciReadEh+0x26>
   b5a78:	4b1b      	ldr	r3, [pc, #108]	; (b5ae8 <_ZN15Adafruit_VS10537sciReadEh+0x7c>)
   b5a7a:	9300      	str	r3, [sp, #0]
   b5a7c:	2300      	movs	r3, #0
   b5a7e:	f88d 3004 	strb.w	r3, [sp, #4]
   b5a82:	4b1a      	ldr	r3, [pc, #104]	; (b5aec <_ZN15Adafruit_VS10537sciReadEh+0x80>)
   b5a84:	9302      	str	r3, [sp, #8]
   b5a86:	4668      	mov	r0, sp
   b5a88:	2301      	movs	r3, #1
   b5a8a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5a8e:	f7ff ff42 	bl	b5916 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
  digitalWrite(_cs, LOW);  
   b5a92:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5a96:	2100      	movs	r1, #0
   b5a98:	b280      	uxth	r0, r0
   b5a9a:	f003 fcee 	bl	b947a <digitalWrite>
  spiwrite(VS1053_SCI_READ);
   b5a9e:	2103      	movs	r1, #3
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	f7ff fe27 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
  spiwrite(addr);
   b5aa6:	4629      	mov	r1, r5
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	f7ff fe23 	bl	b56f4 <_ZN15Adafruit_VS10538spiwriteEh>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5aae:	200a      	movs	r0, #10
   b5ab0:	f002 f80e 	bl	b7ad0 <HAL_Delay_Microseconds>
  data = spiread();
   b5ab4:	4620      	mov	r0, r4
   b5ab6:	f7ff fe2b 	bl	b5710 <_ZN15Adafruit_VS10537spireadEv>
  data <<= 8;
   b5aba:	0200      	lsls	r0, r0, #8
   b5abc:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
  data |= spiread();
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	f7ff fe25 	bl	b5710 <_ZN15Adafruit_VS10537spireadEv>
   b5ac6:	4330      	orrs	r0, r6
   b5ac8:	b285      	uxth	r5, r0
  digitalWrite(_cs, HIGH);
   b5aca:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5ace:	2101      	movs	r1, #1
   b5ad0:	b280      	uxth	r0, r0
   b5ad2:	f003 fcd2 	bl	b947a <digitalWrite>
  if (useHardwareSPI) SPI.endTransaction();
   b5ad6:	f894 3020 	ldrb.w	r3, [r4, #32]
   b5ada:	b10b      	cbz	r3, b5ae0 <_ZN15Adafruit_VS10537sciReadEh+0x74>
   b5adc:	f7ff ff14 	bl	b5908 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b5ae0:	4628      	mov	r0, r5
   b5ae2:	b004      	add	sp, #16
   b5ae4:	bd70      	pop	{r4, r5, r6, pc}
   b5ae6:	bf00      	nop
   b5ae8:	000ba630 	.word	0x000ba630
   b5aec:	0003d090 	.word	0x0003d090

000b5af0 <_ZN15Adafruit_VS10535beginEv>:
uint8_t Adafruit_VS1053::begin(void) {
   b5af0:	b538      	push	{r3, r4, r5, lr}
   b5af2:	4604      	mov	r4, r0
  if (_reset >= 0) {
   b5af4:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
   b5af8:	2800      	cmp	r0, #0
   b5afa:	db09      	blt.n	b5b10 <_ZN15Adafruit_VS10535beginEv+0x20>
    pinMode(_reset, OUTPUT);
   b5afc:	2101      	movs	r1, #1
   b5afe:	b280      	uxth	r0, r0
   b5b00:	f003 fcaa 	bl	b9458 <pinMode>
    digitalWrite(_reset, LOW);
   b5b04:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
   b5b08:	2100      	movs	r1, #0
   b5b0a:	b280      	uxth	r0, r0
   b5b0c:	f003 fcb5 	bl	b947a <digitalWrite>
  pinMode(_cs, OUTPUT);
   b5b10:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5b14:	2101      	movs	r1, #1
   b5b16:	b280      	uxth	r0, r0
   b5b18:	f003 fc9e 	bl	b9458 <pinMode>
  digitalWrite(_cs, HIGH);
   b5b1c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
   b5b20:	2101      	movs	r1, #1
   b5b22:	b280      	uxth	r0, r0
   b5b24:	f003 fca9 	bl	b947a <digitalWrite>
  pinMode(_dcs, OUTPUT);
   b5b28:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
   b5b2c:	2101      	movs	r1, #1
   b5b2e:	b280      	uxth	r0, r0
   b5b30:	f003 fc92 	bl	b9458 <pinMode>
  digitalWrite(_dcs, HIGH);
   b5b34:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
   b5b38:	2101      	movs	r1, #1
   b5b3a:	b280      	uxth	r0, r0
   b5b3c:	f003 fc9d 	bl	b947a <digitalWrite>
  pinMode(_dreq, INPUT);
   b5b40:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   b5b44:	2100      	movs	r1, #0
   b5b46:	f003 fc87 	bl	b9458 <pinMode>
  if (!useHardwareSPI) {
   b5b4a:	f894 5020 	ldrb.w	r5, [r4, #32]
   b5b4e:	b9dd      	cbnz	r5, b5b88 <_ZN15Adafruit_VS10535beginEv+0x98>
    pinMode(_mosi, OUTPUT);
   b5b50:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
   b5b54:	2101      	movs	r1, #1
   b5b56:	b280      	uxth	r0, r0
   b5b58:	f003 fc7e 	bl	b9458 <pinMode>
    pinMode(_clk, OUTPUT);
   b5b5c:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
   b5b60:	2101      	movs	r1, #1
   b5b62:	b280      	uxth	r0, r0
   b5b64:	f003 fc78 	bl	b9458 <pinMode>
    pinMode(_miso, INPUT);
   b5b68:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   b5b6c:	4629      	mov	r1, r5
   b5b6e:	b280      	uxth	r0, r0
   b5b70:	f003 fc72 	bl	b9458 <pinMode>
  reset();
   b5b74:	4620      	mov	r0, r4
   b5b76:	f7ff ff43 	bl	b5a00 <_ZN15Adafruit_VS10535resetEv>
  return (sciRead(VS1053_REG_STATUS) >> 4) & 0x0F;
   b5b7a:	2101      	movs	r1, #1
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	f7ff ff75 	bl	b5a6c <_ZN15Adafruit_VS10537sciReadEh>
}
   b5b82:	f3c0 1003 	ubfx	r0, r0, #4, #4
   b5b86:	bd38      	pop	{r3, r4, r5, pc}
        instance().begin();
   b5b88:	f7ff fc60 	bl	b544c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5b8c:	f002 fa72 	bl	b8074 <_ZN8SPIClass5beginEv>
    }
   b5b90:	e7f0      	b.n	b5b74 <_ZN15Adafruit_VS10535beginEv+0x84>

000b5b92 <_ZN26Adafruit_VS1053_FilePlayer5beginEv>:
boolean Adafruit_VS1053_FilePlayer::begin(void) {
   b5b92:	b510      	push	{r4, lr}
   b5b94:	4604      	mov	r4, r0
  pinMode(_cardCS, OUTPUT);
   b5b96:	2101      	movs	r1, #1
   b5b98:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
   b5b9c:	f003 fc5c 	bl	b9458 <pinMode>
  digitalWrite(_cardCS, HIGH);  
   b5ba0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
   b5ba4:	2101      	movs	r1, #1
   b5ba6:	f003 fc68 	bl	b947a <digitalWrite>
  uint8_t v  = Adafruit_VS1053::begin();   
   b5baa:	4620      	mov	r0, r4
   b5bac:	f7ff ffa0 	bl	b5af0 <_ZN15Adafruit_VS10535beginEv>
}
   b5bb0:	1f03      	subs	r3, r0, #4
   b5bb2:	4258      	negs	r0, r3
   b5bb4:	4158      	adcs	r0, r3
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <_ZN15Adafruit_VS10538playDataEPhh>:
void Adafruit_VS1053::playData(uint8_t *buffer, uint8_t buffsiz) {
   b5bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (useHardwareSPI) SPI.beginTransaction(VS1053_DATA_SPI_SETTING);
   b5bba:	f890 3020 	ldrb.w	r3, [r0, #32]
void Adafruit_VS1053::playData(uint8_t *buffer, uint8_t buffsiz) {
   b5bbe:	4604      	mov	r4, r0
   b5bc0:	460d      	mov	r5, r1
   b5bc2:	4616      	mov	r6, r2
  if (useHardwareSPI) SPI.beginTransaction(VS1053_DATA_SPI_SETTING);
   b5bc4:	b163      	cbz	r3, b5be0 <_ZN15Adafruit_VS10538playDataEPhh+0x28>
   b5bc6:	4b14      	ldr	r3, [pc, #80]	; (b5c18 <_ZN15Adafruit_VS10538playDataEPhh+0x60>)
   b5bc8:	9300      	str	r3, [sp, #0]
   b5bca:	2300      	movs	r3, #0
   b5bcc:	f88d 3004 	strb.w	r3, [sp, #4]
   b5bd0:	4b12      	ldr	r3, [pc, #72]	; (b5c1c <_ZN15Adafruit_VS10538playDataEPhh+0x64>)
   b5bd2:	9302      	str	r3, [sp, #8]
   b5bd4:	4668      	mov	r0, sp
   b5bd6:	2301      	movs	r3, #1
   b5bd8:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5bdc:	f7ff fe9b 	bl	b5916 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
  digitalWrite(_dcs, LOW);
   b5be0:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
   b5be4:	2100      	movs	r1, #0
   b5be6:	b280      	uxth	r0, r0
   b5be8:	f003 fc47 	bl	b947a <digitalWrite>
  spiwrite(buffer, buffsiz);
   b5bec:	4632      	mov	r2, r6
   b5bee:	4629      	mov	r1, r5
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	f7ff fc65 	bl	b54c0 <_ZN15Adafruit_VS10538spiwriteEPht>
  digitalWrite(_dcs, HIGH);
   b5bf6:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
   b5bfa:	2101      	movs	r1, #1
   b5bfc:	b280      	uxth	r0, r0
   b5bfe:	f003 fc3c 	bl	b947a <digitalWrite>
  if (useHardwareSPI) SPI.endTransaction();
   b5c02:	f894 3020 	ldrb.w	r3, [r4, #32]
   b5c06:	b123      	cbz	r3, b5c12 <_ZN15Adafruit_VS10538playDataEPhh+0x5a>
}
   b5c08:	b004      	add	sp, #16
   b5c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (useHardwareSPI) SPI.endTransaction();
   b5c0e:	f7ff be7b 	b.w	b5908 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b5c12:	b004      	add	sp, #16
   b5c14:	bd70      	pop	{r4, r5, r6, pc}
   b5c16:	bf00      	nop
   b5c18:	000ba630 	.word	0x000ba630
   b5c1c:	007a1200 	.word	0x007a1200

000b5c20 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv>:
void Adafruit_VS1053_FilePlayer::feedBuffer_noLock(void) {
   b5c20:	b538      	push	{r3, r4, r5, lr}
  if ((!playingMusic) // paused or stopped
   b5c22:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
void Adafruit_VS1053_FilePlayer::feedBuffer_noLock(void) {
   b5c26:	4604      	mov	r4, r0
  || (!readyForData())) {
   b5c28:	b1f3      	cbz	r3, b5c68 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x48>
  || (!currentTrack) 
   b5c2a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b5c2e:	b1db      	cbz	r3, b5c68 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x48>
  || (!readyForData())) {
   b5c30:	f7ff fc02 	bl	b5438 <_ZN15Adafruit_VS105312readyForDataEv>
   b5c34:	b1c0      	cbz	r0, b5c68 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x48>
    int bytesread = currentTrack.read(mp3buffer, VS1053_DATABUFFERLEN);
   b5c36:	f104 0538 	add.w	r5, r4, #56	; 0x38
  while (readyForData()) {
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	f7ff fbfc 	bl	b5438 <_ZN15Adafruit_VS105312readyForDataEv>
   b5c40:	b190      	cbz	r0, b5c68 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x48>
    int bytesread = currentTrack.read(mp3buffer, VS1053_DATABUFFERLEN);
   b5c42:	2220      	movs	r2, #32
   b5c44:	4621      	mov	r1, r4
   b5c46:	4628      	mov	r0, r5
   b5c48:	f000 fc25 	bl	b6496 <_ZN7FatFile4readEPvj>
    if (bytesread == 0) {
   b5c4c:	b930      	cbnz	r0, b5c5c <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x3c>
      playingMusic = false;
   b5c4e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
      currentTrack.close();
   b5c52:	4628      	mov	r0, r5
}
   b5c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      currentTrack.close();
   b5c58:	f000 bde0 	b.w	b681c <_ZN7FatFile5closeEv>
    playData(mp3buffer, bytesread);
   b5c5c:	b2c2      	uxtb	r2, r0
   b5c5e:	4621      	mov	r1, r4
   b5c60:	4620      	mov	r0, r4
   b5c62:	f7ff ffa9 	bl	b5bb8 <_ZN15Adafruit_VS10538playDataEPhh>
  while (readyForData()) {
   b5c66:	e7e8      	b.n	b5c3a <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv+0x1a>
}
   b5c68:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c6c <_ZN26Adafruit_VS1053_FilePlayer10feedBufferEv>:
void Adafruit_VS1053_FilePlayer::feedBuffer(void) {
   b5c6c:	b570      	push	{r4, r5, r6, lr}
  if (feedBufferLock) {
   b5c6e:	4c0a      	ldr	r4, [pc, #40]	; (b5c98 <_ZN26Adafruit_VS1053_FilePlayer10feedBufferEv+0x2c>)
void Adafruit_VS1053_FilePlayer::feedBuffer(void) {
   b5c70:	4605      	mov	r5, r0
  noInterrupts();
   b5c72:	f002 ff29 	bl	b8ac8 <_Z12noInterruptsv>
  if (feedBufferLock) {
   b5c76:	7823      	ldrb	r3, [r4, #0]
   b5c78:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   b5c7c:	b11b      	cbz	r3, b5c86 <_ZN26Adafruit_VS1053_FilePlayer10feedBufferEv+0x1a>
}
   b5c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    interrupts();
   b5c82:	f002 bf23 	b.w	b8acc <_Z10interruptsv>
  feedBufferLock = true;
   b5c86:	2301      	movs	r3, #1
   b5c88:	7023      	strb	r3, [r4, #0]
  interrupts();
   b5c8a:	f002 ff1f 	bl	b8acc <_Z10interruptsv>
  feedBuffer_noLock();
   b5c8e:	4628      	mov	r0, r5
   b5c90:	f7ff ffc6 	bl	b5c20 <_ZN26Adafruit_VS1053_FilePlayer17feedBuffer_noLockEv>
  feedBufferLock = false;
   b5c94:	7026      	strb	r6, [r4, #0]
}
   b5c96:	bd70      	pop	{r4, r5, r6, pc}
   b5c98:	2003e6b0 	.word	0x2003e6b0

000b5c9c <_ZL6feederv>:
static void feeder(void) {
   b5c9c:	b510      	push	{r4, lr}
  myself->feedBuffer();
   b5c9e:	4b05      	ldr	r3, [pc, #20]	; (b5cb4 <_ZL6feederv+0x18>)
   b5ca0:	6818      	ldr	r0, [r3, #0]
   b5ca2:	f7ff ffe3 	bl	b5c6c <_ZN26Adafruit_VS1053_FilePlayer10feedBufferEv>
  if (myself->isrCallback)
   b5ca6:	4b04      	ldr	r3, [pc, #16]	; (b5cb8 <_ZL6feederv+0x1c>)
   b5ca8:	681b      	ldr	r3, [r3, #0]
   b5caa:	b113      	cbz	r3, b5cb2 <_ZL6feederv+0x16>
}
   b5cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    myself->isrCallback();
   b5cb0:	4718      	bx	r3
}
   b5cb2:	bd10      	pop	{r4, pc}
   b5cb4:	2003e6a8 	.word	0x2003e6a8
   b5cb8:	2003e6ac 	.word	0x2003e6ac

000b5cbc <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc>:
boolean Adafruit_VS1053_FilePlayer::startPlayingFile(const char *trackname) {
   b5cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  sciWrite(VS1053_REG_MODE, VS1053_MODE_SM_LINE1 | VS1053_MODE_SM_SDINEW);
   b5cbe:	f44f 4290 	mov.w	r2, #18432	; 0x4800
boolean Adafruit_VS1053_FilePlayer::startPlayingFile(const char *trackname) {
   b5cc2:	b08f      	sub	sp, #60	; 0x3c
   b5cc4:	4604      	mov	r4, r0
   b5cc6:	460d      	mov	r5, r1
  sciWrite(VS1053_REG_MODE, VS1053_MODE_SM_LINE1 | VS1053_MODE_SM_SDINEW);
   b5cc8:	2100      	movs	r1, #0
   b5cca:	f7ff fe2f 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  sciWrite(VS1053_REG_WRAMADDR, 0x1e29);
   b5cce:	f641 6229 	movw	r2, #7721	; 0x1e29
   b5cd2:	2107      	movs	r1, #7
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	f7ff fe29 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  sciWrite(VS1053_REG_WRAM, 0);
   b5cda:	2200      	movs	r2, #0
   b5cdc:	2106      	movs	r1, #6
   b5cde:	4620      	mov	r0, r4
   b5ce0:	f7ff fe24 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
   b5ce4:	2700      	movs	r7, #0
   b5ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5cea:	e9cd 7302 	strd	r7, r3, [sp, #8]
   b5cee:	4b21      	ldr	r3, [pc, #132]	; (b5d74 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0xb8>)
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   b5cf0:	4921      	ldr	r1, [pc, #132]	; (b5d78 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0xbc>)
   b5cf2:	9301      	str	r3, [sp, #4]
   b5cf4:	462a      	mov	r2, r5
   b5cf6:	463b      	mov	r3, r7
   b5cf8:	a805      	add	r0, sp, #20
class File : public FatFile, public Stream {
   b5cfa:	ad05      	add	r5, sp, #20
   b5cfc:	9705      	str	r7, [sp, #20]
   b5cfe:	f000 fd94 	bl	b682a <_ZN7FatFile4openEPS_PKci>
   b5d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d04:	f104 0638 	add.w	r6, r4, #56	; 0x38
   b5d08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5d0e:	682b      	ldr	r3, [r5, #0]
   b5d10:	6033      	str	r3, [r6, #0]
class Print
   b5d12:	9b02      	ldr	r3, [sp, #8]
   b5d14:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (!currentTrack) {
   b5d16:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
class Stream : public Print
   b5d1a:	9b03      	ldr	r3, [sp, #12]
   b5d1c:	6323      	str	r3, [r4, #48]	; 0x30
   b5d1e:	9b04      	ldr	r3, [sp, #16]
   b5d20:	6363      	str	r3, [r4, #52]	; 0x34
   b5d22:	b31d      	cbz	r5, b5d6c <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0xb0>
  noInterrupts();
   b5d24:	f002 fed0 	bl	b8ac8 <_Z12noInterruptsv>
  sciWrite(VS1053_REG_DECODETIME, 0x00);
   b5d28:	463a      	mov	r2, r7
   b5d2a:	2104      	movs	r1, #4
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	f7ff fdfd 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  sciWrite(VS1053_REG_DECODETIME, 0x00);
   b5d32:	463a      	mov	r2, r7
   b5d34:	2104      	movs	r1, #4
   b5d36:	4620      	mov	r0, r4
   b5d38:	f7ff fdf8 	bl	b592c <_ZN15Adafruit_VS10538sciWriteEht>
  playingMusic = true;
   b5d3c:	2301      	movs	r3, #1
   b5d3e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  while (!readyForData()) {
   b5d42:	4620      	mov	r0, r4
   b5d44:	f7ff fb78 	bl	b5438 <_ZN15Adafruit_VS105312readyForDataEv>
   b5d48:	4605      	mov	r5, r0
   b5d4a:	b910      	cbnz	r0, b5d52 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0x96>
   b5d4c:	f001 fed8 	bl	b7b00 <os_thread_yield>
#endif // PLATFORM_THREADING
}
   b5d50:	e7f7      	b.n	b5d42 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0x86>
  while (playingMusic && readyForData()) {
   b5d52:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
   b5d56:	b13b      	cbz	r3, b5d68 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0xac>
   b5d58:	4620      	mov	r0, r4
   b5d5a:	f7ff fb6d 	bl	b5438 <_ZN15Adafruit_VS105312readyForDataEv>
   b5d5e:	b118      	cbz	r0, b5d68 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0xac>
    feedBuffer();
   b5d60:	4620      	mov	r0, r4
   b5d62:	f7ff ff83 	bl	b5c6c <_ZN26Adafruit_VS1053_FilePlayer10feedBufferEv>
  while (playingMusic && readyForData()) {
   b5d66:	e7f4      	b.n	b5d52 <_ZN26Adafruit_VS1053_FilePlayer16startPlayingFileEPKc+0x96>
  interrupts();
   b5d68:	f002 feb0 	bl	b8acc <_Z10interruptsv>
}
   b5d6c:	4628      	mov	r0, r5
   b5d6e:	b00f      	add	sp, #60	; 0x3c
   b5d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d72:	bf00      	nop
   b5d74:	000ba6a0 	.word	0x000ba6a0
   b5d78:	2003e49c 	.word	0x2003e49c

000b5d7c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5d7c:	2904      	cmp	r1, #4
   b5d7e:	d804      	bhi.n	b5d8a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5d80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5d84:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5d88:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5d8a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d8c:	bf9b      	ittet	ls
   b5d8e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5d92:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d96:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d98:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d9a:	bf84      	itt	hi
   b5d9c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5da0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5da2:	4770      	bx	lr

000b5da4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5da4:	b510      	push	{r4, lr}
   b5da6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5da8:	3024      	adds	r0, #36	; 0x24
   b5daa:	f000 fe63 	bl	b6a74 <_ZN8FatCache4syncEv>
   b5dae:	b128      	cbz	r0, b5dbc <_ZN9FatVolume9cacheSyncEv+0x18>
   b5db0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5db8:	f000 be5c 	b.w	b6a74 <_ZN8FatCache4syncEv>
  }
   b5dbc:	bd10      	pop	{r4, pc}

000b5dbe <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5dbe:	1e41      	subs	r1, r0, #1
   b5dc0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5dc4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5dc6:	0842      	lsrs	r2, r0, #1
   b5dc8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5dcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5dd0:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5dd4:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5dd6:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5dd8:	d1f5      	bne.n	b5dc6 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5dda:	4770      	bx	lr

000b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5de0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5de2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5de6:	2b20      	cmp	r3, #32
   b5de8:	d0fa      	beq.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dea:	4d6a      	ldr	r5, [pc, #424]	; (b5f94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5dec:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5dee:	2400      	movs	r4, #0
    c = path[len];
   b5df0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5df2:	b1c3      	cbz	r3, b5e26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5df4:	2b2f      	cmp	r3, #47	; 0x2f
   b5df6:	d016      	beq.n	b5e26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5df8:	2b5c      	cmp	r3, #92	; 0x5c
   b5dfa:	d102      	bne.n	b5e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5dfc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5e02:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5e06:	b2c0      	uxtb	r0, r0
   b5e08:	281d      	cmp	r0, #29
   b5e0a:	d803      	bhi.n	b5e14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5e0c:	fa25 f000 	lsr.w	r0, r5, r0
   b5e10:	07c0      	lsls	r0, r0, #31
   b5e12:	d4f3      	bmi.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5e14:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5e18:	283c      	cmp	r0, #60	; 0x3c
   b5e1a:	d0ef      	beq.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5e1c:	3b20      	subs	r3, #32
   b5e1e:	2b5e      	cmp	r3, #94	; 0x5e
   b5e20:	d8ec      	bhi.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5e22:	3401      	adds	r4, #1
    c = path[len];
   b5e24:	e7e4      	b.n	b5df0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5e26:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5e28:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5e2a:	4607      	mov	r7, r0
   b5e2c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5e30:	2d20      	cmp	r5, #32
   b5e32:	d0fa      	beq.n	b5e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5e34:	2d2f      	cmp	r5, #47	; 0x2f
   b5e36:	d0f8      	beq.n	b5e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5e38:	6017      	str	r7, [r2, #0]
  while (len) {
   b5e3a:	b14c      	cbz	r4, b5e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5e3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5e40:	2a2e      	cmp	r2, #46	; 0x2e
   b5e42:	d001      	beq.n	b5e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5e44:	2a20      	cmp	r2, #32
   b5e46:	d101      	bne.n	b5e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5e48:	3c01      	subs	r4, #1
  while (len) {
   b5e4a:	e7f6      	b.n	b5e3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5e4c:	2cff      	cmp	r4, #255	; 0xff
   b5e4e:	dcd5      	bgt.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5e50:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5e54:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5e58:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5e5a:	f8c1 300d 	str.w	r3, [r1, #13]
   b5e5e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e60:	f04f 0800 	mov.w	r8, #0
   b5e64:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5e68:	2b2e      	cmp	r3, #46	; 0x2e
   b5e6a:	d001      	beq.n	b5e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5e6c:	2b20      	cmp	r3, #32
   b5e6e:	d102      	bne.n	b5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5e70:	f108 0801 	add.w	r8, r8, #1
   b5e74:	e7f6      	b.n	b5e64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5e76:	fab8 f088 	clz	r0, r8
   b5e7a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e7c:	1e65      	subs	r5, r4, #1
   b5e7e:	1c6b      	adds	r3, r5, #1
   b5e80:	d002      	beq.n	b5e88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5e82:	5d73      	ldrb	r3, [r6, r5]
   b5e84:	2b2e      	cmp	r3, #46	; 0x2e
   b5e86:	d114      	bne.n	b5eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e88:	f04f 0900 	mov.w	r9, #0
   b5e8c:	2707      	movs	r7, #7
   b5e8e:	464a      	mov	r2, r9
   b5e90:	46ca      	mov	sl, r9
   b5e92:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5e96:	45a0      	cmp	r8, r4
   b5e98:	da68      	bge.n	b5f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5e9a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5e9e:	2b20      	cmp	r3, #32
   b5ea0:	d003      	beq.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5ea2:	2b2e      	cmp	r3, #46	; 0x2e
   b5ea4:	d107      	bne.n	b5eb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5ea6:	45a8      	cmp	r8, r5
   b5ea8:	d012      	beq.n	b5ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5eaa:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5eac:	f108 0801 	add.w	r8, r8, #1
   b5eb0:	e7f1      	b.n	b5e96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5eb2:	3d01      	subs	r5, #1
   b5eb4:	e7e3      	b.n	b5e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5eb6:	2b22      	cmp	r3, #34	; 0x22
   b5eb8:	d008      	beq.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5eba:	2b7c      	cmp	r3, #124	; 0x7c
   b5ebc:	d006      	beq.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5ebe:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5ec2:	f1bc 0f05 	cmp.w	ip, #5
   b5ec6:	d80a      	bhi.n	b5ede <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5ec8:	2b2d      	cmp	r3, #45	; 0x2d
   b5eca:	d012      	beq.n	b5ef2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5ecc:	45a8      	cmp	r8, r5
   b5ece:	d15b      	bne.n	b5f88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5ed0:	2f0a      	cmp	r7, #10
   b5ed2:	d04a      	beq.n	b5f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5ed4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5ed6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5ed8:	f04f 0e10 	mov.w	lr, #16
   b5edc:	e7e6      	b.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5ede:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5ee2:	f1bc 0f05 	cmp.w	ip, #5
   b5ee6:	d9f1      	bls.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5ee8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5eec:	f1bc 0f02 	cmp.w	ip, #2
   b5ef0:	d9ec      	bls.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5ef2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5ef6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5efa:	d8e7      	bhi.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5efc:	45a8      	cmp	r8, r5
   b5efe:	d0e7      	beq.n	b5ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5f00:	42ba      	cmp	r2, r7
   b5f02:	d830      	bhi.n	b5f66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5f04:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5f08:	f1bc 0f19 	cmp.w	ip, #25
   b5f0c:	d81a      	bhi.n	b5f44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5f0e:	3b20      	subs	r3, #32
        lc |= bit;
   b5f10:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5f14:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5f16:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5f1a:	f102 0c01 	add.w	ip, r2, #1
   b5f1e:	fa5f fc8c 	uxtb.w	ip, ip
   b5f22:	440a      	add	r2, r1
      if (i < 7) {
   b5f24:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5f28:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5f2a:	d801      	bhi.n	b5f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5f2c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5f30:	4662      	mov	r2, ip
   b5f32:	e7bb      	b.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5f34:	45a8      	cmp	r8, r5
   b5f36:	dc18      	bgt.n	b5f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5f38:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5f3a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5f3c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5f3e:	f04f 0e10 	mov.w	lr, #16
   b5f42:	e7b2      	b.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5f44:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5f48:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5f4c:	bf98      	it	ls
   b5f4e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5f52:	e7e2      	b.n	b5f1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5f54:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5f56:	2001      	movs	r0, #1
   b5f58:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5f5a:	4419      	add	r1, r3
   b5f5c:	237e      	movs	r3, #126	; 0x7e
   b5f5e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5f60:	2331      	movs	r3, #49	; 0x31
   b5f62:	738b      	strb	r3, [r1, #14]
   b5f64:	e74b      	b.n	b5dfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5f66:	2f0a      	cmp	r7, #10
   b5f68:	d1e4      	bne.n	b5f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5f6a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5f6c:	7b4b      	ldrb	r3, [r1, #13]
   b5f6e:	2b20      	cmp	r3, #32
   b5f70:	f43f af44 	beq.w	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5f74:	2800      	cmp	r0, #0
   b5f76:	d0ed      	beq.n	b5f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5f78:	ea1a 0f09 	tst.w	sl, r9
   b5f7c:	bf18      	it	ne
   b5f7e:	f04f 0902 	movne.w	r9, #2
   b5f82:	f881 9000 	strb.w	r9, [r1]
   b5f86:	e73a      	b.n	b5dfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5f88:	42ba      	cmp	r2, r7
   b5f8a:	d8ec      	bhi.n	b5f66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5f8c:	2000      	movs	r0, #0
      c = '_';
   b5f8e:	235f      	movs	r3, #95	; 0x5f
   b5f90:	e7c3      	b.n	b5f1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5f92:	bf00      	nop
   b5f94:	31000101 	.word	0x31000101

000b5f98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5f9c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5fa0:	4606      	mov	r6, r0
   b5fa2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5fa4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5fa6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5fa8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5fac:	6861      	ldr	r1, [r4, #4]
   b5fae:	68a2      	ldr	r2, [r4, #8]
   b5fb0:	186b      	adds	r3, r5, r1
   b5fb2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5fb4:	4411      	add	r1, r2
   b5fb6:	4291      	cmp	r1, r2
   b5fb8:	d006      	beq.n	b5fc8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5fba:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5fbe:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5fc2:	4043      	eors	r3, r0
   b5fc4:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5fc6:	e7f6      	b.n	b5fb6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5fc8:	f1b9 0f03 	cmp.w	r9, #3
   b5fcc:	bf28      	it	cs
   b5fce:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fd2:	f109 0204 	add.w	r2, r9, #4
   b5fd6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5fd8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fdc:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fde:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fe0:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fe2:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fe4:	bf94      	ite	ls
   b5fe6:	3130      	addls	r1, #48	; 0x30
   b5fe8:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5fea:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5fec:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5fee:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5ff2:	d1f1      	bne.n	b5fd8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5ff4:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5ff8:	2100      	movs	r1, #0
   b5ffa:	735f      	strb	r7, [r3, #13]
   b5ffc:	4630      	mov	r0, r6
   b5ffe:	f000 fb2a 	bl	b6656 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6002:	2101      	movs	r1, #1
   b6004:	4630      	mov	r0, r6
   b6006:	f000 fb07 	bl	b6618 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b600a:	4601      	mov	r1, r0
   b600c:	b928      	cbnz	r0, b601a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b600e:	7870      	ldrb	r0, [r6, #1]
   b6010:	fab0 f080 	clz	r0, r0
   b6014:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b601a:	7803      	ldrb	r3, [r0, #0]
   b601c:	b16b      	cbz	r3, b603a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b601e:	7ac3      	ldrb	r3, [r0, #11]
   b6020:	071b      	lsls	r3, r3, #28
   b6022:	d4ee      	bmi.n	b6002 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6024:	220b      	movs	r2, #11
   b6026:	4640      	mov	r0, r8
   b6028:	f004 f896 	bl	ba158 <memcmp>
   b602c:	2800      	cmp	r0, #0
   b602e:	d1e8      	bne.n	b6002 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6030:	3501      	adds	r5, #1
   b6032:	b2ad      	uxth	r5, r5
   b6034:	2d64      	cmp	r5, #100	; 0x64
   b6036:	d1b9      	bne.n	b5fac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6038:	e7ed      	b.n	b6016 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b603a:	2001      	movs	r0, #1
   b603c:	e7eb      	b.n	b6016 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6040 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6044:	ed2d 8b02 	vpush	{d8}
   b6048:	b08b      	sub	sp, #44	; 0x2c
   b604a:	460d      	mov	r5, r1
   b604c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b604e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6050:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6052:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6056:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6058:	d105      	bne.n	b6066 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b605a:	2000      	movs	r0, #0
}
   b605c:	b00b      	add	sp, #44	; 0x2c
   b605e:	ecbd 8b02 	vpop	{d8}
   b6062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6066:	9b07      	ldr	r3, [sp, #28]
   b6068:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b606a:	2b00      	cmp	r3, #0
   b606c:	d1f5      	bne.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b606e:	6853      	ldr	r3, [r2, #4]
   b6070:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6072:	7813      	ldrb	r3, [r2, #0]
   b6074:	079c      	lsls	r4, r3, #30
   b6076:	bf1f      	itttt	ne
   b6078:	9b05      	ldrne	r3, [sp, #20]
   b607a:	330c      	addne	r3, #12
   b607c:	220d      	movne	r2, #13
   b607e:	fbb3 f3f2 	udivne	r3, r3, r2
   b6082:	bf1a      	itte	ne
   b6084:	3301      	addne	r3, #1
   b6086:	b2db      	uxtbne	r3, r3
   b6088:	2301      	moveq	r3, #1
    seekSet(0);
   b608a:	2100      	movs	r1, #0
   b608c:	4628      	mov	r0, r5
   b608e:	9303      	str	r3, [sp, #12]
   b6090:	f000 fae1 	bl	b6656 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6094:	f107 030d 	add.w	r3, r7, #13
  }
   b6098:	f04f 0b00 	mov.w	fp, #0
   b609c:	ee08 3a10 	vmov	s16, r3
   b60a0:	46da      	mov	sl, fp
   b60a2:	465c      	mov	r4, fp
   b60a4:	465e      	mov	r6, fp
   b60a6:	f8cd b010 	str.w	fp, [sp, #16]
   b60aa:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b60ac:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b60ae:	2101      	movs	r1, #1
   b60b0:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b60b2:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b60b6:	f000 faaf 	bl	b6618 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b60ba:	4603      	mov	r3, r0
   b60bc:	2800      	cmp	r0, #0
   b60be:	d171      	bne.n	b61a4 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b60c0:	786b      	ldrb	r3, [r5, #1]
   b60c2:	2b00      	cmp	r3, #0
   b60c4:	d1c9      	bne.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b60c6:	9b06      	ldr	r3, [sp, #24]
   b60c8:	059a      	lsls	r2, r3, #22
   b60ca:	d5c6      	bpl.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b60cc:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b60d0:	3b01      	subs	r3, #1
   b60d2:	2b01      	cmp	r3, #1
   b60d4:	d8c1      	bhi.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b60d6:	9b04      	ldr	r3, [sp, #16]
   b60d8:	2c00      	cmp	r4, #0
   b60da:	bf08      	it	eq
   b60dc:	4643      	moveq	r3, r8
   b60de:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b60e0:	9b03      	ldr	r3, [sp, #12]
   b60e2:	429c      	cmp	r4, r3
   b60e4:	f0c0 80f1 	bcc.w	b62ca <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b60e8:	f1b9 0f00 	cmp.w	r9, #0
   b60ec:	f040 810a 	bne.w	b6304 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b60f0:	9b04      	ldr	r3, [sp, #16]
   b60f2:	4628      	mov	r0, r5
   b60f4:	0159      	lsls	r1, r3, #5
   b60f6:	f000 faae 	bl	b6656 <_ZN7FatFile7seekSetEm>
   b60fa:	2800      	cmp	r0, #0
   b60fc:	d0ad      	beq.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b60fe:	9b03      	ldr	r3, [sp, #12]
   b6100:	f103 39ff 	add.w	r9, r3, #4294967295
   b6104:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6108:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b610a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b610e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6112:	2e00      	cmp	r6, #0
   b6114:	f000 810d 	beq.w	b6332 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6118:	2100      	movs	r1, #0
   b611a:	4628      	mov	r0, r5
   b611c:	f000 fa7c 	bl	b6618 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6120:	4604      	mov	r4, r0
   b6122:	2800      	cmp	r0, #0
   b6124:	d099      	beq.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6126:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6128:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b612c:	454e      	cmp	r6, r9
   b612e:	f043 0301 	orr.w	r3, r3, #1
   b6132:	bf0c      	ite	eq
   b6134:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6138:	46b3      	movne	fp, r6
   b613a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b613e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6142:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6146:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b614a:	f107 000d 	add.w	r0, r7, #13
   b614e:	f7ff fe36 	bl	b5dbe <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6152:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6156:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6158:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b615c:	f00b 031f 	and.w	r3, fp, #31
   b6160:	220d      	movs	r2, #13
   b6162:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6164:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6168:	4353      	muls	r3, r2
   b616a:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b616c:	9905      	ldr	r1, [sp, #20]
   b616e:	4299      	cmp	r1, r3
   b6170:	f240 80d0 	bls.w	b6314 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6174:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6178:	2a04      	cmp	r2, #4
   b617a:	fa5f fe82 	uxtb.w	lr, r2
   b617e:	f102 0001 	add.w	r0, r2, #1
   b6182:	f200 80cd 	bhi.w	b6320 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6186:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b618a:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b618e:	280d      	cmp	r0, #13
   b6190:	f103 0301 	add.w	r3, r3, #1
   b6194:	4602      	mov	r2, r0
   b6196:	d1e9      	bne.n	b616c <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6198:	3e01      	subs	r6, #1
   b619a:	b2f6      	uxtb	r6, r6
   b619c:	e7b9      	b.n	b6112 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b619e:	f04f 0901 	mov.w	r9, #1
   b61a2:	e783      	b.n	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b61a4:	7802      	ldrb	r2, [r0, #0]
   b61a6:	2ae5      	cmp	r2, #229	; 0xe5
   b61a8:	d000      	beq.n	b61ac <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b61aa:	b97a      	cbnz	r2, b61cc <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b61ac:	9904      	ldr	r1, [sp, #16]
   b61ae:	2c00      	cmp	r4, #0
   b61b0:	bf08      	it	eq
   b61b2:	4641      	moveq	r1, r8
   b61b4:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b61b6:	9903      	ldr	r1, [sp, #12]
   b61b8:	428c      	cmp	r4, r1
        freeFound++;
   b61ba:	bf3c      	itt	cc
   b61bc:	3401      	addcc	r4, #1
   b61be:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b61c0:	2a00      	cmp	r2, #0
   b61c2:	d080      	beq.n	b60c6 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b61c4:	2ae5      	cmp	r2, #229	; 0xe5
   b61c6:	d105      	bne.n	b61d4 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b61c8:	2600      	movs	r6, #0
   b61ca:	e76f      	b.n	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b61cc:	9903      	ldr	r1, [sp, #12]
   b61ce:	428c      	cmp	r4, r1
   b61d0:	bf38      	it	cc
   b61d2:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b61d4:	2a2e      	cmp	r2, #46	; 0x2e
   b61d6:	d0f7      	beq.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b61d8:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b61da:	290f      	cmp	r1, #15
   b61dc:	d14a      	bne.n	b6274 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b61de:	bb16      	cbnz	r6, b6226 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b61e0:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b61e4:	f43f af62 	beq.w	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b61e8:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b61ec:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b61f0:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b61f2:	220d      	movs	r2, #13
   b61f4:	f10a 38ff 	add.w	r8, sl, #4294967295
   b61f8:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b61fc:	9a05      	ldr	r2, [sp, #20]
   b61fe:	4542      	cmp	r2, r8
   b6200:	d9e2      	bls.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6202:	eba2 0208 	sub.w	r2, r2, r8
   b6206:	9208      	str	r2, [sp, #32]
   b6208:	2200      	movs	r2, #0
   b620a:	eb02 0108 	add.w	r1, r2, r8
   b620e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6210:	4618      	mov	r0, r3
   b6212:	b2d1      	uxtb	r1, r2
   b6214:	f7ff fdb2 	bl	b5d7c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6218:	9908      	ldr	r1, [sp, #32]
   b621a:	428a      	cmp	r2, r1
   b621c:	d10d      	bne.n	b623a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b621e:	2800      	cmp	r0, #0
   b6220:	bf18      	it	ne
   b6222:	2600      	movne	r6, #0
   b6224:	e742      	b.n	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6226:	f10a 3aff 	add.w	sl, sl, #4294967295
   b622a:	fa5f fa8a 	uxtb.w	sl, sl
   b622e:	4552      	cmp	r2, sl
   b6230:	d1ca      	bne.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6232:	7b5a      	ldrb	r2, [r3, #13]
   b6234:	455a      	cmp	r2, fp
   b6236:	d0dc      	beq.n	b61f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6238:	e7c6      	b.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b623a:	28ff      	cmp	r0, #255	; 0xff
   b623c:	d8c4      	bhi.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b623e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6242:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6246:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6248:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b624a:	bf9c      	itt	ls
   b624c:	f10e 0020 	addls.w	r0, lr, #32
   b6250:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6254:	4608      	mov	r0, r1
   b6256:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6258:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b625a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b625e:	f1bc 0f19 	cmp.w	ip, #25
   b6262:	bf9c      	itt	ls
   b6264:	3120      	addls	r1, #32
   b6266:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6268:	4571      	cmp	r1, lr
   b626a:	d1ad      	bne.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b626c:	3201      	adds	r2, #1
   b626e:	2a0d      	cmp	r2, #13
   b6270:	d1cb      	bne.n	b620a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6272:	e71b      	b.n	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6274:	0708      	lsls	r0, r1, #28
   b6276:	d4a7      	bmi.n	b61c8 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6278:	b15e      	cbz	r6, b6292 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b627a:	f1ba 0f01 	cmp.w	sl, #1
   b627e:	f47f aeec 	bne.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6282:	4618      	mov	r0, r3
   b6284:	f7ff fd9b 	bl	b5dbe <_ZN7FatFile11lfnChecksumEPh>
   b6288:	4558      	cmp	r0, fp
   b628a:	f47f aee6 	bne.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b628e:	46b1      	mov	r9, r6
   b6290:	e00e      	b.n	b62b0 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6292:	ee18 1a10 	vmov	r1, s16
   b6296:	220b      	movs	r2, #11
   b6298:	4618      	mov	r0, r3
   b629a:	f003 ff5d 	bl	ba158 <memcmp>
   b629e:	2800      	cmp	r0, #0
   b62a0:	f47f af04 	bne.w	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b62a4:	f897 9000 	ldrb.w	r9, [r7]
   b62a8:	f019 0901 	ands.w	r9, r9, #1
   b62ac:	f47f af77 	bne.w	b619e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b62b0:	9b06      	ldr	r3, [sp, #24]
   b62b2:	0519      	lsls	r1, r3, #20
   b62b4:	f53f aed1 	bmi.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b62b8:	9b06      	ldr	r3, [sp, #24]
   b62ba:	9807      	ldr	r0, [sp, #28]
   b62bc:	f8cd 9000 	str.w	r9, [sp]
   b62c0:	4642      	mov	r2, r8
   b62c2:	4629      	mov	r1, r5
   b62c4:	f000 fa0a 	bl	b66dc <_ZN7FatFile15openCachedEntryEPS_tih>
   b62c8:	e6c8      	b.n	b605c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b62ca:	2100      	movs	r1, #0
   b62cc:	4628      	mov	r0, r5
   b62ce:	f000 f9a3 	bl	b6618 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b62d2:	b9a0      	cbnz	r0, b62fe <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b62d4:	786b      	ldrb	r3, [r5, #1]
   b62d6:	2b00      	cmp	r3, #0
   b62d8:	f47f aebf 	bne.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b62dc:	4628      	mov	r0, r5
   b62de:	f000 f887 	bl	b63f0 <_ZN7FatFile13addDirClusterEv>
   b62e2:	2800      	cmp	r0, #0
   b62e4:	f43f aeb9 	beq.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b62e8:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b62ea:	791b      	ldrb	r3, [r3, #4]
   b62ec:	2b01      	cmp	r3, #1
   b62ee:	f63f aefb 	bhi.w	b60e8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b62f2:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b62f4:	3410      	adds	r4, #16
   b62f6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b62f8:	42a3      	cmp	r3, r4
   b62fa:	d8ef      	bhi.n	b62dc <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b62fc:	e6f4      	b.n	b60e8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b62fe:	3401      	adds	r4, #1
   b6300:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6302:	e6ed      	b.n	b60e0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6304:	4639      	mov	r1, r7
   b6306:	4628      	mov	r0, r5
   b6308:	f7ff fe46 	bl	b5f98 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b630c:	2800      	cmp	r0, #0
   b630e:	f47f aeef 	bne.w	b60f0 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6312:	e6a2      	b.n	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6314:	bf14      	ite	ne
   b6316:	f04f 31ff 	movne.w	r1, #4294967295
   b631a:	2100      	moveq	r1, #0
   b631c:	b289      	uxth	r1, r1
   b631e:	e72b      	b.n	b6178 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6320:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6324:	bf94      	ite	ls
   b6326:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b632a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b632e:	8091      	strh	r1, [r2, #4]
   b6330:	e72d      	b.n	b618e <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6332:	4631      	mov	r1, r6
   b6334:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6336:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b633a:	f000 f96d 	bl	b6618 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b633e:	4604      	mov	r4, r0
   b6340:	2800      	cmp	r0, #0
   b6342:	f43f ae8a 	beq.w	b605a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6346:	2220      	movs	r2, #32
   b6348:	4631      	mov	r1, r6
   b634a:	f003 ff23 	bl	ba194 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b634e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6352:	6023      	str	r3, [r4, #0]
   b6354:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6358:	6063      	str	r3, [r4, #4]
   b635a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b635e:	8123      	strh	r3, [r4, #8]
   b6360:	7dfb      	ldrb	r3, [r7, #23]
   b6362:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6364:	783b      	ldrb	r3, [r7, #0]
   b6366:	f003 0318 	and.w	r3, r3, #24
   b636a:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b636c:	4b0f      	ldr	r3, [pc, #60]	; (b63ac <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b636e:	681b      	ldr	r3, [r3, #0]
   b6370:	b19b      	cbz	r3, b639a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6372:	f104 010e 	add.w	r1, r4, #14
   b6376:	f104 0010 	add.w	r0, r4, #16
   b637a:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b637c:	8a23      	ldrh	r3, [r4, #16]
   b637e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6380:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6382:	89e3      	ldrh	r3, [r4, #14]
   b6384:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6386:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6388:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b638c:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6390:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6394:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b6398:	e78e      	b.n	b62b8 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b639a:	2321      	movs	r3, #33	; 0x21
   b639c:	7423      	strb	r3, [r4, #16]
   b639e:	2328      	movs	r3, #40	; 0x28
   b63a0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b63a2:	2308      	movs	r3, #8
   b63a4:	73a6      	strb	r6, [r4, #14]
   b63a6:	73e3      	strb	r3, [r4, #15]
   b63a8:	e7e8      	b.n	b637c <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b63aa:	bf00      	nop
   b63ac:	2003e6b4 	.word	0x2003e6b4

000b63b0 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b63b0:	b538      	push	{r3, r4, r5, lr}
   b63b2:	4604      	mov	r4, r0
   b63b4:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b63b6:	2224      	movs	r2, #36	; 0x24
   b63b8:	2100      	movs	r1, #0
   b63ba:	f003 feeb 	bl	ba194 <memset>

  m_vol = vol;
   b63be:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b63c0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b63c2:	2b10      	cmp	r3, #16
   b63c4:	d003      	beq.n	b63ce <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b63c6:	2b20      	cmp	r3, #32
   b63c8:	d006      	beq.n	b63d8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b63ca:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b63cc:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b63ce:	2320      	movs	r3, #32
  m_flags = F_READ;
   b63d0:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b63d2:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b63d4:	70a0      	strb	r0, [r4, #2]
  return true;
   b63d6:	e7f9      	b.n	b63cc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b63d8:	2340      	movs	r3, #64	; 0x40
   b63da:	e7f9      	b.n	b63d0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b63dc <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b63dc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b63de:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b63e0:	f043 0304 	orr.w	r3, r3, #4
   b63e4:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b63e6:	f100 0210 	add.w	r2, r0, #16
   b63ea:	6880      	ldr	r0, [r0, #8]
   b63ec:	f000 bbf8 	b.w	b6be0 <_ZN9FatVolume15allocateClusterEmPm>

000b63f0 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b63f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b63f4:	7801      	ldrb	r1, [r0, #0]
   b63f6:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b63fa:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b63fc:	d003      	beq.n	b6406 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b63fe:	2600      	movs	r6, #0
}
   b6400:	4630      	mov	r0, r6
   b6402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6406:	6942      	ldr	r2, [r0, #20]
   b6408:	4b17      	ldr	r3, [pc, #92]	; (b6468 <_ZN7FatFile13addDirClusterEv+0x78>)
   b640a:	429a      	cmp	r2, r3
   b640c:	d2f7      	bcs.n	b63fe <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b640e:	f7ff ffe5 	bl	b63dc <_ZN7FatFile10addClusterEv>
   b6412:	4606      	mov	r6, r0
   b6414:	2800      	cmp	r0, #0
   b6416:	d0f2      	beq.n	b63fe <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6418:	6921      	ldr	r1, [r4, #16]
   b641a:	68a0      	ldr	r0, [r4, #8]
   b641c:	f000 fb75 	bl	b6b0a <_ZNK9FatVolume17clusterFirstBlockEm>
   b6420:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6422:	68a0      	ldr	r0, [r4, #8]
   b6424:	2205      	movs	r2, #5
   b6426:	4639      	mov	r1, r7
   b6428:	3024      	adds	r0, #36	; 0x24
   b642a:	f000 fb4b 	bl	b6ac4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b642e:	4680      	mov	r8, r0
   b6430:	2800      	cmp	r0, #0
   b6432:	d0e4      	beq.n	b63fe <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6434:	4629      	mov	r1, r5
   b6436:	f44f 7200 	mov.w	r2, #512	; 0x200
   b643a:	f003 feab 	bl	ba194 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b643e:	2501      	movs	r5, #1
   b6440:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6442:	791a      	ldrb	r2, [r3, #4]
   b6444:	42aa      	cmp	r2, r5
   b6446:	d909      	bls.n	b645c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6448:	6818      	ldr	r0, [r3, #0]
   b644a:	4642      	mov	r2, r8
   b644c:	19e9      	adds	r1, r5, r7
   b644e:	f000 fea6 	bl	b719e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6452:	2800      	cmp	r0, #0
   b6454:	d0d3      	beq.n	b63fe <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6456:	3501      	adds	r5, #1
   b6458:	b2ed      	uxtb	r5, r5
   b645a:	e7f1      	b.n	b6440 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b645c:	6963      	ldr	r3, [r4, #20]
   b645e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6462:	6163      	str	r3, [r4, #20]
  return true;
   b6464:	e7cc      	b.n	b6400 <_ZN7FatFile13addDirClusterEv+0x10>
   b6466:	bf00      	nop
   b6468:	001ffe00 	.word	0x001ffe00

000b646c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b646c:	b510      	push	{r4, lr}
   b646e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6470:	6880      	ldr	r0, [r0, #8]
   b6472:	460a      	mov	r2, r1
   b6474:	3024      	adds	r0, #36	; 0x24
   b6476:	69a1      	ldr	r1, [r4, #24]
   b6478:	f000 fb24 	bl	b6ac4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b647c:	b120      	cbz	r0, b6488 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b647e:	88a3      	ldrh	r3, [r4, #4]
   b6480:	f003 030f 	and.w	r3, r3, #15
   b6484:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6488:	bd10      	pop	{r4, pc}

000b648a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b648a:	7803      	ldrb	r3, [r0, #0]
   b648c:	b90b      	cbnz	r3, b6492 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b648e:	f7ff bf8f 	b.w	b63b0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6492:	2000      	movs	r0, #0
   b6494:	4770      	bx	lr

000b6496 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b649a:	7803      	ldrb	r3, [r0, #0]
   b649c:	4604      	mov	r4, r0
   b649e:	4688      	mov	r8, r1
   b64a0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b64a2:	2b00      	cmp	r3, #0
   b64a4:	d05d      	beq.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
   b64a6:	7882      	ldrb	r2, [r0, #2]
   b64a8:	07d1      	lsls	r1, r2, #31
   b64aa:	d55a      	bpl.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b64ac:	071a      	lsls	r2, r3, #28
   b64ae:	d52d      	bpl.n	b650c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b64b0:	69c3      	ldr	r3, [r0, #28]
   b64b2:	6942      	ldr	r2, [r0, #20]
   b64b4:	1a9b      	subs	r3, r3, r2
   b64b6:	429d      	cmp	r5, r3
   b64b8:	bf28      	it	cs
   b64ba:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b64bc:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b64be:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b64c2:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b64c6:	2e00      	cmp	r6, #0
   b64c8:	f000 808f 	beq.w	b65ea <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b64cc:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b64ce:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b64d0:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b64d2:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b64d4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b64d8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b64dc:	d51f      	bpl.n	b651e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b64de:	6a00      	ldr	r0, [r0, #32]
   b64e0:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b64e2:	68a0      	ldr	r0, [r4, #8]
   b64e4:	f1ba 0f00 	cmp.w	sl, #0
   b64e8:	d142      	bne.n	b6570 <_ZN7FatFile4readEPvj+0xda>
   b64ea:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b64ee:	d33f      	bcc.n	b6570 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b64f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b64f2:	4299      	cmp	r1, r3
   b64f4:	d03c      	beq.n	b6570 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b64f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b64fa:	d252      	bcs.n	b65a2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b64fc:	6800      	ldr	r0, [r0, #0]
   b64fe:	4642      	mov	r2, r8
   b6500:	f000 fdc4 	bl	b708c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6504:	b368      	cbz	r0, b6562 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6506:	f44f 7700 	mov.w	r7, #512	; 0x200
   b650a:	e044      	b.n	b6596 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b650c:	069b      	lsls	r3, r3, #26
   b650e:	d5d5      	bpl.n	b64bc <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b6510:	6883      	ldr	r3, [r0, #8]
   b6512:	891a      	ldrh	r2, [r3, #8]
   b6514:	6943      	ldr	r3, [r0, #20]
   b6516:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b651a:	b29b      	uxth	r3, r3
   b651c:	e7cb      	b.n	b64b6 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b651e:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6522:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6526:	f1ba 0f00 	cmp.w	sl, #0
   b652a:	d108      	bne.n	b653e <_ZN7FatFile4readEPvj+0xa8>
   b652c:	f1b9 0f00 	cmp.w	r9, #0
   b6530:	d105      	bne.n	b653e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6532:	b95b      	cbnz	r3, b654c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6534:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6536:	bf4c      	ite	mi
   b6538:	6a03      	ldrmi	r3, [r0, #32]
   b653a:	6a23      	ldrpl	r3, [r4, #32]
   b653c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b653e:	6921      	ldr	r1, [r4, #16]
   b6540:	68a0      	ldr	r0, [r4, #8]
   b6542:	f000 fae2 	bl	b6b0a <_ZNK9FatVolume17clusterFirstBlockEm>
   b6546:	eb09 0100 	add.w	r1, r9, r0
   b654a:	e7ca      	b.n	b64e2 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b654c:	6921      	ldr	r1, [r4, #16]
   b654e:	465a      	mov	r2, fp
   b6550:	f000 fae1 	bl	b6b16 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6554:	2800      	cmp	r0, #0
   b6556:	db04      	blt.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6558:	d1f1      	bne.n	b653e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b655a:	7823      	ldrb	r3, [r4, #0]
   b655c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6560:	d143      	bne.n	b65ea <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6562:	7863      	ldrb	r3, [r4, #1]
   b6564:	f043 0302 	orr.w	r3, r3, #2
   b6568:	7063      	strb	r3, [r4, #1]
  return -1;
   b656a:	f04f 30ff 	mov.w	r0, #4294967295
   b656e:	e03d      	b.n	b65ec <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6570:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6574:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6576:	f04f 0200 	mov.w	r2, #0
   b657a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b657e:	bf28      	it	cs
   b6580:	4637      	movcs	r7, r6
   b6582:	f000 fa9f 	bl	b6ac4 <_ZN8FatCache4readEmh>
      if (!pc) {
   b6586:	2800      	cmp	r0, #0
   b6588:	d0eb      	beq.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b658a:	eb00 010a 	add.w	r1, r0, sl
   b658e:	463a      	mov	r2, r7
   b6590:	4640      	mov	r0, r8
   b6592:	f003 fdf1 	bl	ba178 <memcpy>
    m_curPosition += n;
   b6596:	6963      	ldr	r3, [r4, #20]
   b6598:	443b      	add	r3, r7
    dst += n;
   b659a:	44b8      	add	r8, r7
    m_curPosition += n;
   b659c:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b659e:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b65a0:	e791      	b.n	b64c6 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b65a2:	7822      	ldrb	r2, [r4, #0]
   b65a4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b65a6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b65aa:	d406      	bmi.n	b65ba <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b65ac:	7902      	ldrb	r2, [r0, #4]
   b65ae:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b65b2:	b2d2      	uxtb	r2, r2
   b65b4:	4592      	cmp	sl, r2
   b65b6:	bf28      	it	cs
   b65b8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b65ba:	4299      	cmp	r1, r3
      n = 512*nb;
   b65bc:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b65c0:	d208      	bcs.n	b65d4 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b65c2:	68a0      	ldr	r0, [r4, #8]
   b65c4:	4653      	mov	r3, sl
   b65c6:	6800      	ldr	r0, [r0, #0]
   b65c8:	4642      	mov	r2, r8
   b65ca:	f000 fda7 	bl	b711c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b65ce:	2800      	cmp	r0, #0
   b65d0:	d1e1      	bne.n	b6596 <_ZN7FatFile4readEPvj+0x100>
   b65d2:	e7c6      	b.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b65d4:	4453      	add	r3, sl
   b65d6:	428b      	cmp	r3, r1
   b65d8:	d9f3      	bls.n	b65c2 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b65da:	3024      	adds	r0, #36	; 0x24
   b65dc:	9101      	str	r1, [sp, #4]
   b65de:	f000 fa49 	bl	b6a74 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b65e2:	9901      	ldr	r1, [sp, #4]
   b65e4:	2800      	cmp	r0, #0
   b65e6:	d1ec      	bne.n	b65c2 <_ZN7FatFile4readEPvj+0x12c>
   b65e8:	e7bb      	b.n	b6562 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b65ea:	1ba8      	subs	r0, r5, r6
}
   b65ec:	b003      	add	sp, #12
   b65ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b65f2 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b65f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b65f4:	2201      	movs	r2, #1
   b65f6:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b65fa:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b65fe:	4604      	mov	r4, r0
   b6600:	f7ff ff49 	bl	b6496 <_ZN7FatFile4readEPvj>
   b6604:	2801      	cmp	r0, #1
   b6606:	bf0a      	itet	eq
   b6608:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b660c:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b6610:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6614:	b002      	add	sp, #8
   b6616:	bd70      	pop	{r4, r5, r6, pc}

000b6618 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b661a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b661c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6620:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6622:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6626:	d000      	beq.n	b662a <_ZN7FatFile12readDirCacheEb+0x12>
   b6628:	b999      	cbnz	r1, b6652 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b662a:	2201      	movs	r2, #1
   b662c:	f10d 0107 	add.w	r1, sp, #7
   b6630:	4620      	mov	r0, r4
   b6632:	f7ff ff30 	bl	b6496 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6636:	b240      	sxtb	r0, r0
   b6638:	2801      	cmp	r0, #1
   b663a:	d002      	beq.n	b6642 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b663c:	2000      	movs	r0, #0
}
   b663e:	b003      	add	sp, #12
   b6640:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6642:	6963      	ldr	r3, [r4, #20]
   b6644:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6646:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6648:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b664a:	3030      	adds	r0, #48	; 0x30
   b664c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6650:	e7f5      	b.n	b663e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6652:	3320      	adds	r3, #32
   b6654:	e7f7      	b.n	b6646 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6656 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b665a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b665c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b665e:	4604      	mov	r4, r0
   b6660:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6662:	b162      	cbz	r2, b667e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6664:	6940      	ldr	r0, [r0, #20]
   b6666:	4288      	cmp	r0, r1
   b6668:	d002      	beq.n	b6670 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b666a:	b919      	cbnz	r1, b6674 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b666c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b666e:	6165      	str	r5, [r4, #20]
    return true;
   b6670:	2001      	movs	r0, #1
   b6672:	e006      	b.n	b6682 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6674:	0716      	lsls	r6, r2, #28
   b6676:	d506      	bpl.n	b6686 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6678:	69e3      	ldr	r3, [r4, #28]
   b667a:	428b      	cmp	r3, r1
   b667c:	d20b      	bcs.n	b6696 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b667e:	6127      	str	r7, [r4, #16]
  return false;
   b6680:	2000      	movs	r0, #0
}
   b6682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6686:	0691      	lsls	r1, r2, #26
   b6688:	d505      	bpl.n	b6696 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b668a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b668c:	891b      	ldrh	r3, [r3, #8]
   b668e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6692:	d9ec      	bls.n	b666e <_ZN7FatFile7seekSetEm+0x18>
   b6694:	e7f3      	b.n	b667e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6696:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b669a:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b669e:	1e43      	subs	r3, r0, #1
   b66a0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b66a4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b66a6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b66a8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b66aa:	42b3      	cmp	r3, r6
   b66ac:	d800      	bhi.n	b66b0 <_ZN7FatFile7seekSetEm+0x5a>
   b66ae:	b998      	cbnz	r0, b66d8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b66b0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b66b2:	bf4c      	ite	mi
   b66b4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b66b8:	6a23      	ldrpl	r3, [r4, #32]
   b66ba:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b66bc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b66c0:	2e00      	cmp	r6, #0
   b66c2:	d0d4      	beq.n	b666e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b66c4:	6921      	ldr	r1, [r4, #16]
   b66c6:	68a0      	ldr	r0, [r4, #8]
   b66c8:	4642      	mov	r2, r8
   b66ca:	f000 fa24 	bl	b6b16 <_ZN9FatVolume6fatGetEmPm>
   b66ce:	2800      	cmp	r0, #0
   b66d0:	f106 36ff 	add.w	r6, r6, #4294967295
   b66d4:	dcf4      	bgt.n	b66c0 <_ZN7FatFile7seekSetEm+0x6a>
   b66d6:	e7d2      	b.n	b667e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b66d8:	1af6      	subs	r6, r6, r3
   b66da:	e7ef      	b.n	b66bc <_ZN7FatFile7seekSetEm+0x66>

000b66dc <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b66dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66de:	460f      	mov	r7, r1
   b66e0:	4604      	mov	r4, r0
   b66e2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b66e4:	2100      	movs	r1, #0
   b66e6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b66e8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b66ea:	f003 fd53 	bl	ba194 <memset>
  m_vol = dirFile->m_vol;
   b66ee:	68b8      	ldr	r0, [r7, #8]
   b66f0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b66f2:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b66f4:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b66f8:	6a3b      	ldr	r3, [r7, #32]
   b66fa:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b66fc:	016a      	lsls	r2, r5, #5
   b66fe:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6702:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6706:	071f      	lsls	r7, r3, #28
   b6708:	d444      	bmi.n	b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b670a:	f003 0317 	and.w	r3, r3, #23
   b670e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b6710:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6714:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6718:	bf04      	itt	eq
   b671a:	f043 0308 	orreq.w	r3, r3, #8
   b671e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b6720:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6724:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6726:	f006 0303 	and.w	r3, r6, #3
   b672a:	2b01      	cmp	r3, #1
   b672c:	d02c      	beq.n	b6788 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b672e:	2b02      	cmp	r3, #2
   b6730:	d028      	beq.n	b6784 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6732:	bb7b      	cbnz	r3, b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6734:	0571      	lsls	r1, r6, #21
   b6736:	d42d      	bmi.n	b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6738:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b673a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b673c:	78a1      	ldrb	r1, [r4, #2]
   b673e:	078b      	lsls	r3, r1, #30
   b6740:	d504      	bpl.n	b674c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6742:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6744:	06df      	lsls	r7, r3, #27
   b6746:	d425      	bmi.n	b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6748:	07dd      	lsls	r5, r3, #31
   b674a:	d423      	bmi.n	b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b674c:	11b3      	asrs	r3, r6, #6
   b674e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6752:	f006 0508 	and.w	r5, r6, #8
   b6756:	432b      	orrs	r3, r5
   b6758:	430b      	orrs	r3, r1
   b675a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b675c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b675e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6760:	1883      	adds	r3, r0, r2
   b6762:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6766:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b676a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b676e:	0572      	lsls	r2, r6, #21
   b6770:	d513      	bpl.n	b679a <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6772:	b959      	cbnz	r1, b678c <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6774:	78a3      	ldrb	r3, [r4, #2]
   b6776:	f043 0304 	orr.w	r3, r3, #4
   b677a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b677c:	0473      	lsls	r3, r6, #17
   b677e:	d410      	bmi.n	b67a2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6780:	2001      	movs	r0, #1
}
   b6782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b6784:	2303      	movs	r3, #3
   b6786:	e7d8      	b.n	b673a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6788:	2302      	movs	r3, #2
   b678a:	e7d6      	b.n	b673a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b678c:	f000 fa63 	bl	b6c56 <_ZN9FatVolume9freeChainEm>
   b6790:	2800      	cmp	r0, #0
   b6792:	d1ef      	bne.n	b6774 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b6794:	2000      	movs	r0, #0
   b6796:	7020      	strb	r0, [r4, #0]
  return false;
   b6798:	e7f3      	b.n	b6782 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b679a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b679e:	61e3      	str	r3, [r4, #28]
   b67a0:	e7ec      	b.n	b677c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b67a2:	69e1      	ldr	r1, [r4, #28]
   b67a4:	4620      	mov	r0, r4
   b67a6:	f7ff ff56 	bl	b6656 <_ZN7FatFile7seekSetEm>
   b67aa:	2800      	cmp	r0, #0
   b67ac:	d1e8      	bne.n	b6780 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b67ae:	e7f1      	b.n	b6794 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b67b0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b67b0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b67b2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b67b4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b67b6:	b90b      	cbnz	r3, b67bc <_ZN7FatFile4syncEv+0xc>
    return true;
   b67b8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b67ba:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b67bc:	7883      	ldrb	r3, [r0, #2]
   b67be:	075a      	lsls	r2, r3, #29
   b67c0:	d523      	bpl.n	b680a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b67c2:	2101      	movs	r1, #1
   b67c4:	f7ff fe52 	bl	b646c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b67c8:	4605      	mov	r5, r0
   b67ca:	b928      	cbnz	r0, b67d8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b67cc:	7863      	ldrb	r3, [r4, #1]
   b67ce:	f043 0301 	orr.w	r3, r3, #1
   b67d2:	7063      	strb	r3, [r4, #1]
  return false;
   b67d4:	2000      	movs	r0, #0
   b67d6:	e7f0      	b.n	b67ba <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b67d8:	7803      	ldrb	r3, [r0, #0]
   b67da:	2be5      	cmp	r3, #229	; 0xe5
   b67dc:	d0f6      	beq.n	b67cc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b67de:	7823      	ldrb	r3, [r4, #0]
   b67e0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b67e2:	bf44      	itt	mi
   b67e4:	69e3      	ldrmi	r3, [r4, #28]
   b67e6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b67e8:	6a23      	ldr	r3, [r4, #32]
   b67ea:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b67ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b67ee:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b67f0:	4b09      	ldr	r3, [pc, #36]	; (b6818 <_ZN7FatFile4syncEv+0x68>)
   b67f2:	681b      	ldr	r3, [r3, #0]
   b67f4:	b12b      	cbz	r3, b6802 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b67f6:	f100 0116 	add.w	r1, r0, #22
   b67fa:	3018      	adds	r0, #24
   b67fc:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b67fe:	8b2b      	ldrh	r3, [r5, #24]
   b6800:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6802:	78a3      	ldrb	r3, [r4, #2]
   b6804:	f023 0304 	bic.w	r3, r3, #4
   b6808:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b680a:	68a0      	ldr	r0, [r4, #8]
   b680c:	f7ff faca 	bl	b5da4 <_ZN9FatVolume9cacheSyncEv>
   b6810:	2800      	cmp	r0, #0
   b6812:	d0db      	beq.n	b67cc <_ZN7FatFile4syncEv+0x1c>
   b6814:	e7d0      	b.n	b67b8 <_ZN7FatFile4syncEv+0x8>
   b6816:	bf00      	nop
   b6818:	2003e6b4 	.word	0x2003e6b4

000b681c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b681c:	b510      	push	{r4, lr}
   b681e:	4604      	mov	r4, r0
  bool rtn = sync();
   b6820:	f7ff ffc6 	bl	b67b0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6824:	2300      	movs	r3, #0
   b6826:	7023      	strb	r3, [r4, #0]
}
   b6828:	bd10      	pop	{r4, pc}

000b682a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b682a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b682c:	b093      	sub	sp, #76	; 0x4c
   b682e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6830:	2300      	movs	r3, #0
   b6832:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6834:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6836:	9201      	str	r2, [sp, #4]
   b6838:	4606      	mov	r6, r0
   b683a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b683c:	b113      	cbz	r3, b6844 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b683e:	2000      	movs	r0, #0
}
   b6840:	b013      	add	sp, #76	; 0x4c
   b6842:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6844:	780b      	ldrb	r3, [r1, #0]
   b6846:	f013 0f70 	tst.w	r3, #112	; 0x70
   b684a:	d0f8      	beq.n	b683e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b684c:	7813      	ldrb	r3, [r2, #0]
   b684e:	2b2f      	cmp	r3, #47	; 0x2f
   b6850:	d112      	bne.n	b6878 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6852:	9a01      	ldr	r2, [sp, #4]
   b6854:	7813      	ldrb	r3, [r2, #0]
   b6856:	2b2f      	cmp	r3, #47	; 0x2f
   b6858:	d102      	bne.n	b6860 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b685a:	3201      	adds	r2, #1
   b685c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b685e:	e7f8      	b.n	b6852 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6860:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6862:	b91b      	cbnz	r3, b686c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6864:	4630      	mov	r0, r6
   b6866:	f7ff fe10 	bl	b648a <_ZN7FatFile8openRootEP9FatVolume>
   b686a:	e7e9      	b.n	b6840 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b686c:	a809      	add	r0, sp, #36	; 0x24
   b686e:	f7ff fd9f 	bl	b63b0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6872:	2800      	cmp	r0, #0
   b6874:	d0e3      	beq.n	b683e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6876:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6878:	9801      	ldr	r0, [sp, #4]
   b687a:	aa01      	add	r2, sp, #4
   b687c:	a903      	add	r1, sp, #12
   b687e:	f7ff faad 	bl	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6882:	2800      	cmp	r0, #0
   b6884:	d0db      	beq.n	b683e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6886:	9b01      	ldr	r3, [sp, #4]
   b6888:	781b      	ldrb	r3, [r3, #0]
   b688a:	b19b      	cbz	r3, b68b4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b688c:	2300      	movs	r3, #0
   b688e:	aa03      	add	r2, sp, #12
   b6890:	4621      	mov	r1, r4
   b6892:	4630      	mov	r0, r6
   b6894:	f7ff fbd4 	bl	b6040 <_ZN7FatFile4openEPS_P7fname_ti>
   b6898:	2800      	cmp	r0, #0
   b689a:	d0d0      	beq.n	b683e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b689c:	4635      	mov	r5, r6
   b689e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68a0:	ac09      	add	r4, sp, #36	; 0x24
   b68a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68a8:	682b      	ldr	r3, [r5, #0]
   b68aa:	6023      	str	r3, [r4, #0]
    close();
   b68ac:	4630      	mov	r0, r6
   b68ae:	f7ff ffb5 	bl	b681c <_ZN7FatFile5closeEv>
  while (1) {
   b68b2:	e7e0      	b.n	b6876 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b68b4:	463b      	mov	r3, r7
   b68b6:	aa03      	add	r2, sp, #12
   b68b8:	4621      	mov	r1, r4
   b68ba:	4630      	mov	r0, r6
   b68bc:	f7ff fbc0 	bl	b6040 <_ZN7FatFile4openEPS_P7fname_ti>
   b68c0:	e7be      	b.n	b6840 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b68c4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b68c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68c8:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b68ca:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68cc:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b68ce:	4604      	mov	r4, r0
   b68d0:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68d2:	d55b      	bpl.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
   b68d4:	7883      	ldrb	r3, [r0, #2]
   b68d6:	079a      	lsls	r2, r3, #30
   b68d8:	d558      	bpl.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b68da:	071b      	lsls	r3, r3, #28
   b68dc:	d451      	bmi.n	b6982 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b68de:	6963      	ldr	r3, [r4, #20]
   b68e0:	43db      	mvns	r3, r3
   b68e2:	42bb      	cmp	r3, r7
   b68e4:	d352      	bcc.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
   b68e6:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b68e8:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b68ec:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b68ee:	f1b8 0f00 	cmp.w	r8, #0
   b68f2:	f000 8091 	beq.w	b6a18 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b68f6:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b68f8:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b68fa:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b68fe:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6902:	d10e      	bne.n	b6922 <_ZN7FatFile5writeEPKvj+0x5e>
   b6904:	b96d      	cbnz	r5, b6922 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6906:	6921      	ldr	r1, [r4, #16]
   b6908:	2900      	cmp	r1, #0
   b690a:	d046      	beq.n	b699a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b690c:	4652      	mov	r2, sl
   b690e:	f000 f902 	bl	b6b16 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6912:	2800      	cmp	r0, #0
   b6914:	db3a      	blt.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6916:	d104      	bne.n	b6922 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6918:	4620      	mov	r0, r4
   b691a:	f7ff fd5f 	bl	b63dc <_ZN7FatFile10addClusterEv>
   b691e:	2800      	cmp	r0, #0
   b6920:	d034      	beq.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6922:	6921      	ldr	r1, [r4, #16]
   b6924:	68a0      	ldr	r0, [r4, #8]
   b6926:	f000 f8f0 	bl	b6b0a <_ZNK9FatVolume17clusterFirstBlockEm>
   b692a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b692c:	68a0      	ldr	r0, [r4, #8]
   b692e:	b915      	cbnz	r5, b6936 <_ZN7FatFile5writeEPKvj+0x72>
   b6930:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6934:	d23f      	bcs.n	b69b6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6936:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b693a:	4546      	cmp	r6, r8
   b693c:	bf28      	it	cs
   b693e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6940:	2d00      	cmp	r5, #0
   b6942:	d136      	bne.n	b69b2 <_ZN7FatFile5writeEPKvj+0xee>
   b6944:	6962      	ldr	r2, [r4, #20]
   b6946:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6948:	429a      	cmp	r2, r3
   b694a:	bf34      	ite	cc
   b694c:	2201      	movcc	r2, #1
   b694e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6950:	3024      	adds	r0, #36	; 0x24
   b6952:	f000 f8b7 	bl	b6ac4 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6956:	b1c8      	cbz	r0, b698c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6958:	4428      	add	r0, r5
   b695a:	4632      	mov	r2, r6
   b695c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b695e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6960:	f003 fc0a 	bl	ba178 <memcpy>
      if (512 == (n + blockOffset)) {
   b6964:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6968:	d104      	bne.n	b6974 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b696a:	68a0      	ldr	r0, [r4, #8]
   b696c:	3024      	adds	r0, #36	; 0x24
   b696e:	f000 f881 	bl	b6a74 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6972:	b158      	cbz	r0, b698c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6974:	6963      	ldr	r3, [r4, #20]
   b6976:	4433      	add	r3, r6
   b6978:	6163      	str	r3, [r4, #20]
    src += n;
   b697a:	44b1      	add	r9, r6
    nToWrite -= n;
   b697c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6980:	e7b4      	b.n	b68ec <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6982:	69c1      	ldr	r1, [r0, #28]
   b6984:	f7ff fe67 	bl	b6656 <_ZN7FatFile7seekSetEm>
   b6988:	2800      	cmp	r0, #0
   b698a:	d1a8      	bne.n	b68de <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b698c:	7863      	ldrb	r3, [r4, #1]
   b698e:	f043 0301 	orr.w	r3, r3, #1
   b6992:	7063      	strb	r3, [r4, #1]
  return -1;
   b6994:	f04f 30ff 	mov.w	r0, #4294967295
   b6998:	e050      	b.n	b6a3c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b699a:	6a23      	ldr	r3, [r4, #32]
   b699c:	b93b      	cbnz	r3, b69ae <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b699e:	4620      	mov	r0, r4
   b69a0:	f7ff fd1c 	bl	b63dc <_ZN7FatFile10addClusterEv>
   b69a4:	2800      	cmp	r0, #0
   b69a6:	d0f1      	beq.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b69a8:	6923      	ldr	r3, [r4, #16]
   b69aa:	6223      	str	r3, [r4, #32]
   b69ac:	e7b9      	b.n	b6922 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b69ae:	6123      	str	r3, [r4, #16]
   b69b0:	e7b7      	b.n	b6922 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b69b2:	2201      	movs	r2, #1
   b69b4:	e7cc      	b.n	b6950 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b69b6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b69ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b69bc:	d31b      	bcc.n	b69f6 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b69be:	f890 c004 	ldrb.w	ip, [r0, #4]
   b69c2:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b69c6:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b69c8:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b69cc:	4573      	cmp	r3, lr
   b69ce:	bf28      	it	cs
   b69d0:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69d2:	4291      	cmp	r1, r2
      n = 512*nb;
   b69d4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69d8:	d307      	bcc.n	b69ea <_ZN7FatFile5writeEPKvj+0x126>
   b69da:	441a      	add	r2, r3
   b69dc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b69de:	bf82      	ittt	hi
   b69e0:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b69e4:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b69e8:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b69ea:	68a5      	ldr	r5, [r4, #8]
   b69ec:	464a      	mov	r2, r9
   b69ee:	6828      	ldr	r0, [r5, #0]
   b69f0:	f000 fc4b 	bl	b728a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b69f4:	e7bd      	b.n	b6972 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b69f6:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b69f8:	bf02      	ittt	eq
   b69fa:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b69fe:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6a02:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6a04:	68a3      	ldr	r3, [r4, #8]
   b6a06:	464a      	mov	r2, r9
   b6a08:	6818      	ldr	r0, [r3, #0]
   b6a0a:	f000 fbc8 	bl	b719e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6a0e:	2800      	cmp	r0, #0
   b6a10:	d0bc      	beq.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6a12:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6a16:	e7ad      	b.n	b6974 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6a18:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a1a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6a1c:	42b2      	cmp	r2, r6
   b6a1e:	d204      	bcs.n	b6a2a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6a20:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a22:	f043 0304 	orr.w	r3, r3, #4
   b6a26:	70a3      	strb	r3, [r4, #2]
   b6a28:	e003      	b.n	b6a32 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6a2a:	4a08      	ldr	r2, [pc, #32]	; (b6a4c <_ZN7FatFile5writeEPKvj+0x188>)
   b6a2c:	6812      	ldr	r2, [r2, #0]
   b6a2e:	2a00      	cmp	r2, #0
   b6a30:	d1f7      	bne.n	b6a22 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6a32:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6a36:	2b00      	cmp	r3, #0
   b6a38:	db02      	blt.n	b6a40 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6a3a:	4638      	mov	r0, r7
}
   b6a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6a40:	4620      	mov	r0, r4
   b6a42:	f7ff feb5 	bl	b67b0 <_ZN7FatFile4syncEv>
   b6a46:	2800      	cmp	r0, #0
   b6a48:	d1f7      	bne.n	b6a3a <_ZN7FatFile5writeEPKvj+0x176>
   b6a4a:	e79f      	b.n	b698c <_ZN7FatFile5writeEPKvj+0xc8>
   b6a4c:	2003e6b4 	.word	0x2003e6b4

000b6a50 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a50:	b513      	push	{r0, r1, r4, lr}
   b6a52:	4604      	mov	r4, r0
    }
   b6a54:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a56:	b159      	cbz	r1, b6a70 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a58:	9101      	str	r1, [sp, #4]
   b6a5a:	f003 fbe3 	bl	ba224 <strlen>
   b6a5e:	6823      	ldr	r3, [r4, #0]
   b6a60:	9901      	ldr	r1, [sp, #4]
   b6a62:	68db      	ldr	r3, [r3, #12]
   b6a64:	4602      	mov	r2, r0
   b6a66:	4620      	mov	r0, r4
    }
   b6a68:	b002      	add	sp, #8
   b6a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a6e:	4718      	bx	r3
    }
   b6a70:	b002      	add	sp, #8
   b6a72:	bd10      	pop	{r4, pc}

000b6a74 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6a76:	7803      	ldrb	r3, [r0, #0]
   b6a78:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6a7a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6a7c:	d520      	bpl.n	b6ac0 <_ZN8FatCache4syncEv+0x4c>
   b6a7e:	6843      	ldr	r3, [r0, #4]
   b6a80:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6a82:	f100 020c 	add.w	r2, r0, #12
   b6a86:	6818      	ldr	r0, [r3, #0]
   b6a88:	9201      	str	r2, [sp, #4]
   b6a8a:	f000 fb88 	bl	b719e <_ZN9SdSpiCard10writeBlockEmPKh>
   b6a8e:	9a01      	ldr	r2, [sp, #4]
   b6a90:	4605      	mov	r5, r0
   b6a92:	b918      	cbnz	r0, b6a9c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6a94:	2500      	movs	r5, #0
}
   b6a96:	4628      	mov	r0, r5
   b6a98:	b003      	add	sp, #12
   b6a9a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6a9c:	7823      	ldrb	r3, [r4, #0]
   b6a9e:	079b      	lsls	r3, r3, #30
   b6aa0:	d404      	bmi.n	b6aac <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6aa2:	7823      	ldrb	r3, [r4, #0]
   b6aa4:	f023 0301 	bic.w	r3, r3, #1
   b6aa8:	7023      	strb	r3, [r4, #0]
   b6aaa:	e7f4      	b.n	b6a96 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6aac:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6ab0:	6919      	ldr	r1, [r3, #16]
   b6ab2:	4401      	add	r1, r0
   b6ab4:	6818      	ldr	r0, [r3, #0]
   b6ab6:	f000 fb72 	bl	b719e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6aba:	2800      	cmp	r0, #0
   b6abc:	d1f1      	bne.n	b6aa2 <_ZN8FatCache4syncEv+0x2e>
   b6abe:	e7e9      	b.n	b6a94 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6ac0:	2501      	movs	r5, #1
   b6ac2:	e7e8      	b.n	b6a96 <_ZN8FatCache4syncEv+0x22>

000b6ac4 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6ac4:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6ac6:	6883      	ldr	r3, [r0, #8]
   b6ac8:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6aca:	4604      	mov	r4, r0
   b6acc:	460e      	mov	r6, r1
   b6ace:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6ad0:	d009      	beq.n	b6ae6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6ad2:	f7ff ffcf 	bl	b6a74 <_ZN8FatCache4syncEv>
   b6ad6:	b908      	cbnz	r0, b6adc <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6ad8:	2000      	movs	r0, #0
}
   b6ada:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6adc:	076b      	lsls	r3, r5, #29
   b6ade:	d50a      	bpl.n	b6af6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6ae0:	2300      	movs	r3, #0
   b6ae2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6ae4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6ae6:	7822      	ldrb	r2, [r4, #0]
   b6ae8:	f005 0503 	and.w	r5, r5, #3
   b6aec:	4620      	mov	r0, r4
   b6aee:	4315      	orrs	r5, r2
   b6af0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6af4:	e7f1      	b.n	b6ada <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6af6:	6863      	ldr	r3, [r4, #4]
   b6af8:	f104 020c 	add.w	r2, r4, #12
   b6afc:	6818      	ldr	r0, [r3, #0]
   b6afe:	4631      	mov	r1, r6
   b6b00:	f000 fac4 	bl	b708c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6b04:	2800      	cmp	r0, #0
   b6b06:	d1eb      	bne.n	b6ae0 <_ZN8FatCache4readEmh+0x1c>
   b6b08:	e7e6      	b.n	b6ad8 <_ZN8FatCache4readEmh+0x14>

000b6b0a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6b0a:	7983      	ldrb	r3, [r0, #6]
   b6b0c:	6940      	ldr	r0, [r0, #20]
   b6b0e:	3902      	subs	r1, #2
   b6b10:	4099      	lsls	r1, r3
}
   b6b12:	4408      	add	r0, r1
   b6b14:	4770      	bx	lr

000b6b16 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b16:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6b18:	b570      	push	{r4, r5, r6, lr}
   b6b1a:	4605      	mov	r5, r0
   b6b1c:	460c      	mov	r4, r1
   b6b1e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b20:	d802      	bhi.n	b6b28 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6b22:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6b26:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b28:	69c3      	ldr	r3, [r0, #28]
   b6b2a:	428b      	cmp	r3, r1
   b6b2c:	d3f9      	bcc.n	b6b22 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6b2e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6b30:	2b20      	cmp	r3, #32
   b6b32:	d116      	bne.n	b6b62 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6b34:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6b36:	2202      	movs	r2, #2
   b6b38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6b3c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6b40:	f7ff ffc0 	bl	b6ac4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6b44:	2800      	cmp	r0, #0
   b6b46:	d0ec      	beq.n	b6b22 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6b48:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6b4c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6b50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6b54:	69ea      	ldr	r2, [r5, #28]
   b6b56:	429a      	cmp	r2, r3
  *value = next;
   b6b58:	bf26      	itte	cs
   b6b5a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6b5c:	2001      	movcs	r0, #1
    return 0;
   b6b5e:	2000      	movcc	r0, #0
   b6b60:	e7e1      	b.n	b6b26 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6b62:	2b10      	cmp	r3, #16
   b6b64:	d1dd      	bne.n	b6b22 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6b66:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6b6a:	6981      	ldr	r1, [r0, #24]
   b6b6c:	2202      	movs	r2, #2
   b6b6e:	4419      	add	r1, r3
   b6b70:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6b74:	f7ff ffa6 	bl	b6ac4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6b78:	2800      	cmp	r0, #0
   b6b7a:	d0d2      	beq.n	b6b22 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6b7c:	b2e4      	uxtb	r4, r4
   b6b7e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6b82:	e7e7      	b.n	b6b54 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6b84 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b84:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6b86:	b538      	push	{r3, r4, r5, lr}
   b6b88:	460c      	mov	r4, r1
   b6b8a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b8c:	d801      	bhi.n	b6b92 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6b8e:	2000      	movs	r0, #0
}
   b6b90:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b92:	69c3      	ldr	r3, [r0, #28]
   b6b94:	428b      	cmp	r3, r1
   b6b96:	d3fa      	bcc.n	b6b8e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6b98:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6b9a:	2b20      	cmp	r3, #32
   b6b9c:	d10f      	bne.n	b6bbe <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6b9e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6ba0:	2203      	movs	r2, #3
   b6ba2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6ba6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6baa:	f7ff ff8b 	bl	b6ac4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6bae:	2800      	cmp	r0, #0
   b6bb0:	d0ed      	beq.n	b6b8e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6bb2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6bb6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6bba:	2001      	movs	r0, #1
   b6bbc:	e7e8      	b.n	b6b90 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6bbe:	2b10      	cmp	r3, #16
   b6bc0:	d1e5      	bne.n	b6b8e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6bc2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6bc6:	6981      	ldr	r1, [r0, #24]
   b6bc8:	2203      	movs	r2, #3
   b6bca:	4419      	add	r1, r3
   b6bcc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6bd0:	f7ff ff78 	bl	b6ac4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6bd4:	2800      	cmp	r0, #0
   b6bd6:	d0da      	beq.n	b6b8e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6bd8:	b2e4      	uxtb	r4, r4
   b6bda:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6bde:	e7ec      	b.n	b6bba <_ZN9FatVolume6fatPutEmm+0x36>

000b6be0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6be0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6be4:	68c4      	ldr	r4, [r0, #12]
   b6be6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6be8:	4605      	mov	r5, r0
   b6bea:	460e      	mov	r6, r1
   b6bec:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6bee:	d301      	bcc.n	b6bf4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6bf0:	2701      	movs	r7, #1
   b6bf2:	e001      	b.n	b6bf8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6bf4:	460c      	mov	r4, r1
    setStart = false;
   b6bf6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6bf8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6bfa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6bfc:	42a3      	cmp	r3, r4
   b6bfe:	d202      	bcs.n	b6c06 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6c00:	b9c7      	cbnz	r7, b6c34 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6c02:	68ec      	ldr	r4, [r5, #12]
   b6c04:	e7f4      	b.n	b6bf0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6c06:	42a6      	cmp	r6, r4
   b6c08:	d014      	beq.n	b6c34 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6c0a:	aa01      	add	r2, sp, #4
   b6c0c:	4621      	mov	r1, r4
   b6c0e:	4628      	mov	r0, r5
   b6c10:	f7ff ff81 	bl	b6b16 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6c14:	2800      	cmp	r0, #0
   b6c16:	db0d      	blt.n	b6c34 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6c18:	d0ee      	beq.n	b6bf8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6c1a:	9b01      	ldr	r3, [sp, #4]
   b6c1c:	2b00      	cmp	r3, #0
   b6c1e:	d1eb      	bne.n	b6bf8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6c20:	b107      	cbz	r7, b6c24 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6c22:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6c24:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6c28:	4621      	mov	r1, r4
   b6c2a:	4628      	mov	r0, r5
   b6c2c:	f7ff ffaa 	bl	b6b84 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6c30:	4607      	mov	r7, r0
   b6c32:	b920      	cbnz	r0, b6c3e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6c34:	2700      	movs	r7, #0
}
   b6c36:	4638      	mov	r0, r7
   b6c38:	b002      	add	sp, #8
   b6c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6c3e:	b916      	cbnz	r6, b6c46 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6c40:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6c44:	e7f7      	b.n	b6c36 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6c46:	4622      	mov	r2, r4
   b6c48:	4631      	mov	r1, r6
   b6c4a:	4628      	mov	r0, r5
   b6c4c:	f7ff ff9a 	bl	b6b84 <_ZN9FatVolume6fatPutEmm>
   b6c50:	2800      	cmp	r0, #0
   b6c52:	d1f5      	bne.n	b6c40 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6c54:	e7ee      	b.n	b6c34 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6c56 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c58:	4605      	mov	r5, r0
   b6c5a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6c5c:	aa01      	add	r2, sp, #4
   b6c5e:	4621      	mov	r1, r4
   b6c60:	4628      	mov	r0, r5
   b6c62:	f7ff ff58 	bl	b6b16 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6c66:	1e06      	subs	r6, r0, #0
   b6c68:	db10      	blt.n	b6c8c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6c6a:	2200      	movs	r2, #0
   b6c6c:	4621      	mov	r1, r4
   b6c6e:	4628      	mov	r0, r5
   b6c70:	f7ff ff88 	bl	b6b84 <_ZN9FatVolume6fatPutEmm>
   b6c74:	b150      	cbz	r0, b6c8c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6c76:	68eb      	ldr	r3, [r5, #12]
   b6c78:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6c7a:	bf24      	itt	cs
   b6c7c:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6c80:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6c82:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6c84:	2e00      	cmp	r6, #0
   b6c86:	d1e9      	bne.n	b6c5c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6c88:	b002      	add	sp, #8
   b6c8a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6c8c:	2000      	movs	r0, #0
   b6c8e:	e7fb      	b.n	b6c88 <_ZN9FatVolume9freeChainEm+0x32>

000b6c90 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6c90:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6c92:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6c94:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6c96:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6c98:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b6c9c:	4604      	mov	r4, r0
  m_fatType = 0;
   b6c9e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6ca0:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6ca4:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6ca6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6caa:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6cac:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6cb0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6cb4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6cb8:	460d      	mov	r5, r1
   b6cba:	b1b9      	cbz	r1, b6cec <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6cbc:	2904      	cmp	r1, #4
   b6cbe:	d901      	bls.n	b6cc4 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6cc0:	2000      	movs	r0, #0
}
   b6cc2:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6cc4:	4611      	mov	r1, r2
   b6cc6:	4630      	mov	r0, r6
   b6cc8:	f7ff fefc 	bl	b6ac4 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6ccc:	2800      	cmp	r0, #0
   b6cce:	d0f7      	beq.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6cd0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6cd4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6cd8:	065b      	lsls	r3, r3, #25
   b6cda:	d1f1      	bne.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
   b6cdc:	f105 011b 	add.w	r1, r5, #27
   b6ce0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6ce4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6ce8:	2d00      	cmp	r5, #0
   b6cea:	d0e9      	beq.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
   b6cec:	2200      	movs	r2, #0
   b6cee:	4629      	mov	r1, r5
   b6cf0:	4630      	mov	r0, r6
   b6cf2:	f7ff fee7 	bl	b6ac4 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6cf6:	2800      	cmp	r0, #0
   b6cf8:	d0e2      	beq.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6cfa:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6d02:	d1dd      	bne.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
   b6d04:	7c03      	ldrb	r3, [r0, #16]
   b6d06:	2b02      	cmp	r3, #2
   b6d08:	d1da      	bne.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6d0a:	89c3      	ldrh	r3, [r0, #14]
   b6d0c:	2b00      	cmp	r3, #0
   b6d0e:	d0d7      	beq.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6d10:	7b41      	ldrb	r1, [r0, #13]
   b6d12:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6d14:	1e4b      	subs	r3, r1, #1
   b6d16:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6d18:	2300      	movs	r3, #0
   b6d1a:	71a3      	strb	r3, [r4, #6]
   b6d1c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d1e:	2301      	movs	r3, #1
   b6d20:	4299      	cmp	r1, r3
   b6d22:	d007      	beq.n	b6d34 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6d24:	3e01      	subs	r6, #1
   b6d26:	d0cb      	beq.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d28:	79a2      	ldrb	r2, [r4, #6]
   b6d2a:	005b      	lsls	r3, r3, #1
   b6d2c:	3201      	adds	r2, #1
   b6d2e:	b2db      	uxtb	r3, r3
   b6d30:	71a2      	strb	r2, [r4, #6]
   b6d32:	e7f5      	b.n	b6d20 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6d34:	8ac1      	ldrh	r1, [r0, #22]
   b6d36:	b901      	cbnz	r1, b6d3a <_ZN9FatVolume4initEh+0xaa>
   b6d38:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6d3a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6d3c:	89c3      	ldrh	r3, [r0, #14]
   b6d3e:	442b      	add	r3, r5
   b6d40:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6d42:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6d46:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6d48:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6d4c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6d4e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6d52:	0149      	lsls	r1, r1, #5
   b6d54:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6d58:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6d5c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6d5e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6d62:	b902      	cbnz	r2, b6d66 <_ZN9FatVolume4initEh+0xd6>
   b6d64:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6d66:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6d68:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6d6a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6d6c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6d6e:	1c4b      	adds	r3, r1, #1
   b6d70:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6d72:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6d76:	4299      	cmp	r1, r3
   b6d78:	d802      	bhi.n	b6d80 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6d7a:	230c      	movs	r3, #12
   b6d7c:	71e3      	strb	r3, [r4, #7]
   b6d7e:	e79f      	b.n	b6cc0 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6d80:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6d84:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6d86:	bf85      	ittet	hi
   b6d88:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6d8a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6d8c:	2310      	movls	r3, #16
    m_fatType = 32;
   b6d8e:	2320      	movhi	r3, #32
   b6d90:	71e3      	strb	r3, [r4, #7]
  return true;
   b6d92:	2001      	movs	r0, #1
   b6d94:	e795      	b.n	b6cc2 <_ZN9FatVolume4initEh+0x32>

000b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6d96:	f000 bacb 	b.w	b7330 <_ZN14SdSpiAltDriver4sendEh>

000b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6d9a:	f000 baae 	b.w	b72fa <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6da0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6da0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6da2:	4e0e      	ldr	r6, [pc, #56]	; (b6ddc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6da4:	460d      	mov	r5, r1
   b6da6:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6da8:	f000 fe9a 	bl	b7ae0 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6dac:	6833      	ldr	r3, [r6, #0]
   b6dae:	1ac0      	subs	r0, r0, r3
   b6db0:	4b0b      	ldr	r3, [pc, #44]	; (b6de0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6db2:	4298      	cmp	r0, r3
   b6db4:	d908      	bls.n	b6dc8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return HAL_Timer_Get_Milli_Seconds();
   b6db6:	f000 fe9b 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b6dba:	4b0a      	ldr	r3, [pc, #40]	; (b6de4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6dbc:	6018      	str	r0, [r3, #0]
   b6dbe:	f001 f8bb 	bl	b7f38 <spark_process>
   b6dc2:	f000 fe8d 	bl	b7ae0 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6dc6:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6dc8:	f000 fe92 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6dcc:	b280      	uxth	r0, r0
   b6dce:	1b40      	subs	r0, r0, r5
}
   b6dd0:	42a0      	cmp	r0, r4
   b6dd2:	bfd4      	ite	le
   b6dd4:	2000      	movle	r0, #0
   b6dd6:	2001      	movgt	r0, #1
   b6dd8:	bd70      	pop	{r4, r5, r6, pc}
   b6dda:	bf00      	nop
   b6ddc:	2003e6bc 	.word	0x2003e6bc
   b6de0:	000186a0 	.word	0x000186a0
   b6de4:	2003e740 	.word	0x2003e740

000b6de8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6de8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6dea:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6dec:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6dee:	b94d      	cbnz	r5, b6e04 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6df0:	6840      	ldr	r0, [r0, #4]
   b6df2:	f000 fa6b 	bl	b72cc <_ZN14SdSpiAltDriver8activateEv>
    digitalWrite(m_csPin, LOW);
   b6df6:	6863      	ldr	r3, [r4, #4]
   b6df8:	4629      	mov	r1, r5
   b6dfa:	7d18      	ldrb	r0, [r3, #20]
   b6dfc:	f002 fb3d 	bl	b947a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6e00:	2301      	movs	r3, #1
   b6e02:	7223      	strb	r3, [r4, #8]
  }
}
   b6e04:	bd38      	pop	{r3, r4, r5, pc}

000b6e06 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6e06:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6e08:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6e0a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6e0c:	b16b      	cbz	r3, b6e2a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6e0e:	6843      	ldr	r3, [r0, #4]
   b6e10:	2101      	movs	r1, #1
   b6e12:	7d18      	ldrb	r0, [r3, #20]
   b6e14:	f002 fb31 	bl	b947a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6e18:	6860      	ldr	r0, [r4, #4]
   b6e1a:	21ff      	movs	r1, #255	; 0xff
   b6e1c:	f7ff ffbb 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6e20:	6860      	ldr	r0, [r4, #4]
   b6e22:	f000 fa67 	bl	b72f4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6e26:	2300      	movs	r3, #0
   b6e28:	7223      	strb	r3, [r4, #8]
  }
}
   b6e2a:	bd10      	pop	{r4, pc}

000b6e2c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e2e:	4604      	mov	r4, r0
   b6e30:	460d      	mov	r5, r1
   b6e32:	4616      	mov	r6, r2
   b6e34:	f000 fe5c 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6e38:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6e3a:	6860      	ldr	r0, [r4, #4]
   b6e3c:	f7ff ffad 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e40:	28ff      	cmp	r0, #255	; 0xff
   b6e42:	7260      	strb	r0, [r4, #9]
   b6e44:	d10e      	bne.n	b6e64 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6e4a:	4639      	mov	r1, r7
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	f7ff ffa7 	bl	b6da0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6e52:	2800      	cmp	r0, #0
   b6e54:	d0f1      	beq.n	b6e3a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6e56:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6e58:	4620      	mov	r0, r4
   b6e5a:	7023      	strb	r3, [r4, #0]
   b6e5c:	f7ff ffd3 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6e60:	2000      	movs	r0, #0
}
   b6e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6e64:	28fe      	cmp	r0, #254	; 0xfe
   b6e66:	d001      	beq.n	b6e6c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6e68:	2350      	movs	r3, #80	; 0x50
   b6e6a:	e7f5      	b.n	b6e58 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6e6c:	6860      	ldr	r0, [r4, #4]
   b6e6e:	4632      	mov	r2, r6
   b6e70:	4629      	mov	r1, r5
   b6e72:	f000 fa47 	bl	b7304 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6e76:	7260      	strb	r0, [r4, #9]
   b6e78:	b108      	cbz	r0, b6e7e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6e7a:	2360      	movs	r3, #96	; 0x60
   b6e7c:	e7ec      	b.n	b6e58 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6e7e:	6860      	ldr	r0, [r4, #4]
   b6e80:	f7ff ff8b 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6e84:	6860      	ldr	r0, [r4, #4]
   b6e86:	f7ff ff88 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b6e8a:	2001      	movs	r0, #1
   b6e8c:	e7e9      	b.n	b6e62 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b6e8e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b6e8e:	b570      	push	{r4, r5, r6, lr}
   b6e90:	4604      	mov	r4, r0
   b6e92:	460e      	mov	r6, r1
   b6e94:	f000 fe2c 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
   b6e98:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b6e9a:	4632      	mov	r2, r6
   b6e9c:	4629      	mov	r1, r5
   b6e9e:	4620      	mov	r0, r4
   b6ea0:	f7ff ff7e 	bl	b6da0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6ea4:	b930      	cbnz	r0, b6eb4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6ea6:	6860      	ldr	r0, [r4, #4]
   b6ea8:	f7ff ff77 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6eac:	28ff      	cmp	r0, #255	; 0xff
   b6eae:	d1f4      	bne.n	b6e9a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6eb0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6eb2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6eb4:	2000      	movs	r0, #0
   b6eb6:	e7fc      	b.n	b6eb2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6eb8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b6eba:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6ebc:	9201      	str	r2, [sp, #4]
   b6ebe:	4604      	mov	r4, r0
   b6ec0:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6ec2:	b90b      	cbnz	r3, b6ec8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6ec4:	f7ff ff90 	bl	b6de8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6ec8:	b125      	cbz	r5, b6ed4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b6eca:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6ece:	4620      	mov	r0, r4
   b6ed0:	f7ff ffdd 	bl	b6e8e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6ed4:	6860      	ldr	r0, [r4, #4]
   b6ed6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b6eda:	f7ff ff5c 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6ede:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6ee0:	af01      	add	r7, sp, #4
   b6ee2:	5db9      	ldrb	r1, [r7, r6]
   b6ee4:	6860      	ldr	r0, [r4, #4]
   b6ee6:	f7ff ff56 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6eea:	3e01      	subs	r6, #1
   b6eec:	d2f9      	bcs.n	b6ee2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6eee:	2d00      	cmp	r5, #0
   b6ef0:	6860      	ldr	r0, [r4, #4]
   b6ef2:	bf0c      	ite	eq
   b6ef4:	2195      	moveq	r1, #149	; 0x95
   b6ef6:	2187      	movne	r1, #135	; 0x87
   b6ef8:	f7ff ff4d 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6efc:	6860      	ldr	r0, [r4, #4]
   b6efe:	f7ff ff4c 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f02:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6f04:	6860      	ldr	r0, [r4, #4]
   b6f06:	f7ff ff48 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f0a:	0603      	lsls	r3, r0, #24
   b6f0c:	7260      	strb	r0, [r4, #9]
   b6f0e:	d503      	bpl.n	b6f18 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6f10:	3d01      	subs	r5, #1
   b6f12:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6f16:	d1f5      	bne.n	b6f04 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6f18:	b003      	add	sp, #12
   b6f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f1c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6f1c:	b570      	push	{r4, r5, r6, lr}
   b6f1e:	4604      	mov	r4, r0
   b6f20:	460d      	mov	r5, r1
   b6f22:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6f24:	2137      	movs	r1, #55	; 0x37
   b6f26:	2200      	movs	r2, #0
   b6f28:	f7ff ffc6 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6f2c:	4632      	mov	r2, r6
   b6f2e:	4629      	mov	r1, r5
   b6f30:	4620      	mov	r0, r4
  }
   b6f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6f36:	f7ff bfbf 	b.w	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6f3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6f40:	2500      	movs	r5, #0
   b6f42:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6f44:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6f46:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6f48:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f4a:	4604      	mov	r4, r0
   b6f4c:	4690      	mov	r8, r2
   b6f4e:	461e      	mov	r6, r3
   b6f50:	f000 fdce 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6f54:	4641      	mov	r1, r8
   b6f56:	4607      	mov	r7, r0
   b6f58:	6860      	ldr	r0, [r4, #4]
   b6f5a:	f000 f9bb 	bl	b72d4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6f5e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6f60:	4a49      	ldr	r2, [pc, #292]	; (b7088 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6f62:	721d      	strb	r5, [r3, #8]
   b6f64:	2501      	movs	r5, #1
   b6f66:	60da      	str	r2, [r3, #12]
   b6f68:	821d      	strh	r5, [r3, #16]
  spiStart();
   b6f6a:	4620      	mov	r0, r4
   b6f6c:	f7ff ff3c 	bl	b6de8 <_ZN9SdSpiCard8spiStartEv>
   b6f70:	6863      	ldr	r3, [r4, #4]
   b6f72:	4629      	mov	r1, r5
   b6f74:	7d18      	ldrb	r0, [r3, #20]
   b6f76:	f002 fa80 	bl	b947a <digitalWrite>
   b6f7a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6f7c:	6860      	ldr	r0, [r4, #4]
   b6f7e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6f80:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6f82:	f7ff ff08 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6f86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6f8a:	d1f7      	bne.n	b6f7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    digitalWrite(m_csPin, LOW);
   b6f8c:	6863      	ldr	r3, [r4, #4]
   b6f8e:	4629      	mov	r1, r5
   b6f90:	7d18      	ldrb	r0, [r3, #20]
   b6f92:	f002 fa72 	bl	b947a <digitalWrite>
  }
   b6f96:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6f98:	2200      	movs	r2, #0
   b6f9a:	4611      	mov	r1, r2
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	f7ff ff8b 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b6fa2:	2801      	cmp	r0, #1
   b6fa4:	4680      	mov	r8, r0
   b6fa6:	d018      	beq.n	b6fda <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6fa8:	3d01      	subs	r5, #1
   b6faa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6fae:	d107      	bne.n	b6fc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6fb0:	2320      	movs	r3, #32
  spiStop();
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	7023      	strb	r3, [r4, #0]
   b6fb6:	f7ff ff26 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6fba:	2000      	movs	r0, #0
}
   b6fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6fc0:	6860      	ldr	r0, [r4, #4]
   b6fc2:	21fd      	movs	r1, #253	; 0xfd
   b6fc4:	f7ff fee7 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6fc8:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b6fcc:	6860      	ldr	r0, [r4, #4]
   b6fce:	f7ff fee4 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6fd2:	f1b8 0801 	subs.w	r8, r8, #1
   b6fd6:	d1f9      	bne.n	b6fcc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6fd8:	e7de      	b.n	b6f98 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b6fda:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6fde:	2108      	movs	r1, #8
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	f7ff ff69 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b6fe6:	2805      	cmp	r0, #5
   b6fe8:	d114      	bne.n	b7014 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b6fea:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6fee:	2500      	movs	r5, #0
   b6ff0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6ff2:	462a      	mov	r2, r5
   b6ff4:	2129      	movs	r1, #41	; 0x29
   b6ff6:	4620      	mov	r0, r4
   b6ff8:	f7ff ff90 	bl	b6f1c <_ZN9SdSpiCard8cardAcmdEhm>
   b6ffc:	4602      	mov	r2, r0
   b6ffe:	b1d8      	cbz	r0, b7038 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7000:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7004:	4639      	mov	r1, r7
   b7006:	4620      	mov	r0, r4
   b7008:	f7ff feca 	bl	b6da0 <_ZN9SdSpiCard10isTimedOutEtt>
   b700c:	2800      	cmp	r0, #0
   b700e:	d0f0      	beq.n	b6ff2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7010:	2343      	movs	r3, #67	; 0x43
   b7012:	e7ce      	b.n	b6fb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7014:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7016:	6860      	ldr	r0, [r4, #4]
   b7018:	f7ff febf 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b701c:	3d01      	subs	r5, #1
   b701e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7022:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7024:	d1f7      	bne.n	b7016 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7026:	28aa      	cmp	r0, #170	; 0xaa
   b7028:	d104      	bne.n	b7034 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b702a:	2302      	movs	r3, #2
   b702c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b702e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7032:	e7dd      	b.n	b6ff0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7034:	2325      	movs	r3, #37	; 0x25
   b7036:	e7bc      	b.n	b6fb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7038:	7aa3      	ldrb	r3, [r4, #10]
   b703a:	2b02      	cmp	r3, #2
   b703c:	d118      	bne.n	b7070 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b703e:	213a      	movs	r1, #58	; 0x3a
   b7040:	4620      	mov	r0, r4
   b7042:	f7ff ff39 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b7046:	b108      	cbz	r0, b704c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7048:	2337      	movs	r3, #55	; 0x37
   b704a:	e7b2      	b.n	b6fb2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b704c:	6860      	ldr	r0, [r4, #4]
   b704e:	f7ff fea4 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7052:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7056:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7058:	bf04      	itt	eq
   b705a:	2303      	moveq	r3, #3
   b705c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b705e:	6860      	ldr	r0, [r4, #4]
   b7060:	f7ff fe9b 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7064:	6860      	ldr	r0, [r4, #4]
   b7066:	f7ff fe98 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b706a:	6860      	ldr	r0, [r4, #4]
   b706c:	f7ff fe95 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7070:	4620      	mov	r0, r4
   b7072:	f7ff fec8 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7076:	6863      	ldr	r3, [r4, #4]
   b7078:	7930      	ldrb	r0, [r6, #4]
   b707a:	68b1      	ldr	r1, [r6, #8]
   b707c:	89b2      	ldrh	r2, [r6, #12]
   b707e:	821a      	strh	r2, [r3, #16]
   b7080:	7218      	strb	r0, [r3, #8]
   b7082:	60d9      	str	r1, [r3, #12]
  return true;
   b7084:	2001      	movs	r0, #1
   b7086:	e799      	b.n	b6fbc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7088:	0003d090 	.word	0x0003d090

000b708c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b708c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b708e:	7a83      	ldrb	r3, [r0, #10]
   b7090:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7092:	bf18      	it	ne
   b7094:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7096:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7098:	460a      	mov	r2, r1
   b709a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b709c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b709e:	f7ff ff0b 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b70a2:	b130      	cbz	r0, b70b2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b70a4:	2330      	movs	r3, #48	; 0x30
   b70a6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b70a8:	4620      	mov	r0, r4
   b70aa:	f7ff feac 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b70ae:	2500      	movs	r5, #0
   b70b0:	e00b      	b.n	b70ca <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b70b2:	4629      	mov	r1, r5
   b70b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b70b8:	4620      	mov	r0, r4
   b70ba:	f7ff feb7 	bl	b6e2c <_ZN9SdSpiCard8readDataEPhj>
   b70be:	4605      	mov	r5, r0
   b70c0:	2800      	cmp	r0, #0
   b70c2:	d0f1      	beq.n	b70a8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b70c4:	4620      	mov	r0, r4
   b70c6:	f7ff fe9e 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
}
   b70ca:	4628      	mov	r0, r5
   b70cc:	bd38      	pop	{r3, r4, r5, pc}

000b70ce <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70ce:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b70d0:	7a83      	ldrb	r3, [r0, #10]
   b70d2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70d4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b70d6:	bf18      	it	ne
   b70d8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b70da:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70dc:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b70de:	f7ff feeb 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b70e2:	b130      	cbz	r0, b70f2 <_ZN9SdSpiCard9readStartEm+0x24>
   b70e4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b70e6:	4620      	mov	r0, r4
   b70e8:	7023      	strb	r3, [r4, #0]
   b70ea:	f7ff fe8c 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b70ee:	2000      	movs	r0, #0
}
   b70f0:	bd10      	pop	{r4, pc}
  return true;
   b70f2:	2001      	movs	r0, #1
   b70f4:	e7fc      	b.n	b70f0 <_ZN9SdSpiCard9readStartEm+0x22>

000b70f6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b70f6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b70f8:	2200      	movs	r2, #0
   b70fa:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b70fc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b70fe:	f7ff fedb 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b7102:	b130      	cbz	r0, b7112 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7104:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7106:	4620      	mov	r0, r4
   b7108:	7023      	strb	r3, [r4, #0]
   b710a:	f7ff fe7c 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b710e:	2000      	movs	r0, #0
}
   b7110:	bd10      	pop	{r4, pc}
  spiStop();
   b7112:	4620      	mov	r0, r4
   b7114:	f7ff fe77 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7118:	2001      	movs	r0, #1
   b711a:	e7f9      	b.n	b7110 <_ZN9SdSpiCard8readStopEv+0x1a>

000b711c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b711e:	4604      	mov	r4, r0
   b7120:	4616      	mov	r6, r2
   b7122:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7124:	f7ff ffd3 	bl	b70ce <_ZN9SdSpiCard9readStartEm>
   b7128:	b168      	cbz	r0, b7146 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b712a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b712c:	b2ab      	uxth	r3, r5
   b712e:	429f      	cmp	r7, r3
   b7130:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7134:	d909      	bls.n	b714a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7136:	f44f 7200 	mov.w	r2, #512	; 0x200
   b713a:	4620      	mov	r0, r4
   b713c:	f7ff fe76 	bl	b6e2c <_ZN9SdSpiCard8readDataEPhj>
   b7140:	3501      	adds	r5, #1
   b7142:	2800      	cmp	r0, #0
   b7144:	d1f2      	bne.n	b712c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7146:	2000      	movs	r0, #0
   b7148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b714a:	4620      	mov	r0, r4
}
   b714c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7150:	f7ff bfd1 	b.w	b70f6 <_ZN9SdSpiCard8readStopEv>

000b7154 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7154:	b538      	push	{r3, r4, r5, lr}
   b7156:	4604      	mov	r4, r0
   b7158:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b715a:	6840      	ldr	r0, [r0, #4]
   b715c:	f7ff fe1b 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7160:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7164:	6860      	ldr	r0, [r4, #4]
   b7166:	4629      	mov	r1, r5
   b7168:	f000 f8e6 	bl	b7338 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b716c:	6860      	ldr	r0, [r4, #4]
   b716e:	21ff      	movs	r1, #255	; 0xff
   b7170:	f7ff fe11 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7174:	6860      	ldr	r0, [r4, #4]
   b7176:	21ff      	movs	r1, #255	; 0xff
   b7178:	f7ff fe0d 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b717c:	6860      	ldr	r0, [r4, #4]
   b717e:	f7ff fe0c 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7182:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7184:	f000 001f 	and.w	r0, r0, #31
   b7188:	2805      	cmp	r0, #5
   b718a:	d006      	beq.n	b719a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b718c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b718e:	4620      	mov	r0, r4
   b7190:	7023      	strb	r3, [r4, #0]
   b7192:	f7ff fe38 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7196:	2000      	movs	r0, #0
}
   b7198:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b719a:	2001      	movs	r0, #1
   b719c:	e7fc      	b.n	b7198 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b719e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b719e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b71a0:	7a83      	ldrb	r3, [r0, #10]
   b71a2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b71a4:	bf18      	it	ne
   b71a6:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71a8:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b71aa:	460a      	mov	r2, r1
   b71ac:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71ae:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b71b0:	f7ff fe82 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b71b4:	4606      	mov	r6, r0
   b71b6:	b130      	cbz	r0, b71c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b71b8:	2332      	movs	r3, #50	; 0x32
   b71ba:	7023      	strb	r3, [r4, #0]
  spiStop();
   b71bc:	4620      	mov	r0, r4
   b71be:	f7ff fe22 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71c2:	2500      	movs	r5, #0
   b71c4:	e01f      	b.n	b7206 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b71c6:	462a      	mov	r2, r5
   b71c8:	21fe      	movs	r1, #254	; 0xfe
   b71ca:	4620      	mov	r0, r4
   b71cc:	f7ff ffc2 	bl	b7154 <_ZN9SdSpiCard9writeDataEhPKh>
   b71d0:	2800      	cmp	r0, #0
   b71d2:	d0f3      	beq.n	b71bc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b71d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b71d8:	4620      	mov	r0, r4
   b71da:	f7ff fe58 	bl	b6e8e <_ZN9SdSpiCard11waitNotBusyEt>
   b71de:	4605      	mov	r5, r0
   b71e0:	b908      	cbnz	r0, b71e6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b71e2:	235a      	movs	r3, #90	; 0x5a
   b71e4:	e7e9      	b.n	b71ba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b71e6:	4632      	mov	r2, r6
   b71e8:	210d      	movs	r1, #13
   b71ea:	4620      	mov	r0, r4
   b71ec:	f7ff fe64 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b71f0:	b108      	cbz	r0, b71f6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b71f2:	2329      	movs	r3, #41	; 0x29
   b71f4:	e7e1      	b.n	b71ba <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b71f6:	6860      	ldr	r0, [r4, #4]
   b71f8:	f7ff fdcf 	bl	b6d9a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b71fc:	2800      	cmp	r0, #0
   b71fe:	d1f8      	bne.n	b71f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7200:	4620      	mov	r0, r4
   b7202:	f7ff fe00 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
}
   b7206:	4628      	mov	r0, r5
   b7208:	bd70      	pop	{r4, r5, r6, pc}

000b720a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b720a:	b513      	push	{r0, r1, r4, lr}
   b720c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b720e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7212:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7214:	f7ff fe3b 	bl	b6e8e <_ZN9SdSpiCard11waitNotBusyEt>
   b7218:	9a01      	ldr	r2, [sp, #4]
   b721a:	b930      	cbnz	r0, b722a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b721c:	235b      	movs	r3, #91	; 0x5b
   b721e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7220:	4620      	mov	r0, r4
   b7222:	f7ff fdf0 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7226:	2000      	movs	r0, #0
   b7228:	e005      	b.n	b7236 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b722a:	21fc      	movs	r1, #252	; 0xfc
   b722c:	4620      	mov	r0, r4
   b722e:	f7ff ff91 	bl	b7154 <_ZN9SdSpiCard9writeDataEhPKh>
   b7232:	2800      	cmp	r0, #0
   b7234:	d0f4      	beq.n	b7220 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7236:	b002      	add	sp, #8
   b7238:	bd10      	pop	{r4, pc}

000b723a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b723a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b723c:	7a83      	ldrb	r3, [r0, #10]
   b723e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7240:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7242:	bf18      	it	ne
   b7244:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7246:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7248:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b724a:	f7ff fe35 	bl	b6eb8 <_ZN9SdSpiCard11cardCommandEhm>
   b724e:	b130      	cbz	r0, b725e <_ZN9SdSpiCard10writeStartEm+0x24>
   b7250:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7252:	4620      	mov	r0, r4
   b7254:	7023      	strb	r3, [r4, #0]
   b7256:	f7ff fdd6 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b725a:	2000      	movs	r0, #0
}
   b725c:	bd10      	pop	{r4, pc}
  return true;
   b725e:	2001      	movs	r0, #1
   b7260:	e7fc      	b.n	b725c <_ZN9SdSpiCard10writeStartEm+0x22>

000b7262 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7262:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7264:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7268:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b726a:	f7ff fe10 	bl	b6e8e <_ZN9SdSpiCard11waitNotBusyEt>
   b726e:	4605      	mov	r5, r0
   b7270:	b930      	cbnz	r0, b7280 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7272:	2356      	movs	r3, #86	; 0x56
   b7274:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7276:	4620      	mov	r0, r4
   b7278:	f7ff fdc5 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b727c:	4628      	mov	r0, r5
   b727e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7280:	6860      	ldr	r0, [r4, #4]
   b7282:	21fd      	movs	r1, #253	; 0xfd
   b7284:	f7ff fd87 	bl	b6d96 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7288:	e7f5      	b.n	b7276 <_ZN9SdSpiCard9writeStopEv+0x14>

000b728a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b728a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b728c:	4604      	mov	r4, r0
   b728e:	4616      	mov	r6, r2
   b7290:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7292:	f7ff ffd2 	bl	b723a <_ZN9SdSpiCard10writeStartEm>
   b7296:	b170      	cbz	r0, b72b6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7298:	2500      	movs	r5, #0
   b729a:	42bd      	cmp	r5, r7
   b729c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b72a0:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b72a2:	d004      	beq.n	b72ae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b72a4:	f7ff ffb1 	bl	b720a <_ZN9SdSpiCard9writeDataEPKh>
   b72a8:	b128      	cbz	r0, b72b6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b72aa:	3501      	adds	r5, #1
   b72ac:	e7f5      	b.n	b729a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b72ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b72b2:	f7ff bfd6 	b.w	b7262 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b72b6:	4620      	mov	r0, r4
   b72b8:	f7ff fda5 	bl	b6e06 <_ZN9SdSpiCard7spiStopEv>
}
   b72bc:	2000      	movs	r0, #0
   b72be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b72c0:	4b01      	ldr	r3, [pc, #4]	; (b72c8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b72c2:	2201      	movs	r2, #1
   b72c4:	701a      	strb	r2, [r3, #0]
}
   b72c6:	4770      	bx	lr
   b72c8:	2003e6c0 	.word	0x2003e6c0

000b72cc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b72cc:	1d01      	adds	r1, r0, #4
   b72ce:	6800      	ldr	r0, [r0, #0]
   b72d0:	f000 befe 	b.w	b80d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b72d4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b72d4:	b510      	push	{r4, lr}
   b72d6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b72d8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b72da:	6800      	ldr	r0, [r0, #0]
   b72dc:	f000 feca 	bl	b8074 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b72e0:	7d20      	ldrb	r0, [r4, #20]
   b72e2:	2101      	movs	r1, #1
   b72e4:	f002 f8b8 	bl	b9458 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b72e8:	7d20      	ldrb	r0, [r4, #20]
   b72ea:	2101      	movs	r1, #1
}
   b72ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b72f0:	f002 b8c3 	b.w	b947a <digitalWrite>

000b72f4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b72f4:	6800      	ldr	r0, [r0, #0]
   b72f6:	f000 bed1 	b.w	b809c <_ZN8SPIClass14endTransactionEv>

000b72fa <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b72fa:	6800      	ldr	r0, [r0, #0]
   b72fc:	21ff      	movs	r1, #255	; 0xff
   b72fe:	f000 bf55 	b.w	b81ac <_ZN8SPIClass8transferEh>
	...

000b7304 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7304:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7306:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7308:	4a07      	ldr	r2, [pc, #28]	; (b7328 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b730a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b730c:	2500      	movs	r5, #0
   b730e:	4c07      	ldr	r4, [pc, #28]	; (b732c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7310:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7312:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7314:	460a      	mov	r2, r1
   b7316:	4629      	mov	r1, r5
   b7318:	f000 ff4e 	bl	b81b8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b731c:	7823      	ldrb	r3, [r4, #0]
   b731e:	2b00      	cmp	r3, #0
   b7320:	d0fc      	beq.n	b731c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7322:	2000      	movs	r0, #0
   b7324:	b003      	add	sp, #12
   b7326:	bd30      	pop	{r4, r5, pc}
   b7328:	000b72c1 	.word	0x000b72c1
   b732c:	2003e6c0 	.word	0x2003e6c0

000b7330 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7330:	6800      	ldr	r0, [r0, #0]
   b7332:	f000 bf3b 	b.w	b81ac <_ZN8SPIClass8transferEh>
	...

000b7338 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7338:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b733a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b733c:	4a06      	ldr	r2, [pc, #24]	; (b7358 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b733e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7340:	2500      	movs	r5, #0
   b7342:	4c06      	ldr	r4, [pc, #24]	; (b735c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7344:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7346:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7348:	462a      	mov	r2, r5
   b734a:	f000 ff35 	bl	b81b8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b734e:	7823      	ldrb	r3, [r4, #0]
   b7350:	2b00      	cmp	r3, #0
   b7352:	d0fc      	beq.n	b734e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7354:	b003      	add	sp, #12
   b7356:	bd30      	pop	{r4, r5, pc}
   b7358:	000b72c1 	.word	0x000b72c1
   b735c:	2003e6c0 	.word	0x2003e6c0

000b7360 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b7360:	f001 b9ac 	b.w	b86bc <delay>

000b7364 <_Z11BlynkMillisv>:
   b7364:	f000 bbc4 	b.w	b7af0 <HAL_Timer_Get_Milli_Seconds>

000b7368 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b7368:	4770      	bx	lr

000b736a <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b736a:	4770      	bx	lr

000b736c <BlynkNoOpCbk>:
{}
   b736c:	4770      	bx	lr
	...

000b7370 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b7370:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b7372:	bf5a      	itte	pl
   b7374:	4b02      	ldrpl	r3, [pc, #8]	; (b7380 <GetReadHandler+0x10>)
   b7376:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b737a:	2000      	movmi	r0, #0
#endif
}
   b737c:	4770      	bx	lr
   b737e:	bf00      	nop
   b7380:	000ba6c0 	.word	0x000ba6c0

000b7384 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b7384:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b7386:	bf5a      	itte	pl
   b7388:	4b02      	ldrpl	r3, [pc, #8]	; (b7394 <GetWriteHandler+0x10>)
   b738a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b738e:	2000      	movmi	r0, #0
#endif
}
   b7390:	4770      	bx	lr
   b7392:	bf00      	nop
   b7394:	000ba8c0 	.word	0x000ba8c0

000b7398 <_ZN17Adafruit_MCP230085beginEh>:

void Adafruit_MCP23008::begin(uint8_t addr) {
  if (addr > 7) {
    addr = 7;
  }
  i2caddr = addr;
   b7398:	2907      	cmp	r1, #7
   b739a:	bf28      	it	cs
   b739c:	2107      	movcs	r1, #7
void Adafruit_MCP23008::begin(uint8_t addr) {
   b739e:	b510      	push	{r4, lr}
  i2caddr = addr;
   b73a0:	7001      	strb	r1, [r0, #0]
void Adafruit_MCP23008::begin(uint8_t addr) {
   b73a2:	4604      	mov	r4, r0

  Wire.begin();
   b73a4:	f002 f94c 	bl	b9640 <_Z19__fetch_global_Wirev>
   b73a8:	f001 fc22 	bl	b8bf0 <_ZN7TwoWire5beginEv>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b73ac:	2028      	movs	r0, #40	; 0x28
   b73ae:	f000 fb8f 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  // set defaults!
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
   b73b2:	f002 f945 	bl	b9640 <_Z19__fetch_global_Wirev>
   b73b6:	7821      	ldrb	r1, [r4, #0]
   b73b8:	f041 0120 	orr.w	r1, r1, #32
   b73bc:	f001 fc4e 	bl	b8c5c <_ZN7TwoWire17beginTransmissionEi>
   b73c0:	2028      	movs	r0, #40	; 0x28
   b73c2:	f000 fb85 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)MCP23008_IODIR);
   b73c6:	f002 f93b 	bl	b9640 <_Z19__fetch_global_Wirev>
   b73ca:	6803      	ldr	r3, [r0, #0]
   b73cc:	2100      	movs	r1, #0
   b73ce:	689b      	ldr	r3, [r3, #8]
   b73d0:	4798      	blx	r3
   b73d2:	2028      	movs	r0, #40	; 0x28
   b73d4:	f000 fb7c 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0xFF);  // all inputs
   b73d8:	f002 f932 	bl	b9640 <_Z19__fetch_global_Wirev>
   b73dc:	6803      	ldr	r3, [r0, #0]
   b73de:	21ff      	movs	r1, #255	; 0xff
   b73e0:	689b      	ldr	r3, [r3, #8]
   b73e2:	4798      	blx	r3
   b73e4:	2028      	movs	r0, #40	; 0x28
   b73e6:	f000 fb73 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b73ea:	f002 f929 	bl	b9640 <_Z19__fetch_global_Wirev>
   b73ee:	6803      	ldr	r3, [r0, #0]
   b73f0:	2100      	movs	r1, #0
   b73f2:	689b      	ldr	r3, [r3, #8]
   b73f4:	4798      	blx	r3
   b73f6:	2028      	movs	r0, #40	; 0x28
   b73f8:	f000 fb6a 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b73fc:	f002 f920 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7400:	6803      	ldr	r3, [r0, #0]
   b7402:	2100      	movs	r1, #0
   b7404:	689b      	ldr	r3, [r3, #8]
   b7406:	4798      	blx	r3
   b7408:	2028      	movs	r0, #40	; 0x28
   b740a:	f000 fb61 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b740e:	f002 f917 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7412:	6803      	ldr	r3, [r0, #0]
   b7414:	2100      	movs	r1, #0
   b7416:	689b      	ldr	r3, [r3, #8]
   b7418:	4798      	blx	r3
   b741a:	2028      	movs	r0, #40	; 0x28
   b741c:	f000 fb58 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b7420:	f002 f90e 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7424:	6803      	ldr	r3, [r0, #0]
   b7426:	2100      	movs	r1, #0
   b7428:	689b      	ldr	r3, [r3, #8]
   b742a:	4798      	blx	r3
   b742c:	2028      	movs	r0, #40	; 0x28
   b742e:	f000 fb4f 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b7432:	f002 f905 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7436:	6803      	ldr	r3, [r0, #0]
   b7438:	2100      	movs	r1, #0
   b743a:	689b      	ldr	r3, [r3, #8]
   b743c:	4798      	blx	r3
   b743e:	2028      	movs	r0, #40	; 0x28
   b7440:	f000 fb46 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b7444:	f002 f8fc 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7448:	6803      	ldr	r3, [r0, #0]
   b744a:	2100      	movs	r1, #0
   b744c:	689b      	ldr	r3, [r3, #8]
   b744e:	4798      	blx	r3
   b7450:	2028      	movs	r0, #40	; 0x28
   b7452:	f000 fb3d 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b7456:	f002 f8f3 	bl	b9640 <_Z19__fetch_global_Wirev>
   b745a:	6803      	ldr	r3, [r0, #0]
   b745c:	2100      	movs	r1, #0
   b745e:	689b      	ldr	r3, [r3, #8]
   b7460:	4798      	blx	r3
   b7462:	2028      	movs	r0, #40	; 0x28
   b7464:	f000 fb34 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);
   b7468:	f002 f8ea 	bl	b9640 <_Z19__fetch_global_Wirev>
   b746c:	6803      	ldr	r3, [r0, #0]
   b746e:	2100      	movs	r1, #0
   b7470:	689b      	ldr	r3, [r3, #8]
   b7472:	4798      	blx	r3
   b7474:	2028      	movs	r0, #40	; 0x28
   b7476:	f000 fb2b 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)0x00);	
   b747a:	f002 f8e1 	bl	b9640 <_Z19__fetch_global_Wirev>
   b747e:	6803      	ldr	r3, [r0, #0]
   b7480:	2100      	movs	r1, #0
   b7482:	689b      	ldr	r3, [r3, #8]
   b7484:	4798      	blx	r3
   b7486:	2028      	movs	r0, #40	; 0x28
   b7488:	f000 fb22 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.endTransmission();
   b748c:	f002 f8d8 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7490:	f001 fbeb 	bl	b8c6a <_ZN7TwoWire15endTransmissionEv>
  delayMicroseconds(40);
}
   b7494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7498:	2028      	movs	r0, #40	; 0x28
   b749a:	f000 bb19 	b.w	b7ad0 <HAL_Delay_Microseconds>

000b749e <_ZN17Adafruit_MCP230085read8Eh>:

  // read the current GPIO
  return (readGPIO() >> p) & 0x1;
}

uint8_t Adafruit_MCP23008::read8(uint8_t addr) {
   b749e:	b538      	push	{r3, r4, r5, lr}
   b74a0:	4604      	mov	r4, r0
   b74a2:	460d      	mov	r5, r1
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
   b74a4:	f002 f8cc 	bl	b9640 <_Z19__fetch_global_Wirev>
   b74a8:	7821      	ldrb	r1, [r4, #0]
   b74aa:	f041 0120 	orr.w	r1, r1, #32
   b74ae:	f001 fbd5 	bl	b8c5c <_ZN7TwoWire17beginTransmissionEi>
   b74b2:	2028      	movs	r0, #40	; 0x28
   b74b4:	f000 fb0c 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)addr);	
   b74b8:	f002 f8c2 	bl	b9640 <_Z19__fetch_global_Wirev>
   b74bc:	6803      	ldr	r3, [r0, #0]
   b74be:	4629      	mov	r1, r5
   b74c0:	689b      	ldr	r3, [r3, #8]
   b74c2:	4798      	blx	r3
   b74c4:	2028      	movs	r0, #40	; 0x28
   b74c6:	f000 fb03 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.endTransmission();
   b74ca:	f002 f8b9 	bl	b9640 <_Z19__fetch_global_Wirev>
   b74ce:	f001 fbcc 	bl	b8c6a <_ZN7TwoWire15endTransmissionEv>
   b74d2:	2028      	movs	r0, #40	; 0x28
   b74d4:	f000 fafc 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.requestFrom(MCP23008_ADDRESS | i2caddr, 1);
   b74d8:	f002 f8b2 	bl	b9640 <_Z19__fetch_global_Wirev>
   b74dc:	7821      	ldrb	r1, [r4, #0]
   b74de:	2201      	movs	r2, #1
   b74e0:	f041 0120 	orr.w	r1, r1, #32
   b74e4:	f001 fbb3 	bl	b8c4e <_ZN7TwoWire11requestFromEhj>
   b74e8:	2028      	movs	r0, #40	; 0x28
   b74ea:	f000 faf1 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  
  return Wire.read();
   b74ee:	f002 f8a7 	bl	b9640 <_Z19__fetch_global_Wirev>
   b74f2:	6803      	ldr	r3, [r0, #0]
   b74f4:	695b      	ldr	r3, [r3, #20]
   b74f6:	4798      	blx	r3
}
   b74f8:	b2c0      	uxtb	r0, r0
   b74fa:	bd38      	pop	{r3, r4, r5, pc}

000b74fc <_ZN17Adafruit_MCP230088readGPIOEv>:
  return read8(MCP23008_GPIO);
   b74fc:	2109      	movs	r1, #9
   b74fe:	f7ff bfce 	b.w	b749e <_ZN17Adafruit_MCP230085read8Eh>

000b7502 <_ZN17Adafruit_MCP230086write8Ehh>:


void Adafruit_MCP23008::write8(uint8_t addr, uint8_t data) {
   b7502:	b570      	push	{r4, r5, r6, lr}
   b7504:	4606      	mov	r6, r0
   b7506:	4614      	mov	r4, r2
   b7508:	460d      	mov	r5, r1
  Wire.beginTransmission(MCP23008_ADDRESS | i2caddr);
   b750a:	f002 f899 	bl	b9640 <_Z19__fetch_global_Wirev>
   b750e:	7831      	ldrb	r1, [r6, #0]
   b7510:	f041 0120 	orr.w	r1, r1, #32
   b7514:	f001 fba2 	bl	b8c5c <_ZN7TwoWire17beginTransmissionEi>
   b7518:	2028      	movs	r0, #40	; 0x28
   b751a:	f000 fad9 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)addr);
   b751e:	f002 f88f 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7522:	6803      	ldr	r3, [r0, #0]
   b7524:	4629      	mov	r1, r5
   b7526:	689b      	ldr	r3, [r3, #8]
   b7528:	4798      	blx	r3
   b752a:	2028      	movs	r0, #40	; 0x28
   b752c:	f000 fad0 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.write((byte)data);
   b7530:	f002 f886 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7534:	6803      	ldr	r3, [r0, #0]
   b7536:	4621      	mov	r1, r4
   b7538:	689b      	ldr	r3, [r3, #8]
   b753a:	4798      	blx	r3
   b753c:	2028      	movs	r0, #40	; 0x28
   b753e:	f000 fac7 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(40);
  Wire.endTransmission();
   b7542:	f002 f87d 	bl	b9640 <_Z19__fetch_global_Wirev>
   b7546:	f001 fb90 	bl	b8c6a <_ZN7TwoWire15endTransmissionEv>
  delayMicroseconds(40);
}
   b754a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b754e:	2028      	movs	r0, #40	; 0x28
   b7550:	f000 babe 	b.w	b7ad0 <HAL_Delay_Microseconds>

000b7554 <_ZN17Adafruit_MCP230087pinModeEhh>:
  if (p > 7)
   b7554:	2907      	cmp	r1, #7
void Adafruit_MCP23008::pinMode(uint8_t p, uint8_t d) {
   b7556:	b570      	push	{r4, r5, r6, lr}
   b7558:	4604      	mov	r4, r0
   b755a:	460d      	mov	r5, r1
   b755c:	4616      	mov	r6, r2
  if (p > 7)
   b755e:	d813      	bhi.n	b7588 <_ZN17Adafruit_MCP230087pinModeEhh+0x34>
  iodir = read8(MCP23008_IODIR);
   b7560:	2100      	movs	r1, #0
   b7562:	f7ff ff9c 	bl	b749e <_ZN17Adafruit_MCP230085read8Eh>
    iodir |= 1 << p; 
   b7566:	2301      	movs	r3, #1
   b7568:	fa03 f105 	lsl.w	r1, r3, r5
   b756c:	b249      	sxtb	r1, r1
  if (d == INPUT) {
   b756e:	b946      	cbnz	r6, b7582 <_ZN17Adafruit_MCP230087pinModeEhh+0x2e>
    iodir |= 1 << p; 
   b7570:	ea41 0200 	orr.w	r2, r1, r0
  write8(MCP23008_IODIR, iodir);
   b7574:	4620      	mov	r0, r4
    iodir &= ~(1 << p);
   b7576:	b2d2      	uxtb	r2, r2
}
   b7578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write8(MCP23008_IODIR, iodir);
   b757c:	2100      	movs	r1, #0
   b757e:	f7ff bfc0 	b.w	b7502 <_ZN17Adafruit_MCP230086write8Ehh>
    iodir &= ~(1 << p);
   b7582:	ea20 0201 	bic.w	r2, r0, r1
   b7586:	e7f5      	b.n	b7574 <_ZN17Adafruit_MCP230087pinModeEhh+0x20>
}
   b7588:	bd70      	pop	{r4, r5, r6, pc}

000b758a <_ZN17Adafruit_MCP230089writeGPIOEh>:
void Adafruit_MCP23008::writeGPIO(uint8_t gpio) {
   b758a:	460a      	mov	r2, r1
  write8(MCP23008_GPIO, gpio);
   b758c:	2109      	movs	r1, #9
   b758e:	f7ff bfb8 	b.w	b7502 <_ZN17Adafruit_MCP230086write8Ehh>

000b7592 <_ZN17Adafruit_MCP2300812digitalWriteEhh>:
  if (p > 7)
   b7592:	2907      	cmp	r1, #7
void Adafruit_MCP23008::digitalWrite(uint8_t p, uint8_t d) {
   b7594:	b570      	push	{r4, r5, r6, lr}
   b7596:	4604      	mov	r4, r0
   b7598:	460d      	mov	r5, r1
   b759a:	4616      	mov	r6, r2
  if (p > 7)
   b759c:	d810      	bhi.n	b75c0 <_ZN17Adafruit_MCP2300812digitalWriteEhh+0x2e>
  gpio = readGPIO();
   b759e:	f7ff ffad 	bl	b74fc <_ZN17Adafruit_MCP230088readGPIOEv>
    gpio |= 1 << p; 
   b75a2:	2301      	movs	r3, #1
   b75a4:	fa03 f105 	lsl.w	r1, r3, r5
   b75a8:	b249      	sxtb	r1, r1
  if (d == HIGH) {
   b75aa:	429e      	cmp	r6, r3
    gpio |= 1 << p; 
   b75ac:	bf0c      	ite	eq
   b75ae:	4301      	orreq	r1, r0
    gpio &= ~(1 << p);
   b75b0:	ea20 0101 	bicne.w	r1, r0, r1
   b75b4:	b2c9      	uxtb	r1, r1
  writeGPIO(gpio);
   b75b6:	4620      	mov	r0, r4
}
   b75b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeGPIO(gpio);
   b75bc:	f7ff bfe5 	b.w	b758a <_ZN17Adafruit_MCP230089writeGPIOEh>
}
   b75c0:	bd70      	pop	{r4, r5, r6, pc}

000b75c2 <_ZN13LiquidCrystalD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class LiquidCrystal : public Print {
   b75c2:	4770      	bx	lr

000b75c4 <_ZN13LiquidCrystalD0Ev>:
   b75c4:	b510      	push	{r4, lr}
   b75c6:	2120      	movs	r1, #32
   b75c8:	4604      	mov	r4, r0
   b75ca:	f7fc fd66 	bl	b409a <_ZdlPvj>
   b75ce:	4620      	mov	r0, r4
   b75d0:	bd10      	pop	{r4, pc}
	...

000b75d4 <_ZN13LiquidCrystalC1Eh>:
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t i2caddr) {
   b75d4:	4a06      	ldr	r2, [pc, #24]	; (b75f0 <_ZN13LiquidCrystalC1Eh+0x1c>)
   b75d6:	6002      	str	r2, [r0, #0]
  _i2cAddr = i2caddr;

  _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   b75d8:	2200      	movs	r2, #0
   b75da:	74c2      	strb	r2, [r0, #19]
    Print() : write_error(0) {}
   b75dc:	6042      	str	r2, [r0, #4]
  
  // the I/O expander pinout
  _rs_pin = 1;
   b75de:	4a05      	ldr	r2, [pc, #20]	; (b75f4 <_ZN13LiquidCrystalC1Eh+0x20>)
   b75e0:	6082      	str	r2, [r0, #8]
  _rw_pin = 255;
  _enable_pin = 2;
  _data_pins[0] = 3;  // really d4
  _data_pins[1] = 4;  // really d5
   b75e2:	f240 5204 	movw	r2, #1284	; 0x504
   b75e6:	8182      	strh	r2, [r0, #12]
  _data_pins[2] = 5;  // really d6
  _data_pins[3] = 6;  // really d7
   b75e8:	2206      	movs	r2, #6
  _i2cAddr = i2caddr;
   b75ea:	7741      	strb	r1, [r0, #29]
  _data_pins[3] = 6;  // really d7
   b75ec:	7382      	strb	r2, [r0, #14]
  
  // we can't begin() yet :(
}
   b75ee:	4770      	bx	lr
   b75f0:	000baac8 	.word	0x000baac8
   b75f4:	0302ff01 	.word	0x0302ff01

000b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>:
}

/************ low level data pushing commands **********/

// little wrapper for i/o writes
void  LiquidCrystal::_digitalWrite(uint8_t p, uint8_t d) {
   b75f8:	b570      	push	{r4, r5, r6, lr}
   b75fa:	4604      	mov	r4, r0
   b75fc:	4608      	mov	r0, r1
  if (_i2cAddr != 255) {
   b75fe:	7f63      	ldrb	r3, [r4, #29]
   b7600:	2bff      	cmp	r3, #255	; 0xff
   b7602:	d005      	beq.n	b7610 <_ZN13LiquidCrystal13_digitalWriteEhh+0x18>
    // an i2c command
    _i2c.digitalWrite(p, d);
   b7604:	f104 001e 	add.w	r0, r4, #30
    digitalWrite(_SPIlatch, HIGH);
  } else {
    // straightup IO
    digitalWrite(p, d);
  }
}
   b7608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _i2c.digitalWrite(p, d);
   b760c:	f7ff bfc1 	b.w	b7592 <_ZN17Adafruit_MCP2300812digitalWriteEhh>
  } else if (_SPIclock != 255) {
   b7610:	7e63      	ldrb	r3, [r4, #25]
   b7612:	2bff      	cmp	r3, #255	; 0xff
   b7614:	d01b      	beq.n	b764e <_ZN13LiquidCrystal13_digitalWriteEhh+0x56>
      _SPIbuff |= (1 << p);
   b7616:	2501      	movs	r5, #1
   b7618:	f994 301c 	ldrsb.w	r3, [r4, #28]
    digitalWrite(_SPIlatch, LOW);
   b761c:	7ee0      	ldrb	r0, [r4, #27]
      _SPIbuff |= (1 << p);
   b761e:	fa05 f101 	lsl.w	r1, r5, r1
    if (d == HIGH)
   b7622:	42aa      	cmp	r2, r5
      _SPIbuff |= (1 << p);
   b7624:	b249      	sxtb	r1, r1
   b7626:	bf0c      	ite	eq
   b7628:	430b      	orreq	r3, r1
      _SPIbuff &= ~(1 << p);
   b762a:	438b      	bicne	r3, r1
   b762c:	b2db      	uxtb	r3, r3
   b762e:	7723      	strb	r3, [r4, #28]
    digitalWrite(_SPIlatch, LOW);
   b7630:	2100      	movs	r1, #0
   b7632:	f001 ff22 	bl	b947a <digitalWrite>
    shiftOut(_SPIdata, _SPIclock, MSBFIRST,_SPIbuff);
   b7636:	7e61      	ldrb	r1, [r4, #25]
   b7638:	7ea0      	ldrb	r0, [r4, #26]
   b763a:	7f23      	ldrb	r3, [r4, #28]
   b763c:	2201      	movs	r2, #1
   b763e:	f001 ff85 	bl	b954c <shiftOut>
    digitalWrite(_SPIlatch, HIGH);
   b7642:	7ee0      	ldrb	r0, [r4, #27]
   b7644:	2101      	movs	r1, #1
}
   b7646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(p, d);
   b764a:	f001 bf16 	b.w	b947a <digitalWrite>
   b764e:	4611      	mov	r1, r2
   b7650:	e7f9      	b.n	b7646 <_ZN13LiquidCrystal13_digitalWriteEhh+0x4e>

000b7652 <_ZN13LiquidCrystal12setBacklightEh>:

// Allows to set the backlight, if the LCD backpack is used
void LiquidCrystal::setBacklight(uint8_t status) {
  // check if i2c or SPI
  if ((_i2cAddr != 255) || (_SPIclock != 255)) {
   b7652:	7f43      	ldrb	r3, [r0, #29]
   b7654:	2bff      	cmp	r3, #255	; 0xff
void LiquidCrystal::setBacklight(uint8_t status) {
   b7656:	460a      	mov	r2, r1
  if ((_i2cAddr != 255) || (_SPIclock != 255)) {
   b7658:	d102      	bne.n	b7660 <_ZN13LiquidCrystal12setBacklightEh+0xe>
   b765a:	7e43      	ldrb	r3, [r0, #25]
   b765c:	2bff      	cmp	r3, #255	; 0xff
   b765e:	d002      	beq.n	b7666 <_ZN13LiquidCrystal12setBacklightEh+0x14>
    _digitalWrite(7, status); // backlight is on pin 7
   b7660:	2107      	movs	r1, #7
   b7662:	f7ff bfc9 	b.w	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  }
}
   b7666:	4770      	bx	lr

000b7668 <_ZN13LiquidCrystal8_pinModeEhh>:

// little wrapper for i/o directions
void  LiquidCrystal::_pinMode(uint8_t p, uint8_t d) {
   b7668:	b430      	push	{r4, r5}
   b766a:	4603      	mov	r3, r0
   b766c:	4608      	mov	r0, r1
  if (_i2cAddr != 255) {
   b766e:	7f5d      	ldrb	r5, [r3, #29]
   b7670:	2dff      	cmp	r5, #255	; 0xff
   b7672:	d004      	beq.n	b767e <_ZN13LiquidCrystal8_pinModeEhh+0x16>
    // nothing!
  } else {
    // straightup IO
    pinMode(p, (PinMode)d);
  }
}
   b7674:	bc30      	pop	{r4, r5}
    _i2c.pinMode(p, d);
   b7676:	f103 001e 	add.w	r0, r3, #30
   b767a:	f7ff bf6b 	b.w	b7554 <_ZN17Adafruit_MCP230087pinModeEhh>
  } else if (_SPIclock != 255) {
   b767e:	7e5b      	ldrb	r3, [r3, #25]
   b7680:	2bff      	cmp	r3, #255	; 0xff
   b7682:	d103      	bne.n	b768c <_ZN13LiquidCrystal8_pinModeEhh+0x24>
}
   b7684:	bc30      	pop	{r4, r5}
    pinMode(p, (PinMode)d);
   b7686:	4611      	mov	r1, r2
   b7688:	f001 bee6 	b.w	b9458 <pinMode>
}
   b768c:	bc30      	pop	{r4, r5}
   b768e:	4770      	bx	lr

000b7690 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
   b7690:	b510      	push	{r4, lr}
  _digitalWrite(_enable_pin, LOW);
   b7692:	2200      	movs	r2, #0
void LiquidCrystal::pulseEnable(void) {
   b7694:	4604      	mov	r4, r0
  _digitalWrite(_enable_pin, LOW);
   b7696:	7a81      	ldrb	r1, [r0, #10]
   b7698:	f7ff ffae 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
   b769c:	2001      	movs	r0, #1
   b769e:	f000 fa17 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(1);    
  _digitalWrite(_enable_pin, HIGH);
   b76a2:	7aa1      	ldrb	r1, [r4, #10]
   b76a4:	2201      	movs	r2, #1
   b76a6:	4620      	mov	r0, r4
   b76a8:	f7ff ffa6 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
   b76ac:	2001      	movs	r0, #1
   b76ae:	f000 fa0f 	bl	b7ad0 <HAL_Delay_Microseconds>
  delayMicroseconds(1);    // enable pulse must be >450ns
  _digitalWrite(_enable_pin, LOW);
   b76b2:	4620      	mov	r0, r4
   b76b4:	7aa1      	ldrb	r1, [r4, #10]
   b76b6:	2200      	movs	r2, #0
   b76b8:	f7ff ff9e 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  delayMicroseconds(100);   // commands need > 37us to settle
}
   b76bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b76c0:	2064      	movs	r0, #100	; 0x64
   b76c2:	f000 ba05 	b.w	b7ad0 <HAL_Delay_Microseconds>

000b76c6 <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
   b76c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_i2cAddr != 255) {
   b76ca:	7f43      	ldrb	r3, [r0, #29]
   b76cc:	2bff      	cmp	r3, #255	; 0xff
void LiquidCrystal::write4bits(uint8_t value) {
   b76ce:	4604      	mov	r4, r0
   b76d0:	460e      	mov	r6, r1
   b76d2:	f100 050b 	add.w	r5, r0, #11
  if (_i2cAddr != 255) {
   b76d6:	d03d      	beq.n	b7754 <_ZN13LiquidCrystal10write4bitsEh+0x8e>
    uint8_t out = 0;

    out = _i2c.readGPIO();
   b76d8:	f100 081e 	add.w	r8, r0, #30
   b76dc:	4640      	mov	r0, r8
   b76de:	f7ff ff0d 	bl	b74fc <_ZN17Adafruit_MCP230088readGPIOEv>


    // speed up for i2c since its sluggish
    for (int i = 0; i < 4; i++) {
      out &= ~_BV(_data_pins[i]);
   b76e2:	2701      	movs	r7, #1
    for (int i = 0; i < 4; i++) {
   b76e4:	2200      	movs	r2, #0
      out &= ~_BV(_data_pins[i]);
   b76e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b76ea:	fa07 f301 	lsl.w	r3, r7, r1
   b76ee:	ea20 0003 	bic.w	r0, r0, r3
      out |= ((value >> i) & 0x1) << _data_pins[i];
   b76f2:	fa46 f302 	asr.w	r3, r6, r2
   b76f6:	f003 0301 	and.w	r3, r3, #1
   b76fa:	408b      	lsls	r3, r1
    for (int i = 0; i < 4; i++) {
   b76fc:	3201      	adds	r2, #1
      out |= ((value >> i) & 0x1) << _data_pins[i];
   b76fe:	4318      	orrs	r0, r3
    for (int i = 0; i < 4; i++) {
   b7700:	2a04      	cmp	r2, #4
      out |= ((value >> i) & 0x1) << _data_pins[i];
   b7702:	b241      	sxtb	r1, r0
   b7704:	b2c0      	uxtb	r0, r0
    for (int i = 0; i < 4; i++) {
   b7706:	d1ee      	bne.n	b76e6 <_ZN13LiquidCrystal10write4bitsEh+0x20>
    }

    // make sure enable is low
    out &= ~ _BV(_enable_pin);
   b7708:	7aa3      	ldrb	r3, [r4, #10]
   b770a:	fa07 f303 	lsl.w	r3, r7, r3
   b770e:	ea21 0103 	bic.w	r1, r1, r3
   b7712:	b24d      	sxtb	r5, r1

    _i2c.writeGPIO(out);
   b7714:	4640      	mov	r0, r8
   b7716:	b2c9      	uxtb	r1, r1
   b7718:	f7ff ff37 	bl	b758a <_ZN17Adafruit_MCP230089writeGPIOEh>
   b771c:	2001      	movs	r0, #1
   b771e:	f000 f9d7 	bl	b7ad0 <HAL_Delay_Microseconds>

    // pulse enable
    delayMicroseconds(1);
    out |= _BV(_enable_pin);
   b7722:	7aa1      	ldrb	r1, [r4, #10]
   b7724:	fa07 f101 	lsl.w	r1, r7, r1
   b7728:	4329      	orrs	r1, r5
   b772a:	b24d      	sxtb	r5, r1
    _i2c.writeGPIO(out);
   b772c:	4640      	mov	r0, r8
   b772e:	b2c9      	uxtb	r1, r1
   b7730:	f7ff ff2b 	bl	b758a <_ZN17Adafruit_MCP230089writeGPIOEh>
   b7734:	2001      	movs	r0, #1
   b7736:	f000 f9cb 	bl	b7ad0 <HAL_Delay_Microseconds>
    delayMicroseconds(1);
    out &= ~_BV(_enable_pin);
   b773a:	7aa1      	ldrb	r1, [r4, #10]
   b773c:	408f      	lsls	r7, r1
   b773e:	ea25 0707 	bic.w	r7, r5, r7
    _i2c.writeGPIO(out);   
   b7742:	4640      	mov	r0, r8
   b7744:	b2f9      	uxtb	r1, r7
   b7746:	f7ff ff20 	bl	b758a <_ZN17Adafruit_MCP230089writeGPIOEh>
      _pinMode(_data_pins[i], OUTPUT);
      _digitalWrite(_data_pins[i], (value >> i) & 0x01);
    }
    pulseEnable();
  }
}
   b774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b774e:	2064      	movs	r0, #100	; 0x64
   b7750:	f000 b9be 	b.w	b7ad0 <HAL_Delay_Microseconds>
    for (int i = 0; i < 4; i++) {
   b7754:	2700      	movs	r7, #0
      _pinMode(_data_pins[i], OUTPUT);
   b7756:	7829      	ldrb	r1, [r5, #0]
   b7758:	2201      	movs	r2, #1
   b775a:	4620      	mov	r0, r4
   b775c:	f7ff ff84 	bl	b7668 <_ZN13LiquidCrystal8_pinModeEhh>
      _digitalWrite(_data_pins[i], (value >> i) & 0x01);
   b7760:	fa46 f207 	asr.w	r2, r6, r7
   b7764:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7768:	f002 0201 	and.w	r2, r2, #1
   b776c:	4620      	mov	r0, r4
    for (int i = 0; i < 4; i++) {
   b776e:	3701      	adds	r7, #1
      _digitalWrite(_data_pins[i], (value >> i) & 0x01);
   b7770:	f7ff ff42 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
    for (int i = 0; i < 4; i++) {
   b7774:	2f04      	cmp	r7, #4
   b7776:	d1ee      	bne.n	b7756 <_ZN13LiquidCrystal10write4bitsEh+0x90>
    pulseEnable();
   b7778:	4620      	mov	r0, r4
}
   b777a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    pulseEnable();
   b777e:	f7ff bf87 	b.w	b7690 <_ZN13LiquidCrystal11pulseEnableEv>

000b7782 <_ZN13LiquidCrystal10write8bitsEh>:

void LiquidCrystal::write8bits(uint8_t value) {
   b7782:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7784:	460e      	mov	r6, r1
   b7786:	f100 050b 	add.w	r5, r0, #11
  for (int i = 0; i < 8; i++) {
   b778a:	2400      	movs	r4, #0
    _pinMode(_data_pins[i], OUTPUT);
   b778c:	7829      	ldrb	r1, [r5, #0]
   b778e:	9001      	str	r0, [sp, #4]
   b7790:	2201      	movs	r2, #1
   b7792:	f7ff ff69 	bl	b7668 <_ZN13LiquidCrystal8_pinModeEhh>
    _digitalWrite(_data_pins[i], (value >> i) & 0x01);
   b7796:	fa46 f204 	asr.w	r2, r6, r4
   b779a:	9801      	ldr	r0, [sp, #4]
   b779c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b77a0:	f002 0201 	and.w	r2, r2, #1
  for (int i = 0; i < 8; i++) {
   b77a4:	3401      	adds	r4, #1
    _digitalWrite(_data_pins[i], (value >> i) & 0x01);
   b77a6:	f7ff ff27 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  for (int i = 0; i < 8; i++) {
   b77aa:	2c08      	cmp	r4, #8
   b77ac:	9801      	ldr	r0, [sp, #4]
   b77ae:	d1ed      	bne.n	b778c <_ZN13LiquidCrystal10write8bitsEh+0xa>
  }
  
  pulseEnable();
}
   b77b0:	b002      	add	sp, #8
   b77b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pulseEnable();
   b77b6:	f7ff bf6b 	b.w	b7690 <_ZN13LiquidCrystal11pulseEnableEv>

000b77ba <_ZN13LiquidCrystal4sendEhh>:
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
   b77ba:	b538      	push	{r3, r4, r5, lr}
   b77bc:	4604      	mov	r4, r0
   b77be:	460d      	mov	r5, r1
  _digitalWrite(_rs_pin, mode);
   b77c0:	7a01      	ldrb	r1, [r0, #8]
   b77c2:	f7ff ff19 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  if (_rw_pin != 255) { 
   b77c6:	7a61      	ldrb	r1, [r4, #9]
   b77c8:	29ff      	cmp	r1, #255	; 0xff
   b77ca:	d003      	beq.n	b77d4 <_ZN13LiquidCrystal4sendEhh+0x1a>
    _digitalWrite(_rw_pin, LOW);
   b77cc:	2200      	movs	r2, #0
   b77ce:	4620      	mov	r0, r4
   b77d0:	f7ff ff12 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  if (_displayfunction & LCD_8BITMODE) {
   b77d4:	7ce3      	ldrb	r3, [r4, #19]
   b77d6:	06db      	lsls	r3, r3, #27
   b77d8:	d505      	bpl.n	b77e6 <_ZN13LiquidCrystal4sendEhh+0x2c>
    write8bits(value); 
   b77da:	4629      	mov	r1, r5
   b77dc:	4620      	mov	r0, r4
}
   b77de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write8bits(value); 
   b77e2:	f7ff bfce 	b.w	b7782 <_ZN13LiquidCrystal10write8bitsEh>
    write4bits(value>>4);
   b77e6:	0929      	lsrs	r1, r5, #4
   b77e8:	4620      	mov	r0, r4
   b77ea:	f7ff ff6c 	bl	b76c6 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
   b77ee:	4629      	mov	r1, r5
   b77f0:	4620      	mov	r0, r4
}
   b77f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    write4bits(value);
   b77f6:	f7ff bf66 	b.w	b76c6 <_ZN13LiquidCrystal10write4bitsEh>

000b77fa <_ZN13LiquidCrystal5writeEh>:
inline size_t LiquidCrystal::write(uint8_t value) {
   b77fa:	b508      	push	{r3, lr}
  send(value, HIGH);
   b77fc:	2201      	movs	r2, #1
   b77fe:	f7ff ffdc 	bl	b77ba <_ZN13LiquidCrystal4sendEhh>
}
   b7802:	2001      	movs	r0, #1
   b7804:	bd08      	pop	{r3, pc}

000b7806 <_ZN13LiquidCrystal7commandEh>:
  send(value, LOW);
   b7806:	2200      	movs	r2, #0
   b7808:	f7ff bfd7 	b.w	b77ba <_ZN13LiquidCrystal4sendEhh>

000b780c <_ZN13LiquidCrystal5clearEv>:
{
   b780c:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
   b780e:	2101      	movs	r1, #1
   b7810:	f7ff fff9 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
}
   b7814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b781c:	f000 b958 	b.w	b7ad0 <HAL_Delay_Microseconds>

000b7820 <_ZN13LiquidCrystal9setCursorEhh>:
{
   b7820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   b7822:	4b0e      	ldr	r3, [pc, #56]	; (b785c <_ZN13LiquidCrystal9setCursorEhh+0x3c>)
{
   b7824:	4606      	mov	r6, r0
   b7826:	4615      	mov	r5, r2
   b7828:	460c      	mov	r4, r1
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   b782a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b782c:	f10d 0c10 	add.w	ip, sp, #16
   b7830:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  if ( row > _numlines ) {
   b7834:	7df2      	ldrb	r2, [r6, #23]
   b7836:	42aa      	cmp	r2, r5
    row = _numlines-1;    // we count rows starting w/0
   b7838:	bf3c      	itt	cc
   b783a:	f102 32ff 	addcc.w	r2, r2, #4294967295
   b783e:	b2d5      	uxtbcc	r5, r2
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
   b7840:	ab04      	add	r3, sp, #16
   b7842:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   b7846:	4630      	mov	r0, r6
   b7848:	f855 1c10 	ldr.w	r1, [r5, #-16]
   b784c:	4421      	add	r1, r4
   b784e:	f061 017f 	orn	r1, r1, #127	; 0x7f
   b7852:	b2c9      	uxtb	r1, r1
   b7854:	f7ff ffd7 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
}
   b7858:	b004      	add	sp, #16
   b785a:	bd70      	pop	{r4, r5, r6, pc}
   b785c:	000baad8 	.word	0x000baad8

000b7860 <_ZN13LiquidCrystal7displayEv>:
void LiquidCrystal::display() {
   b7860:	b508      	push	{r3, lr}
  _displaycontrol |= LCD_DISPLAYON;
   b7862:	7d01      	ldrb	r1, [r0, #20]
   b7864:	f041 0204 	orr.w	r2, r1, #4
   b7868:	7502      	strb	r2, [r0, #20]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
   b786a:	f041 010c 	orr.w	r1, r1, #12
   b786e:	f7ff ffca 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
}
   b7872:	bd08      	pop	{r3, pc}

000b7874 <_ZN13LiquidCrystal5beginEhhh>:
void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   b7874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (_i2cAddr != 255) {
   b7878:	7f41      	ldrb	r1, [r0, #29]
   b787a:	29ff      	cmp	r1, #255	; 0xff
void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   b787c:	4604      	mov	r4, r0
   b787e:	4615      	mov	r5, r2
   b7880:	461f      	mov	r7, r3
  if (_i2cAddr != 255) {
   b7882:	d07e      	beq.n	b7982 <_ZN13LiquidCrystal5beginEhhh+0x10e>
    _i2c.begin(_i2cAddr);
   b7884:	f100 061e 	add.w	r6, r0, #30
   b7888:	4630      	mov	r0, r6
   b788a:	f7ff fd85 	bl	b7398 <_ZN17Adafruit_MCP230085beginEh>
    _i2c.pinMode(7, OUTPUT); // backlight
   b788e:	2201      	movs	r2, #1
   b7890:	2107      	movs	r1, #7
   b7892:	4630      	mov	r0, r6
   b7894:	f7ff fe5e 	bl	b7554 <_ZN17Adafruit_MCP230087pinModeEhh>
    _i2c.digitalWrite(7, HIGH); // backlight
   b7898:	2201      	movs	r2, #1
   b789a:	2107      	movs	r1, #7
   b789c:	4630      	mov	r0, r6
   b789e:	f7ff fe78 	bl	b7592 <_ZN17Adafruit_MCP2300812digitalWriteEhh>
    for (uint8_t i=0; i<4; i++)
   b78a2:	f104 080b 	add.w	r8, r4, #11
   b78a6:	f104 090f 	add.w	r9, r4, #15
      _pinMode(_data_pins[i], OUTPUT);
   b78aa:	f818 1b01 	ldrb.w	r1, [r8], #1
   b78ae:	2201      	movs	r2, #1
   b78b0:	4620      	mov	r0, r4
   b78b2:	f7ff fed9 	bl	b7668 <_ZN13LiquidCrystal8_pinModeEhh>
    for (uint8_t i=0; i<4; i++)
   b78b6:	45c8      	cmp	r8, r9
   b78b8:	d1f7      	bne.n	b78aa <_ZN13LiquidCrystal5beginEhhh+0x36>
    _i2c.pinMode(_rs_pin, OUTPUT);
   b78ba:	7a21      	ldrb	r1, [r4, #8]
   b78bc:	2201      	movs	r2, #1
   b78be:	4630      	mov	r0, r6
   b78c0:	f7ff fe48 	bl	b7554 <_ZN17Adafruit_MCP230087pinModeEhh>
    _i2c.pinMode(_enable_pin, OUTPUT);
   b78c4:	7aa1      	ldrb	r1, [r4, #10]
   b78c6:	2201      	movs	r2, #1
   b78c8:	4630      	mov	r0, r6
   b78ca:	f7ff fe43 	bl	b7554 <_ZN17Adafruit_MCP230087pinModeEhh>
  if (lines > 1) {
   b78ce:	2d01      	cmp	r5, #1
    _displayfunction |= LCD_2LINE;
   b78d0:	bf88      	it	hi
   b78d2:	7ce3      	ldrbhi	r3, [r4, #19]
  _numlines = lines;
   b78d4:	75e5      	strb	r5, [r4, #23]
    _displayfunction |= LCD_2LINE;
   b78d6:	bf84      	itt	hi
   b78d8:	f043 0308 	orrhi.w	r3, r3, #8
   b78dc:	74e3      	strbhi	r3, [r4, #19]
  _currline = 0;
   b78de:	2300      	movs	r3, #0
   b78e0:	7623      	strb	r3, [r4, #24]
  if ((dotsize != 0) && (lines == 1)) {
   b78e2:	b12f      	cbz	r7, b78f0 <_ZN13LiquidCrystal5beginEhhh+0x7c>
   b78e4:	2d01      	cmp	r5, #1
    _displayfunction |= LCD_5x10DOTS;
   b78e6:	bf02      	ittt	eq
   b78e8:	7ce3      	ldrbeq	r3, [r4, #19]
   b78ea:	f043 0304 	orreq.w	r3, r3, #4
   b78ee:	74e3      	strbeq	r3, [r4, #19]
   b78f0:	f24c 3050 	movw	r0, #50000	; 0xc350
   b78f4:	f000 f8ec 	bl	b7ad0 <HAL_Delay_Microseconds>
  _digitalWrite(_rs_pin, LOW);
   b78f8:	7a21      	ldrb	r1, [r4, #8]
   b78fa:	2200      	movs	r2, #0
   b78fc:	4620      	mov	r0, r4
   b78fe:	f7ff fe7b 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  _digitalWrite(_enable_pin, LOW);
   b7902:	7aa1      	ldrb	r1, [r4, #10]
   b7904:	2200      	movs	r2, #0
   b7906:	4620      	mov	r0, r4
   b7908:	f7ff fe76 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  if (_rw_pin != 255) { 
   b790c:	7a61      	ldrb	r1, [r4, #9]
   b790e:	29ff      	cmp	r1, #255	; 0xff
   b7910:	d003      	beq.n	b791a <_ZN13LiquidCrystal5beginEhhh+0xa6>
    _digitalWrite(_rw_pin, LOW);
   b7912:	2200      	movs	r2, #0
   b7914:	4620      	mov	r0, r4
   b7916:	f7ff fe6f 	bl	b75f8 <_ZN13LiquidCrystal13_digitalWriteEhh>
  if (! (_displayfunction & LCD_8BITMODE)) {
   b791a:	7ce1      	ldrb	r1, [r4, #19]
   b791c:	06cb      	lsls	r3, r1, #27
   b791e:	d436      	bmi.n	b798e <_ZN13LiquidCrystal5beginEhhh+0x11a>
    write4bits(0x03);
   b7920:	2103      	movs	r1, #3
   b7922:	4620      	mov	r0, r4
   b7924:	f7ff fecf 	bl	b76c6 <_ZN13LiquidCrystal10write4bitsEh>
   b7928:	f241 1094 	movw	r0, #4500	; 0x1194
   b792c:	f000 f8d0 	bl	b7ad0 <HAL_Delay_Microseconds>
    write4bits(0x03);
   b7930:	2103      	movs	r1, #3
   b7932:	4620      	mov	r0, r4
   b7934:	f7ff fec7 	bl	b76c6 <_ZN13LiquidCrystal10write4bitsEh>
   b7938:	f241 1094 	movw	r0, #4500	; 0x1194
   b793c:	f000 f8c8 	bl	b7ad0 <HAL_Delay_Microseconds>
    write4bits(0x03); 
   b7940:	2103      	movs	r1, #3
   b7942:	4620      	mov	r0, r4
   b7944:	f7ff febf 	bl	b76c6 <_ZN13LiquidCrystal10write4bitsEh>
   b7948:	2096      	movs	r0, #150	; 0x96
   b794a:	f000 f8c1 	bl	b7ad0 <HAL_Delay_Microseconds>
    write4bits(0x02); 
   b794e:	2102      	movs	r1, #2
   b7950:	4620      	mov	r0, r4
   b7952:	f7ff feb8 	bl	b76c6 <_ZN13LiquidCrystal10write4bitsEh>
  command(LCD_FUNCTIONSET | _displayfunction);  
   b7956:	7ce1      	ldrb	r1, [r4, #19]
   b7958:	4620      	mov	r0, r4
   b795a:	f041 0120 	orr.w	r1, r1, #32
   b795e:	f7ff ff52 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
   b7962:	2304      	movs	r3, #4
   b7964:	7523      	strb	r3, [r4, #20]
  display();
   b7966:	4620      	mov	r0, r4
   b7968:	f7ff ff7a 	bl	b7860 <_ZN13LiquidCrystal7displayEv>
  clear();
   b796c:	4620      	mov	r0, r4
   b796e:	f7ff ff4d 	bl	b780c <_ZN13LiquidCrystal5clearEv>
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   b7972:	2302      	movs	r3, #2
   b7974:	7563      	strb	r3, [r4, #21]
  command(LCD_ENTRYMODESET | _displaymode);
   b7976:	2106      	movs	r1, #6
   b7978:	4620      	mov	r0, r4
   b797a:	f7ff ff44 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
}
   b797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (_SPIclock != 255) {
   b7982:	7e43      	ldrb	r3, [r0, #25]
   b7984:	2bff      	cmp	r3, #255	; 0xff
    _SPIbuff = 0x80; // backlight
   b7986:	bf1c      	itt	ne
   b7988:	2380      	movne	r3, #128	; 0x80
   b798a:	7703      	strbne	r3, [r0, #28]
   b798c:	e79f      	b.n	b78ce <_ZN13LiquidCrystal5beginEhhh+0x5a>
    command(LCD_FUNCTIONSET | _displayfunction);
   b798e:	f041 0120 	orr.w	r1, r1, #32
   b7992:	4620      	mov	r0, r4
   b7994:	f7ff ff37 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
   b7998:	f241 1094 	movw	r0, #4500	; 0x1194
   b799c:	f000 f898 	bl	b7ad0 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
   b79a0:	7ce1      	ldrb	r1, [r4, #19]
   b79a2:	4620      	mov	r0, r4
   b79a4:	f041 0120 	orr.w	r1, r1, #32
   b79a8:	f7ff ff2d 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
   b79ac:	2096      	movs	r0, #150	; 0x96
   b79ae:	f000 f88f 	bl	b7ad0 <HAL_Delay_Microseconds>
    command(LCD_FUNCTIONSET | _displayfunction);
   b79b2:	7ce1      	ldrb	r1, [r4, #19]
   b79b4:	4620      	mov	r0, r4
   b79b6:	f041 0120 	orr.w	r1, r1, #32
   b79ba:	f7ff ff24 	bl	b7806 <_ZN13LiquidCrystal7commandEh>
   b79be:	e7ca      	b.n	b7956 <_ZN13LiquidCrystal5beginEhhh+0xe2>

000b79c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b79c0:	b508      	push	{r3, lr}
   b79c2:	4b02      	ldr	r3, [pc, #8]	; (b79cc <netdb_freeaddrinfo+0xc>)
   b79c4:	681b      	ldr	r3, [r3, #0]
   b79c6:	689b      	ldr	r3, [r3, #8]
   b79c8:	9301      	str	r3, [sp, #4]
   b79ca:	bd08      	pop	{r3, pc}
   b79cc:	00030268 	.word	0x00030268

000b79d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b79d0:	b508      	push	{r3, lr}
   b79d2:	4b02      	ldr	r3, [pc, #8]	; (b79dc <netdb_getaddrinfo+0xc>)
   b79d4:	681b      	ldr	r3, [r3, #0]
   b79d6:	68db      	ldr	r3, [r3, #12]
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	bd08      	pop	{r3, pc}
   b79dc:	00030268 	.word	0x00030268

000b79e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <HAL_Pin_Map+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	681b      	ldr	r3, [r3, #0]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	0003022c 	.word	0x0003022c

000b79f0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <HAL_Validate_Pin_Function+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	685b      	ldr	r3, [r3, #4]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	0003022c 	.word	0x0003022c

000b7a00 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <HAL_Pin_Mode+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	689b      	ldr	r3, [r3, #8]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	0003022c 	.word	0x0003022c

000b7a10 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <HAL_Get_Pin_Mode+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	68db      	ldr	r3, [r3, #12]
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	0003022c 	.word	0x0003022c

000b7a20 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <HAL_GPIO_Write+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	691b      	ldr	r3, [r3, #16]
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	0003022c 	.word	0x0003022c

000b7a30 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <HAL_GPIO_Read+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	695b      	ldr	r3, [r3, #20]
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	0003022c 	.word	0x0003022c

000b7a40 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <HAL_Interrupts_Attach+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	699b      	ldr	r3, [r3, #24]
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	0003022c 	.word	0x0003022c

000b7a50 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b02      	ldr	r3, [pc, #8]	; (b7a5c <HAL_Interrupts_Detach+0xc>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	69db      	ldr	r3, [r3, #28]
   b7a58:	9301      	str	r3, [sp, #4]
   b7a5a:	bd08      	pop	{r3, pc}
   b7a5c:	0003022c 	.word	0x0003022c

000b7a60 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b7a60:	b508      	push	{r3, lr}
   b7a62:	4b02      	ldr	r3, [pc, #8]	; (b7a6c <HAL_Interrupts_Enable_All+0xc>)
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	6a1b      	ldr	r3, [r3, #32]
   b7a68:	9301      	str	r3, [sp, #4]
   b7a6a:	bd08      	pop	{r3, pc}
   b7a6c:	0003022c 	.word	0x0003022c

000b7a70 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b7a70:	b508      	push	{r3, lr}
   b7a72:	4b02      	ldr	r3, [pc, #8]	; (b7a7c <HAL_Interrupts_Disable_All+0xc>)
   b7a74:	681b      	ldr	r3, [r3, #0]
   b7a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7a78:	9301      	str	r3, [sp, #4]
   b7a7a:	bd08      	pop	{r3, pc}
   b7a7c:	0003022c 	.word	0x0003022c

000b7a80 <HAL_DAC_Write>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b7a80:	b508      	push	{r3, lr}
   b7a82:	4b02      	ldr	r3, [pc, #8]	; (b7a8c <HAL_DAC_Write+0xc>)
   b7a84:	681b      	ldr	r3, [r3, #0]
   b7a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7a88:	9301      	str	r3, [sp, #4]
   b7a8a:	bd08      	pop	{r3, pc}
   b7a8c:	0003022c 	.word	0x0003022c

000b7a90 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7a90:	b508      	push	{r3, lr}
   b7a92:	4b02      	ldr	r3, [pc, #8]	; (b7a9c <hal_adc_read+0xc>)
   b7a94:	681b      	ldr	r3, [r3, #0]
   b7a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7a98:	9301      	str	r3, [sp, #4]
   b7a9a:	bd08      	pop	{r3, pc}
   b7a9c:	0003022c 	.word	0x0003022c

000b7aa0 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b7aa0:	b508      	push	{r3, lr}
   b7aa2:	4b02      	ldr	r3, [pc, #8]	; (b7aac <hal_pwm_write_ext+0xc>)
   b7aa4:	681b      	ldr	r3, [r3, #0]
   b7aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	bd08      	pop	{r3, pc}
   b7aac:	0003022c 	.word	0x0003022c

000b7ab0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7ab0:	b508      	push	{r3, lr}
   b7ab2:	4b02      	ldr	r3, [pc, #8]	; (b7abc <if_index_to_name+0xc>)
   b7ab4:	681b      	ldr	r3, [r3, #0]
   b7ab6:	695b      	ldr	r3, [r3, #20]
   b7ab8:	9301      	str	r3, [sp, #4]
   b7aba:	bd08      	pop	{r3, pc}
   b7abc:	0003026c 	.word	0x0003026c

000b7ac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7ac0:	b508      	push	{r3, lr}
   b7ac2:	4b02      	ldr	r3, [pc, #8]	; (b7acc <HAL_RNG_GetRandomNumber+0xc>)
   b7ac4:	681b      	ldr	r3, [r3, #0]
   b7ac6:	685b      	ldr	r3, [r3, #4]
   b7ac8:	9301      	str	r3, [sp, #4]
   b7aca:	bd08      	pop	{r3, pc}
   b7acc:	00030218 	.word	0x00030218

000b7ad0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7ad0:	b508      	push	{r3, lr}
   b7ad2:	4b02      	ldr	r3, [pc, #8]	; (b7adc <HAL_Delay_Microseconds+0xc>)
   b7ad4:	681b      	ldr	r3, [r3, #0]
   b7ad6:	68db      	ldr	r3, [r3, #12]
   b7ad8:	9301      	str	r3, [sp, #4]
   b7ada:	bd08      	pop	{r3, pc}
   b7adc:	00030218 	.word	0x00030218

000b7ae0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7ae0:	b508      	push	{r3, lr}
   b7ae2:	4b02      	ldr	r3, [pc, #8]	; (b7aec <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7ae4:	681b      	ldr	r3, [r3, #0]
   b7ae6:	691b      	ldr	r3, [r3, #16]
   b7ae8:	9301      	str	r3, [sp, #4]
   b7aea:	bd08      	pop	{r3, pc}
   b7aec:	00030218 	.word	0x00030218

000b7af0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7af0:	b508      	push	{r3, lr}
   b7af2:	4b02      	ldr	r3, [pc, #8]	; (b7afc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7af4:	681b      	ldr	r3, [r3, #0]
   b7af6:	695b      	ldr	r3, [r3, #20]
   b7af8:	9301      	str	r3, [sp, #4]
   b7afa:	bd08      	pop	{r3, pc}
   b7afc:	00030218 	.word	0x00030218

000b7b00 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b7b00:	b508      	push	{r3, lr}
   b7b02:	4b02      	ldr	r3, [pc, #8]	; (b7b0c <os_thread_yield+0xc>)
   b7b04:	681b      	ldr	r3, [r3, #0]
   b7b06:	68db      	ldr	r3, [r3, #12]
   b7b08:	9301      	str	r3, [sp, #4]
   b7b0a:	bd08      	pop	{r3, pc}
   b7b0c:	00030248 	.word	0x00030248

000b7b10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7b10:	b508      	push	{r3, lr}
   b7b12:	4b02      	ldr	r3, [pc, #8]	; (b7b1c <os_mutex_recursive_create+0xc>)
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b18:	9301      	str	r3, [sp, #4]
   b7b1a:	bd08      	pop	{r3, pc}
   b7b1c:	00030248 	.word	0x00030248

000b7b20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7b20:	b508      	push	{r3, lr}
   b7b22:	4b02      	ldr	r3, [pc, #8]	; (b7b2c <inet_inet_ntop+0xc>)
   b7b24:	681b      	ldr	r3, [r3, #0]
   b7b26:	695b      	ldr	r3, [r3, #20]
   b7b28:	9301      	str	r3, [sp, #4]
   b7b2a:	bd08      	pop	{r3, pc}
   b7b2c:	00030264 	.word	0x00030264

000b7b30 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b7b30:	b508      	push	{r3, lr}
   b7b32:	4b02      	ldr	r3, [pc, #8]	; (b7b3c <inet_htonl+0xc>)
   b7b34:	681b      	ldr	r3, [r3, #0]
   b7b36:	6a1b      	ldr	r3, [r3, #32]
   b7b38:	9301      	str	r3, [sp, #4]
   b7b3a:	bd08      	pop	{r3, pc}
   b7b3c:	00030264 	.word	0x00030264

000b7b40 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7b40:	b508      	push	{r3, lr}
   b7b42:	4b02      	ldr	r3, [pc, #8]	; (b7b4c <inet_htons+0xc>)
   b7b44:	681b      	ldr	r3, [r3, #0]
   b7b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b48:	9301      	str	r3, [sp, #4]
   b7b4a:	bd08      	pop	{r3, pc}
   b7b4c:	00030264 	.word	0x00030264

000b7b50 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7b50:	b508      	push	{r3, lr}
   b7b52:	4b02      	ldr	r3, [pc, #8]	; (b7b5c <hal_usart_write+0xc>)
   b7b54:	681b      	ldr	r3, [r3, #0]
   b7b56:	68db      	ldr	r3, [r3, #12]
   b7b58:	9301      	str	r3, [sp, #4]
   b7b5a:	bd08      	pop	{r3, pc}
   b7b5c:	0003023c 	.word	0x0003023c

000b7b60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7b60:	b508      	push	{r3, lr}
   b7b62:	4b02      	ldr	r3, [pc, #8]	; (b7b6c <hal_usart_available+0xc>)
   b7b64:	681b      	ldr	r3, [r3, #0]
   b7b66:	691b      	ldr	r3, [r3, #16]
   b7b68:	9301      	str	r3, [sp, #4]
   b7b6a:	bd08      	pop	{r3, pc}
   b7b6c:	0003023c 	.word	0x0003023c

000b7b70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7b70:	b508      	push	{r3, lr}
   b7b72:	4b02      	ldr	r3, [pc, #8]	; (b7b7c <hal_usart_read+0xc>)
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	695b      	ldr	r3, [r3, #20]
   b7b78:	9301      	str	r3, [sp, #4]
   b7b7a:	bd08      	pop	{r3, pc}
   b7b7c:	0003023c 	.word	0x0003023c

000b7b80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7b80:	b508      	push	{r3, lr}
   b7b82:	4b02      	ldr	r3, [pc, #8]	; (b7b8c <hal_usart_peek+0xc>)
   b7b84:	681b      	ldr	r3, [r3, #0]
   b7b86:	699b      	ldr	r3, [r3, #24]
   b7b88:	9301      	str	r3, [sp, #4]
   b7b8a:	bd08      	pop	{r3, pc}
   b7b8c:	0003023c 	.word	0x0003023c

000b7b90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7b90:	b508      	push	{r3, lr}
   b7b92:	4b02      	ldr	r3, [pc, #8]	; (b7b9c <hal_usart_flush+0xc>)
   b7b94:	681b      	ldr	r3, [r3, #0]
   b7b96:	69db      	ldr	r3, [r3, #28]
   b7b98:	9301      	str	r3, [sp, #4]
   b7b9a:	bd08      	pop	{r3, pc}
   b7b9c:	0003023c 	.word	0x0003023c

000b7ba0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7ba0:	b508      	push	{r3, lr}
   b7ba2:	4b02      	ldr	r3, [pc, #8]	; (b7bac <hal_usart_is_enabled+0xc>)
   b7ba4:	681b      	ldr	r3, [r3, #0]
   b7ba6:	6a1b      	ldr	r3, [r3, #32]
   b7ba8:	9301      	str	r3, [sp, #4]
   b7baa:	bd08      	pop	{r3, pc}
   b7bac:	0003023c 	.word	0x0003023c

000b7bb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7bb0:	b508      	push	{r3, lr}
   b7bb2:	4b02      	ldr	r3, [pc, #8]	; (b7bbc <hal_usart_available_data_for_write+0xc>)
   b7bb4:	681b      	ldr	r3, [r3, #0]
   b7bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7bb8:	9301      	str	r3, [sp, #4]
   b7bba:	bd08      	pop	{r3, pc}
   b7bbc:	0003023c 	.word	0x0003023c

000b7bc0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7bc0:	b508      	push	{r3, lr}
   b7bc2:	4b02      	ldr	r3, [pc, #8]	; (b7bcc <hal_usart_init_ex+0xc>)
   b7bc4:	681b      	ldr	r3, [r3, #0]
   b7bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7bc8:	9301      	str	r3, [sp, #4]
   b7bca:	bd08      	pop	{r3, pc}
   b7bcc:	0003023c 	.word	0x0003023c

000b7bd0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7bd0:	b508      	push	{r3, lr}
   b7bd2:	4b02      	ldr	r3, [pc, #8]	; (b7bdc <hal_i2c_begin+0xc>)
   b7bd4:	681b      	ldr	r3, [r3, #0]
   b7bd6:	68db      	ldr	r3, [r3, #12]
   b7bd8:	9301      	str	r3, [sp, #4]
   b7bda:	bd08      	pop	{r3, pc}
   b7bdc:	00030228 	.word	0x00030228

000b7be0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7be0:	b508      	push	{r3, lr}
   b7be2:	4b02      	ldr	r3, [pc, #8]	; (b7bec <hal_i2c_begin_transmission+0xc>)
   b7be4:	681b      	ldr	r3, [r3, #0]
   b7be6:	699b      	ldr	r3, [r3, #24]
   b7be8:	9301      	str	r3, [sp, #4]
   b7bea:	bd08      	pop	{r3, pc}
   b7bec:	00030228 	.word	0x00030228

000b7bf0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7bf0:	b508      	push	{r3, lr}
   b7bf2:	4b02      	ldr	r3, [pc, #8]	; (b7bfc <hal_i2c_end_transmission+0xc>)
   b7bf4:	681b      	ldr	r3, [r3, #0]
   b7bf6:	69db      	ldr	r3, [r3, #28]
   b7bf8:	9301      	str	r3, [sp, #4]
   b7bfa:	bd08      	pop	{r3, pc}
   b7bfc:	00030228 	.word	0x00030228

000b7c00 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7c00:	b508      	push	{r3, lr}
   b7c02:	4b02      	ldr	r3, [pc, #8]	; (b7c0c <hal_i2c_write+0xc>)
   b7c04:	681b      	ldr	r3, [r3, #0]
   b7c06:	6a1b      	ldr	r3, [r3, #32]
   b7c08:	9301      	str	r3, [sp, #4]
   b7c0a:	bd08      	pop	{r3, pc}
   b7c0c:	00030228 	.word	0x00030228

000b7c10 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7c10:	b508      	push	{r3, lr}
   b7c12:	4b02      	ldr	r3, [pc, #8]	; (b7c1c <hal_i2c_available+0xc>)
   b7c14:	681b      	ldr	r3, [r3, #0]
   b7c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c18:	9301      	str	r3, [sp, #4]
   b7c1a:	bd08      	pop	{r3, pc}
   b7c1c:	00030228 	.word	0x00030228

000b7c20 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7c20:	b508      	push	{r3, lr}
   b7c22:	4b02      	ldr	r3, [pc, #8]	; (b7c2c <hal_i2c_read+0xc>)
   b7c24:	681b      	ldr	r3, [r3, #0]
   b7c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c28:	9301      	str	r3, [sp, #4]
   b7c2a:	bd08      	pop	{r3, pc}
   b7c2c:	00030228 	.word	0x00030228

000b7c30 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7c30:	b508      	push	{r3, lr}
   b7c32:	4b02      	ldr	r3, [pc, #8]	; (b7c3c <hal_i2c_peek+0xc>)
   b7c34:	681b      	ldr	r3, [r3, #0]
   b7c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c38:	9301      	str	r3, [sp, #4]
   b7c3a:	bd08      	pop	{r3, pc}
   b7c3c:	00030228 	.word	0x00030228

000b7c40 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7c40:	b508      	push	{r3, lr}
   b7c42:	4b02      	ldr	r3, [pc, #8]	; (b7c4c <hal_i2c_flush+0xc>)
   b7c44:	681b      	ldr	r3, [r3, #0]
   b7c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c48:	9301      	str	r3, [sp, #4]
   b7c4a:	bd08      	pop	{r3, pc}
   b7c4c:	00030228 	.word	0x00030228

000b7c50 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7c50:	b508      	push	{r3, lr}
   b7c52:	4b02      	ldr	r3, [pc, #8]	; (b7c5c <hal_i2c_is_enabled+0xc>)
   b7c54:	681b      	ldr	r3, [r3, #0]
   b7c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7c58:	9301      	str	r3, [sp, #4]
   b7c5a:	bd08      	pop	{r3, pc}
   b7c5c:	00030228 	.word	0x00030228

000b7c60 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7c60:	b508      	push	{r3, lr}
   b7c62:	4b02      	ldr	r3, [pc, #8]	; (b7c6c <hal_i2c_init+0xc>)
   b7c64:	681b      	ldr	r3, [r3, #0]
   b7c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c68:	9301      	str	r3, [sp, #4]
   b7c6a:	bd08      	pop	{r3, pc}
   b7c6c:	00030228 	.word	0x00030228

000b7c70 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7c70:	b508      	push	{r3, lr}
   b7c72:	4b02      	ldr	r3, [pc, #8]	; (b7c7c <hal_i2c_request_ex+0xc>)
   b7c74:	681b      	ldr	r3, [r3, #0]
   b7c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7c78:	9301      	str	r3, [sp, #4]
   b7c7a:	bd08      	pop	{r3, pc}
   b7c7c:	00030228 	.word	0x00030228

000b7c80 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7c80:	b508      	push	{r3, lr}
   b7c82:	4b02      	ldr	r3, [pc, #8]	; (b7c8c <sock_setsockopt+0xc>)
   b7c84:	681b      	ldr	r3, [r3, #0]
   b7c86:	699b      	ldr	r3, [r3, #24]
   b7c88:	9301      	str	r3, [sp, #4]
   b7c8a:	bd08      	pop	{r3, pc}
   b7c8c:	00030238 	.word	0x00030238

000b7c90 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7c90:	b508      	push	{r3, lr}
   b7c92:	4b02      	ldr	r3, [pc, #8]	; (b7c9c <sock_close+0xc>)
   b7c94:	681b      	ldr	r3, [r3, #0]
   b7c96:	69db      	ldr	r3, [r3, #28]
   b7c98:	9301      	str	r3, [sp, #4]
   b7c9a:	bd08      	pop	{r3, pc}
   b7c9c:	00030238 	.word	0x00030238

000b7ca0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7ca0:	b508      	push	{r3, lr}
   b7ca2:	4b02      	ldr	r3, [pc, #8]	; (b7cac <sock_connect+0xc>)
   b7ca4:	681b      	ldr	r3, [r3, #0]
   b7ca6:	6a1b      	ldr	r3, [r3, #32]
   b7ca8:	9301      	str	r3, [sp, #4]
   b7caa:	bd08      	pop	{r3, pc}
   b7cac:	00030238 	.word	0x00030238

000b7cb0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7cb0:	b508      	push	{r3, lr}
   b7cb2:	4b02      	ldr	r3, [pc, #8]	; (b7cbc <sock_recv+0xc>)
   b7cb4:	681b      	ldr	r3, [r3, #0]
   b7cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7cb8:	9301      	str	r3, [sp, #4]
   b7cba:	bd08      	pop	{r3, pc}
   b7cbc:	00030238 	.word	0x00030238

000b7cc0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7cc0:	b508      	push	{r3, lr}
   b7cc2:	4b02      	ldr	r3, [pc, #8]	; (b7ccc <sock_send+0xc>)
   b7cc4:	681b      	ldr	r3, [r3, #0]
   b7cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7cc8:	9301      	str	r3, [sp, #4]
   b7cca:	bd08      	pop	{r3, pc}
   b7ccc:	00030238 	.word	0x00030238

000b7cd0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b7cd0:	b508      	push	{r3, lr}
   b7cd2:	4b02      	ldr	r3, [pc, #8]	; (b7cdc <sock_socket+0xc>)
   b7cd4:	681b      	ldr	r3, [r3, #0]
   b7cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7cd8:	9301      	str	r3, [sp, #4]
   b7cda:	bd08      	pop	{r3, pc}
   b7cdc:	00030238 	.word	0x00030238

000b7ce0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7ce0:	b508      	push	{r3, lr}
   b7ce2:	4b02      	ldr	r3, [pc, #8]	; (b7cec <hal_spi_begin+0xc>)
   b7ce4:	681b      	ldr	r3, [r3, #0]
   b7ce6:	681b      	ldr	r3, [r3, #0]
   b7ce8:	9301      	str	r3, [sp, #4]
   b7cea:	bd08      	pop	{r3, pc}
   b7cec:	00030230 	.word	0x00030230

000b7cf0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7cf0:	b508      	push	{r3, lr}
   b7cf2:	4b02      	ldr	r3, [pc, #8]	; (b7cfc <hal_spi_transfer+0xc>)
   b7cf4:	681b      	ldr	r3, [r3, #0]
   b7cf6:	695b      	ldr	r3, [r3, #20]
   b7cf8:	9301      	str	r3, [sp, #4]
   b7cfa:	bd08      	pop	{r3, pc}
   b7cfc:	00030230 	.word	0x00030230

000b7d00 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7d00:	b508      	push	{r3, lr}
   b7d02:	4b02      	ldr	r3, [pc, #8]	; (b7d0c <hal_spi_init+0xc>)
   b7d04:	681b      	ldr	r3, [r3, #0]
   b7d06:	69db      	ldr	r3, [r3, #28]
   b7d08:	9301      	str	r3, [sp, #4]
   b7d0a:	bd08      	pop	{r3, pc}
   b7d0c:	00030230 	.word	0x00030230

000b7d10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7d10:	b508      	push	{r3, lr}
   b7d12:	4b02      	ldr	r3, [pc, #8]	; (b7d1c <hal_spi_is_enabled+0xc>)
   b7d14:	681b      	ldr	r3, [r3, #0]
   b7d16:	6a1b      	ldr	r3, [r3, #32]
   b7d18:	9301      	str	r3, [sp, #4]
   b7d1a:	bd08      	pop	{r3, pc}
   b7d1c:	00030230 	.word	0x00030230

000b7d20 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7d20:	b508      	push	{r3, lr}
   b7d22:	4b02      	ldr	r3, [pc, #8]	; (b7d2c <hal_spi_info+0xc>)
   b7d24:	681b      	ldr	r3, [r3, #0]
   b7d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7d28:	9301      	str	r3, [sp, #4]
   b7d2a:	bd08      	pop	{r3, pc}
   b7d2c:	00030230 	.word	0x00030230

000b7d30 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7d30:	b508      	push	{r3, lr}
   b7d32:	4b02      	ldr	r3, [pc, #8]	; (b7d3c <hal_spi_transfer_dma+0xc>)
   b7d34:	681b      	ldr	r3, [r3, #0]
   b7d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d38:	9301      	str	r3, [sp, #4]
   b7d3a:	bd08      	pop	{r3, pc}
   b7d3c:	00030230 	.word	0x00030230

000b7d40 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b7d40:	b508      	push	{r3, lr}
   b7d42:	4b02      	ldr	r3, [pc, #8]	; (b7d4c <hal_spi_transfer_dma_status+0xc>)
   b7d44:	681b      	ldr	r3, [r3, #0]
   b7d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7d48:	9301      	str	r3, [sp, #4]
   b7d4a:	bd08      	pop	{r3, pc}
   b7d4c:	00030230 	.word	0x00030230

000b7d50 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7d50:	b508      	push	{r3, lr}
   b7d52:	4b02      	ldr	r3, [pc, #8]	; (b7d5c <hal_spi_set_settings+0xc>)
   b7d54:	681b      	ldr	r3, [r3, #0]
   b7d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7d58:	9301      	str	r3, [sp, #4]
   b7d5a:	bd08      	pop	{r3, pc}
   b7d5c:	00030230 	.word	0x00030230

000b7d60 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7d60:	b508      	push	{r3, lr}
   b7d62:	4b02      	ldr	r3, [pc, #8]	; (b7d6c <hal_spi_acquire+0xc>)
   b7d64:	681b      	ldr	r3, [r3, #0]
   b7d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d68:	9301      	str	r3, [sp, #4]
   b7d6a:	bd08      	pop	{r3, pc}
   b7d6c:	00030230 	.word	0x00030230

000b7d70 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7d70:	b508      	push	{r3, lr}
   b7d72:	4b02      	ldr	r3, [pc, #8]	; (b7d7c <hal_spi_release+0xc>)
   b7d74:	681b      	ldr	r3, [r3, #0]
   b7d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7d78:	9301      	str	r3, [sp, #4]
   b7d7a:	bd08      	pop	{r3, pc}
   b7d7c:	00030230 	.word	0x00030230

000b7d80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7d80:	b508      	push	{r3, lr}
   b7d82:	4b02      	ldr	r3, [pc, #8]	; (b7d8c <HAL_USB_USART_Init+0xc>)
   b7d84:	681b      	ldr	r3, [r3, #0]
   b7d86:	681b      	ldr	r3, [r3, #0]
   b7d88:	9301      	str	r3, [sp, #4]
   b7d8a:	bd08      	pop	{r3, pc}
   b7d8c:	0003024c 	.word	0x0003024c

000b7d90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7d90:	b508      	push	{r3, lr}
   b7d92:	4b02      	ldr	r3, [pc, #8]	; (b7d9c <HAL_USB_USART_Begin+0xc>)
   b7d94:	681b      	ldr	r3, [r3, #0]
   b7d96:	685b      	ldr	r3, [r3, #4]
   b7d98:	9301      	str	r3, [sp, #4]
   b7d9a:	bd08      	pop	{r3, pc}
   b7d9c:	0003024c 	.word	0x0003024c

000b7da0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7da0:	b508      	push	{r3, lr}
   b7da2:	4b02      	ldr	r3, [pc, #8]	; (b7dac <HAL_USB_USART_Available_Data+0xc>)
   b7da4:	681b      	ldr	r3, [r3, #0]
   b7da6:	691b      	ldr	r3, [r3, #16]
   b7da8:	9301      	str	r3, [sp, #4]
   b7daa:	bd08      	pop	{r3, pc}
   b7dac:	0003024c 	.word	0x0003024c

000b7db0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7db0:	b508      	push	{r3, lr}
   b7db2:	4b02      	ldr	r3, [pc, #8]	; (b7dbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7db4:	681b      	ldr	r3, [r3, #0]
   b7db6:	695b      	ldr	r3, [r3, #20]
   b7db8:	9301      	str	r3, [sp, #4]
   b7dba:	bd08      	pop	{r3, pc}
   b7dbc:	0003024c 	.word	0x0003024c

000b7dc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7dc0:	b508      	push	{r3, lr}
   b7dc2:	4b02      	ldr	r3, [pc, #8]	; (b7dcc <HAL_USB_USART_Receive_Data+0xc>)
   b7dc4:	681b      	ldr	r3, [r3, #0]
   b7dc6:	699b      	ldr	r3, [r3, #24]
   b7dc8:	9301      	str	r3, [sp, #4]
   b7dca:	bd08      	pop	{r3, pc}
   b7dcc:	0003024c 	.word	0x0003024c

000b7dd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7dd0:	b508      	push	{r3, lr}
   b7dd2:	4b02      	ldr	r3, [pc, #8]	; (b7ddc <HAL_USB_USART_Send_Data+0xc>)
   b7dd4:	681b      	ldr	r3, [r3, #0]
   b7dd6:	69db      	ldr	r3, [r3, #28]
   b7dd8:	9301      	str	r3, [sp, #4]
   b7dda:	bd08      	pop	{r3, pc}
   b7ddc:	0003024c 	.word	0x0003024c

000b7de0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7de0:	b508      	push	{r3, lr}
   b7de2:	4b02      	ldr	r3, [pc, #8]	; (b7dec <HAL_USB_USART_Flush_Data+0xc>)
   b7de4:	681b      	ldr	r3, [r3, #0]
   b7de6:	6a1b      	ldr	r3, [r3, #32]
   b7de8:	9301      	str	r3, [sp, #4]
   b7dea:	bd08      	pop	{r3, pc}
   b7dec:	0003024c 	.word	0x0003024c

000b7df0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7df0:	b508      	push	{r3, lr}
   b7df2:	4b02      	ldr	r3, [pc, #8]	; (b7dfc <panic_+0xc>)
   b7df4:	681b      	ldr	r3, [r3, #0]
   b7df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7df8:	9301      	str	r3, [sp, #4]
   b7dfa:	bd08      	pop	{r3, pc}
   b7dfc:	00030260 	.word	0x00030260

000b7e00 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7e00:	b508      	push	{r3, lr}
   b7e02:	4b02      	ldr	r3, [pc, #8]	; (b7e0c <log_message+0xc>)
   b7e04:	681b      	ldr	r3, [r3, #0]
   b7e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7e08:	9301      	str	r3, [sp, #4]
   b7e0a:	bd08      	pop	{r3, pc}
   b7e0c:	00030260 	.word	0x00030260

000b7e10 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7e10:	b508      	push	{r3, lr}
   b7e12:	4b02      	ldr	r3, [pc, #8]	; (b7e1c <log_message_v+0xc>)
   b7e14:	681b      	ldr	r3, [r3, #0]
   b7e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7e18:	9301      	str	r3, [sp, #4]
   b7e1a:	bd08      	pop	{r3, pc}
   b7e1c:	00030260 	.word	0x00030260

000b7e20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7e20:	b508      	push	{r3, lr}
   b7e22:	4b02      	ldr	r3, [pc, #8]	; (b7e2c <set_system_mode+0xc>)
   b7e24:	681b      	ldr	r3, [r3, #0]
   b7e26:	685b      	ldr	r3, [r3, #4]
   b7e28:	9301      	str	r3, [sp, #4]
   b7e2a:	bd08      	pop	{r3, pc}
   b7e2c:	00030220 	.word	0x00030220

000b7e30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7e30:	b508      	push	{r3, lr}
   b7e32:	4b02      	ldr	r3, [pc, #8]	; (b7e3c <system_delay_ms+0xc>)
   b7e34:	681b      	ldr	r3, [r3, #0]
   b7e36:	695b      	ldr	r3, [r3, #20]
   b7e38:	9301      	str	r3, [sp, #4]
   b7e3a:	bd08      	pop	{r3, pc}
   b7e3c:	00030220 	.word	0x00030220

000b7e40 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7e40:	b508      	push	{r3, lr}
   b7e42:	4b02      	ldr	r3, [pc, #8]	; (b7e4c <system_thread_set_state+0xc>)
   b7e44:	681b      	ldr	r3, [r3, #0]
   b7e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e48:	9301      	str	r3, [sp, #4]
   b7e4a:	bd08      	pop	{r3, pc}
   b7e4c:	00030220 	.word	0x00030220

000b7e50 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7e50:	b508      	push	{r3, lr}
   b7e52:	4b03      	ldr	r3, [pc, #12]	; (b7e60 <system_ctrl_set_app_request_handler+0x10>)
   b7e54:	681b      	ldr	r3, [r3, #0]
   b7e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7e5a:	9301      	str	r3, [sp, #4]
   b7e5c:	bd08      	pop	{r3, pc}
   b7e5e:	0000      	.short	0x0000
   b7e60:	00030220 	.word	0x00030220

000b7e64 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7e64:	b508      	push	{r3, lr}
   b7e66:	4b03      	ldr	r3, [pc, #12]	; (b7e74 <system_ctrl_set_result+0x10>)
   b7e68:	681b      	ldr	r3, [r3, #0]
   b7e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7e6e:	9301      	str	r3, [sp, #4]
   b7e70:	bd08      	pop	{r3, pc}
   b7e72:	0000      	.short	0x0000
   b7e74:	00030220 	.word	0x00030220

000b7e78 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7e78:	b508      	push	{r3, lr}
   b7e7a:	4b02      	ldr	r3, [pc, #8]	; (b7e84 <network_connect+0xc>)
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	685b      	ldr	r3, [r3, #4]
   b7e80:	9301      	str	r3, [sp, #4]
   b7e82:	bd08      	pop	{r3, pc}
   b7e84:	00030240 	.word	0x00030240

000b7e88 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7e88:	b508      	push	{r3, lr}
   b7e8a:	4b02      	ldr	r3, [pc, #8]	; (b7e94 <network_connecting+0xc>)
   b7e8c:	681b      	ldr	r3, [r3, #0]
   b7e8e:	689b      	ldr	r3, [r3, #8]
   b7e90:	9301      	str	r3, [sp, #4]
   b7e92:	bd08      	pop	{r3, pc}
   b7e94:	00030240 	.word	0x00030240

000b7e98 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7e98:	b508      	push	{r3, lr}
   b7e9a:	4b02      	ldr	r3, [pc, #8]	; (b7ea4 <network_disconnect+0xc>)
   b7e9c:	681b      	ldr	r3, [r3, #0]
   b7e9e:	68db      	ldr	r3, [r3, #12]
   b7ea0:	9301      	str	r3, [sp, #4]
   b7ea2:	bd08      	pop	{r3, pc}
   b7ea4:	00030240 	.word	0x00030240

000b7ea8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7ea8:	b508      	push	{r3, lr}
   b7eaa:	4b02      	ldr	r3, [pc, #8]	; (b7eb4 <network_ready+0xc>)
   b7eac:	681b      	ldr	r3, [r3, #0]
   b7eae:	691b      	ldr	r3, [r3, #16]
   b7eb0:	9301      	str	r3, [sp, #4]
   b7eb2:	bd08      	pop	{r3, pc}
   b7eb4:	00030240 	.word	0x00030240

000b7eb8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7eb8:	b508      	push	{r3, lr}
   b7eba:	4b02      	ldr	r3, [pc, #8]	; (b7ec4 <network_on+0xc>)
   b7ebc:	681b      	ldr	r3, [r3, #0]
   b7ebe:	695b      	ldr	r3, [r3, #20]
   b7ec0:	9301      	str	r3, [sp, #4]
   b7ec2:	bd08      	pop	{r3, pc}
   b7ec4:	00030240 	.word	0x00030240

000b7ec8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ec8:	b508      	push	{r3, lr}
   b7eca:	4b02      	ldr	r3, [pc, #8]	; (b7ed4 <network_off+0xc>)
   b7ecc:	681b      	ldr	r3, [r3, #0]
   b7ece:	699b      	ldr	r3, [r3, #24]
   b7ed0:	9301      	str	r3, [sp, #4]
   b7ed2:	bd08      	pop	{r3, pc}
   b7ed4:	00030240 	.word	0x00030240

000b7ed8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7ed8:	b508      	push	{r3, lr}
   b7eda:	4b02      	ldr	r3, [pc, #8]	; (b7ee4 <network_listen+0xc>)
   b7edc:	681b      	ldr	r3, [r3, #0]
   b7ede:	69db      	ldr	r3, [r3, #28]
   b7ee0:	9301      	str	r3, [sp, #4]
   b7ee2:	bd08      	pop	{r3, pc}
   b7ee4:	00030240 	.word	0x00030240

000b7ee8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7ee8:	b508      	push	{r3, lr}
   b7eea:	4b02      	ldr	r3, [pc, #8]	; (b7ef4 <network_listening+0xc>)
   b7eec:	681b      	ldr	r3, [r3, #0]
   b7eee:	6a1b      	ldr	r3, [r3, #32]
   b7ef0:	9301      	str	r3, [sp, #4]
   b7ef2:	bd08      	pop	{r3, pc}
   b7ef4:	00030240 	.word	0x00030240

000b7ef8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7ef8:	b508      	push	{r3, lr}
   b7efa:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <network_set_listen_timeout+0xc>)
   b7efc:	681b      	ldr	r3, [r3, #0]
   b7efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7f00:	9301      	str	r3, [sp, #4]
   b7f02:	bd08      	pop	{r3, pc}
   b7f04:	00030240 	.word	0x00030240

000b7f08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7f08:	b508      	push	{r3, lr}
   b7f0a:	4b02      	ldr	r3, [pc, #8]	; (b7f14 <network_get_listen_timeout+0xc>)
   b7f0c:	681b      	ldr	r3, [r3, #0]
   b7f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f10:	9301      	str	r3, [sp, #4]
   b7f12:	bd08      	pop	{r3, pc}
   b7f14:	00030240 	.word	0x00030240

000b7f18 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7f18:	b508      	push	{r3, lr}
   b7f1a:	4b02      	ldr	r3, [pc, #8]	; (b7f24 <network_is_on+0xc>)
   b7f1c:	681b      	ldr	r3, [r3, #0]
   b7f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7f20:	9301      	str	r3, [sp, #4]
   b7f22:	bd08      	pop	{r3, pc}
   b7f24:	00030240 	.word	0x00030240

000b7f28 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7f28:	b508      	push	{r3, lr}
   b7f2a:	4b02      	ldr	r3, [pc, #8]	; (b7f34 <network_is_off+0xc>)
   b7f2c:	681b      	ldr	r3, [r3, #0]
   b7f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7f30:	9301      	str	r3, [sp, #4]
   b7f32:	bd08      	pop	{r3, pc}
   b7f34:	00030240 	.word	0x00030240

000b7f38 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7f38:	b508      	push	{r3, lr}
   b7f3a:	4b02      	ldr	r3, [pc, #8]	; (b7f44 <spark_process+0xc>)
   b7f3c:	681b      	ldr	r3, [r3, #0]
   b7f3e:	689b      	ldr	r3, [r3, #8]
   b7f40:	9301      	str	r3, [sp, #4]
   b7f42:	bd08      	pop	{r3, pc}
   b7f44:	00030244 	.word	0x00030244

000b7f48 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7f48:	b508      	push	{r3, lr}
   b7f4a:	4b02      	ldr	r3, [pc, #8]	; (b7f54 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7f4c:	681b      	ldr	r3, [r3, #0]
   b7f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f50:	9301      	str	r3, [sp, #4]
   b7f52:	bd08      	pop	{r3, pc}
   b7f54:	00030244 	.word	0x00030244

000b7f58 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7f58:	b508      	push	{r3, lr}
   b7f5a:	4b02      	ldr	r3, [pc, #8]	; (b7f64 <malloc+0xc>)
   b7f5c:	681b      	ldr	r3, [r3, #0]
   b7f5e:	681b      	ldr	r3, [r3, #0]
   b7f60:	9301      	str	r3, [sp, #4]
   b7f62:	bd08      	pop	{r3, pc}
   b7f64:	0003021c 	.word	0x0003021c

000b7f68 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7f68:	b508      	push	{r3, lr}
   b7f6a:	4b02      	ldr	r3, [pc, #8]	; (b7f74 <free+0xc>)
   b7f6c:	681b      	ldr	r3, [r3, #0]
   b7f6e:	685b      	ldr	r3, [r3, #4]
   b7f70:	9301      	str	r3, [sp, #4]
   b7f72:	bd08      	pop	{r3, pc}
   b7f74:	0003021c 	.word	0x0003021c

000b7f78 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7f78:	b508      	push	{r3, lr}
   b7f7a:	4b02      	ldr	r3, [pc, #8]	; (b7f84 <realloc+0xc>)
   b7f7c:	681b      	ldr	r3, [r3, #0]
   b7f7e:	689b      	ldr	r3, [r3, #8]
   b7f80:	9301      	str	r3, [sp, #4]
   b7f82:	bd08      	pop	{r3, pc}
   b7f84:	0003021c 	.word	0x0003021c

000b7f88 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7f88:	b508      	push	{r3, lr}
   b7f8a:	4b02      	ldr	r3, [pc, #8]	; (b7f94 <snprintf+0xc>)
   b7f8c:	681b      	ldr	r3, [r3, #0]
   b7f8e:	69db      	ldr	r3, [r3, #28]
   b7f90:	9301      	str	r3, [sp, #4]
   b7f92:	bd08      	pop	{r3, pc}
   b7f94:	0003021c 	.word	0x0003021c

000b7f98 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7f98:	b508      	push	{r3, lr}
   b7f9a:	4b02      	ldr	r3, [pc, #8]	; (b7fa4 <vsnprintf+0xc>)
   b7f9c:	681b      	ldr	r3, [r3, #0]
   b7f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7fa0:	9301      	str	r3, [sp, #4]
   b7fa2:	bd08      	pop	{r3, pc}
   b7fa4:	0003021c 	.word	0x0003021c

000b7fa8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7fa8:	b508      	push	{r3, lr}
   b7faa:	4b02      	ldr	r3, [pc, #8]	; (b7fb4 <__errno+0xc>)
   b7fac:	681b      	ldr	r3, [r3, #0]
   b7fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7fb0:	9301      	str	r3, [sp, #4]
   b7fb2:	bd08      	pop	{r3, pc}
   b7fb4:	0003021c 	.word	0x0003021c

000b7fb8 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7fb8:	b508      	push	{r3, lr}
   b7fba:	4b02      	ldr	r3, [pc, #8]	; (b7fc4 <__assert_func+0xc>)
   b7fbc:	681b      	ldr	r3, [r3, #0]
   b7fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7fc0:	9301      	str	r3, [sp, #4]
   b7fc2:	bd08      	pop	{r3, pc}
   b7fc4:	0003021c 	.word	0x0003021c

000b7fc8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7fc8:	b508      	push	{r3, lr}
   b7fca:	4b02      	ldr	r3, [pc, #8]	; (b7fd4 <newlib_impure_ptr_callback+0xc>)
   b7fcc:	681b      	ldr	r3, [r3, #0]
   b7fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7fd0:	9301      	str	r3, [sp, #4]
   b7fd2:	bd08      	pop	{r3, pc}
   b7fd4:	0003021c 	.word	0x0003021c

000b7fd8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7fd8:	2200      	movs	r2, #0
   b7fda:	6840      	ldr	r0, [r0, #4]
   b7fdc:	4611      	mov	r1, r2
   b7fde:	f7ff bf83 	b.w	b7ee8 <network_listening>

000b7fe2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7fe2:	2200      	movs	r2, #0
   b7fe4:	6840      	ldr	r0, [r0, #4]
   b7fe6:	4611      	mov	r1, r2
   b7fe8:	f7ff bf8e 	b.w	b7f08 <network_get_listen_timeout>

000b7fec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7fec:	6840      	ldr	r0, [r0, #4]
   b7fee:	2200      	movs	r2, #0
   b7ff0:	f7ff bf82 	b.w	b7ef8 <network_set_listen_timeout>

000b7ff4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ff4:	6840      	ldr	r0, [r0, #4]
   b7ff6:	2200      	movs	r2, #0
   b7ff8:	f081 0101 	eor.w	r1, r1, #1
   b7ffc:	f7ff bf6c 	b.w	b7ed8 <network_listen>

000b8000 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8000:	2300      	movs	r3, #0
   b8002:	6840      	ldr	r0, [r0, #4]
   b8004:	461a      	mov	r2, r3
   b8006:	4619      	mov	r1, r3
   b8008:	f7ff bf5e 	b.w	b7ec8 <network_off>

000b800c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b800c:	2300      	movs	r3, #0
   b800e:	6840      	ldr	r0, [r0, #4]
   b8010:	461a      	mov	r2, r3
   b8012:	4619      	mov	r1, r3
   b8014:	f7ff bf50 	b.w	b7eb8 <network_on>

000b8018 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8018:	2200      	movs	r2, #0
   b801a:	6840      	ldr	r0, [r0, #4]
   b801c:	4611      	mov	r1, r2
   b801e:	f7ff bf43 	b.w	b7ea8 <network_ready>

000b8022 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8022:	2200      	movs	r2, #0
   b8024:	6840      	ldr	r0, [r0, #4]
   b8026:	4611      	mov	r1, r2
   b8028:	f7ff bf2e 	b.w	b7e88 <network_connecting>

000b802c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b802c:	6840      	ldr	r0, [r0, #4]
   b802e:	2200      	movs	r2, #0
   b8030:	2102      	movs	r1, #2
   b8032:	f7ff bf31 	b.w	b7e98 <network_disconnect>

000b8036 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8036:	2300      	movs	r3, #0
   b8038:	6840      	ldr	r0, [r0, #4]
   b803a:	461a      	mov	r2, r3
   b803c:	f7ff bf1c 	b.w	b7e78 <network_connect>

000b8040 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8040:	4b02      	ldr	r3, [pc, #8]	; (b804c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8042:	2203      	movs	r2, #3
   b8044:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8046:	4a02      	ldr	r2, [pc, #8]	; (b8050 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8048:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b804a:	4770      	bx	lr
   b804c:	2003e6c4 	.word	0x2003e6c4
   b8050:	000baaf0 	.word	0x000baaf0

000b8054 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b8054:	2100      	movs	r1, #0
   b8056:	f7ff be8b 	b.w	b7d70 <hal_spi_release>

000b805a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b805a:	2100      	movs	r1, #0
   b805c:	f7ff be80 	b.w	b7d60 <hal_spi_acquire>

000b8060 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b8060:	b510      	push	{r4, lr}
   b8062:	4604      	mov	r4, r0
   b8064:	4608      	mov	r0, r1
{
    _spi = spi;
   b8066:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8068:	f7ff fe4a 	bl	b7d00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b806c:	2300      	movs	r3, #0
   b806e:	6063      	str	r3, [r4, #4]
}
   b8070:	4620      	mov	r0, r4
   b8072:	bd10      	pop	{r4, pc}

000b8074 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b8074:	b513      	push	{r0, r1, r4, lr}
   b8076:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8078:	7800      	ldrb	r0, [r0, #0]
   b807a:	f7ff ffee 	bl	b805a <_ZN8SPIClass4lockEv.isra.0>
   b807e:	b958      	cbnz	r0, b8098 <_ZN8SPIClass5beginEv+0x24>
   b8080:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b8082:	9001      	str	r0, [sp, #4]
   b8084:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8088:	f7ff fe2a 	bl	b7ce0 <hal_spi_begin>
        unlock();
   b808c:	9801      	ldr	r0, [sp, #4]
    }
}
   b808e:	b002      	add	sp, #8
   b8090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8094:	f7ff bfde 	b.w	b8054 <_ZN8SPIClass6unlockEv.isra.0>
   b8098:	b002      	add	sp, #8
   b809a:	bd10      	pop	{r4, pc}

000b809c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b809c:	7800      	ldrb	r0, [r0, #0]
   b809e:	f7ff bfd9 	b.w	b8054 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b80a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b80a4:	0840      	lsrs	r0, r0, #1
{
   b80a6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b80a8:	6018      	str	r0, [r3, #0]
   b80aa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b80ac:	6818      	ldr	r0, [r3, #0]
   b80ae:	4288      	cmp	r0, r1
   b80b0:	b2e5      	uxtb	r5, r4
   b80b2:	d906      	bls.n	b80c2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b80b4:	3401      	adds	r4, #1
   b80b6:	2c08      	cmp	r4, #8
   b80b8:	d002      	beq.n	b80c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b80ba:	0840      	lsrs	r0, r0, #1
   b80bc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b80be:	e7f5      	b.n	b80ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b80c0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b80c2:	4b02      	ldr	r3, [pc, #8]	; (b80cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b80c4:	5d5b      	ldrb	r3, [r3, r5]
   b80c6:	7013      	strb	r3, [r2, #0]
}
   b80c8:	bd30      	pop	{r4, r5, pc}
   b80ca:	bf00      	nop
   b80cc:	000bab24 	.word	0x000bab24

000b80d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b80d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b80d4:	4606      	mov	r6, r0
   b80d6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b80d8:	7800      	ldrb	r0, [r0, #0]
{
   b80da:	460c      	mov	r4, r1
    CHECK(lock());
   b80dc:	f7ff ffbd 	bl	b805a <_ZN8SPIClass4lockEv.isra.0>
   b80e0:	2800      	cmp	r0, #0
   b80e2:	db1b      	blt.n	b811c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b80e4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b80e6:	2214      	movs	r2, #20
   b80e8:	2100      	movs	r1, #0
   b80ea:	a809      	add	r0, sp, #36	; 0x24
   b80ec:	f002 f852 	bl	ba194 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b80f0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b80f2:	2200      	movs	r2, #0
   b80f4:	a909      	add	r1, sp, #36	; 0x24
   b80f6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b80f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b80fc:	f7ff fe10 	bl	b7d20 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8100:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8104:	b113      	cbz	r3, b810c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8106:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b810a:	b155      	cbz	r5, b8122 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b810c:	2700      	movs	r7, #0
   b810e:	46b9      	mov	r9, r7
   b8110:	46b8      	mov	r8, r7
   b8112:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8114:	7923      	ldrb	r3, [r4, #4]
   b8116:	b15d      	cbz	r5, b8130 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8118:	b1c3      	cbz	r3, b814c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b811a:	2000      	movs	r0, #0
}
   b811c:	b00f      	add	sp, #60	; 0x3c
   b811e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8122:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8126:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b812a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b812e:	e7f1      	b.n	b8114 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8130:	2b00      	cmp	r3, #0
   b8132:	d135      	bne.n	b81a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8134:	68a3      	ldr	r3, [r4, #8]
   b8136:	4543      	cmp	r3, r8
   b8138:	d108      	bne.n	b814c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b813a:	f88d 9020 	strb.w	r9, [sp, #32]
   b813e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8142:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8146:	89a3      	ldrh	r3, [r4, #12]
   b8148:	429a      	cmp	r2, r3
   b814a:	d0e6      	beq.n	b811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b814c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b814e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8150:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8154:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8156:	ab04      	add	r3, sp, #16
   b8158:	f10d 020f 	add.w	r2, sp, #15
   b815c:	f7ff ffa2 	bl	b80a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8160:	7921      	ldrb	r1, [r4, #4]
   b8162:	b985      	cbnz	r5, b8186 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8164:	b989      	cbnz	r1, b818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8166:	68a3      	ldr	r3, [r4, #8]
   b8168:	4543      	cmp	r3, r8
   b816a:	d30e      	bcc.n	b818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b816c:	f88d 9020 	strb.w	r9, [sp, #32]
   b8170:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8174:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8178:	89a3      	ldrh	r3, [r4, #12]
   b817a:	429a      	cmp	r2, r3
   b817c:	d105      	bne.n	b818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b817e:	9b04      	ldr	r3, [sp, #16]
   b8180:	4543      	cmp	r3, r8
   b8182:	d102      	bne.n	b818a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8184:	e7c9      	b.n	b811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8186:	2900      	cmp	r1, #0
   b8188:	d1f9      	bne.n	b817e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b818a:	2300      	movs	r3, #0
   b818c:	9301      	str	r3, [sp, #4]
   b818e:	7b63      	ldrb	r3, [r4, #13]
   b8190:	9300      	str	r3, [sp, #0]
   b8192:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8196:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8198:	7830      	ldrb	r0, [r6, #0]
   b819a:	f7ff fdd9 	bl	b7d50 <hal_spi_set_settings>
   b819e:	e7bc      	b.n	b811a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b81a0:	e9cd 5500 	strd	r5, r5, [sp]
   b81a4:	462b      	mov	r3, r5
   b81a6:	462a      	mov	r2, r5
   b81a8:	2101      	movs	r1, #1
   b81aa:	e7f5      	b.n	b8198 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b81ac <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b81ac:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b81ae:	7800      	ldrb	r0, [r0, #0]
   b81b0:	f7ff fd9e 	bl	b7cf0 <hal_spi_transfer>
}
   b81b4:	b2c0      	uxtb	r0, r0
   b81b6:	bd08      	pop	{r3, pc}

000b81b8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b81b8:	b530      	push	{r4, r5, lr}
   b81ba:	b087      	sub	sp, #28
   b81bc:	4604      	mov	r4, r0
   b81be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b81c0:	9500      	str	r5, [sp, #0]
   b81c2:	7800      	ldrb	r0, [r0, #0]
   b81c4:	f7ff fdb4 	bl	b7d30 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b81c8:	b93d      	cbnz	r5, b81da <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b81ca:	7820      	ldrb	r0, [r4, #0]
   b81cc:	a902      	add	r1, sp, #8
   b81ce:	f7ff fdb7 	bl	b7d40 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b81d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b81d6:	07db      	lsls	r3, r3, #31
   b81d8:	d4f7      	bmi.n	b81ca <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b81da:	b007      	add	sp, #28
   b81dc:	bd30      	pop	{r4, r5, pc}
	...

000b81e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b81e0:	4b05      	ldr	r3, [pc, #20]	; (b81f8 <_GLOBAL__sub_I_System+0x18>)
   b81e2:	2202      	movs	r2, #2
   b81e4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b81e6:	4b05      	ldr	r3, [pc, #20]	; (b81fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b81e8:	4a05      	ldr	r2, [pc, #20]	; (b8200 <_GLOBAL__sub_I_System+0x20>)
   b81ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b81ec:	2000      	movs	r0, #0
   b81ee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b81f2:	f7ff be15 	b.w	b7e20 <set_system_mode>
   b81f6:	bf00      	nop
   b81f8:	2003e6d8 	.word	0x2003e6d8
   b81fc:	2003e6cc 	.word	0x2003e6cc
   b8200:	ffff0000 	.word	0xffff0000

000b8204 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8204:	b510      	push	{r4, lr}
   b8206:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8208:	f002 f80c 	bl	ba224 <strlen>
   b820c:	3801      	subs	r0, #1
   b820e:	1823      	adds	r3, r4, r0
   b8210:	4620      	mov	r0, r4
	while(i<j){
   b8212:	4283      	cmp	r3, r0
   b8214:	d906      	bls.n	b8224 <_Z11str_reversePc+0x20>
		c = *i;
   b8216:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8218:	7819      	ldrb	r1, [r3, #0]
   b821a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b821e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8222:	e7f6      	b.n	b8212 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8224:	bd10      	pop	{r4, pc}

000b8226 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8226:	b570      	push	{r4, r5, r6, lr}
   b8228:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b822a:	1e91      	subs	r1, r2, #2
   b822c:	2922      	cmp	r1, #34	; 0x22
   b822e:	d81d      	bhi.n	b826c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8230:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8232:	b930      	cbnz	r0, b8242 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8234:	4423      	add	r3, r4
            *ptr++ = '0';
   b8236:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8238:	429d      	cmp	r5, r3
   b823a:	d210      	bcs.n	b825e <ultoa+0x38>
            *ptr++ = '0';
   b823c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8240:	e7fa      	b.n	b8238 <ultoa+0x12>
            result.quot = a/radix;
   b8242:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8246:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b824a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b824c:	2809      	cmp	r0, #9
                *ptr += '0';
   b824e:	bf94      	ite	ls
   b8250:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8252:	3157      	addhi	r1, #87	; 0x57
   b8254:	b2c9      	uxtb	r1, r1
   b8256:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b825a:	4630      	mov	r0, r6
	while(a){
   b825c:	e7e9      	b.n	b8232 <ultoa+0xc>

	*ptr = '\0';
   b825e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8260:	4620      	mov	r0, r4
	*ptr = '\0';
   b8262:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8264:	f7ff ffce 	bl	b8204 <_Z11str_reversePc>
	return buffer;
   b8268:	4620      	mov	r0, r4
}
   b826a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b826c:	2000      	movs	r0, #0
   b826e:	e7fc      	b.n	b826a <ultoa+0x44>

000b8270 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8270:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8272:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8274:	460c      	mov	r4, r1
   b8276:	4615      	mov	r5, r2
	if(a<0){
   b8278:	da0e      	bge.n	b8298 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b827a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b827e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8282:	bf14      	ite	ne
   b8284:	4258      	negne	r0, r3
   b8286:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8288:	2301      	movs	r3, #1
		*buffer = '-';
   b828a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b828c:	462a      	mov	r2, r5
   b828e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8290:	f7ff ffc9 	bl	b8226 <ultoa>
	}
	return buffer;
}
   b8294:	4620      	mov	r0, r4
   b8296:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8298:	2301      	movs	r3, #1
   b829a:	e7f9      	b.n	b8290 <itoa+0x20>

000b829c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b829c:	b510      	push	{r4, lr}
   b829e:	4604      	mov	r4, r0
{
	free(buffer);
   b82a0:	6800      	ldr	r0, [r0, #0]
   b82a2:	f7ff fe61 	bl	b7f68 <free>
}
   b82a6:	4620      	mov	r0, r4
   b82a8:	bd10      	pop	{r4, pc}

000b82aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b82aa:	b510      	push	{r4, lr}
   b82ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b82ae:	6800      	ldr	r0, [r0, #0]
   b82b0:	b108      	cbz	r0, b82b6 <_ZN6String10invalidateEv+0xc>
   b82b2:	f7ff fe59 	bl	b7f68 <free>
	buffer = NULL;
   b82b6:	2300      	movs	r3, #0
	capacity = len = 0;
   b82b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b82bc:	6023      	str	r3, [r4, #0]
}
   b82be:	bd10      	pop	{r4, pc}

000b82c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b82c0:	b538      	push	{r3, r4, r5, lr}
   b82c2:	4604      	mov	r4, r0
   b82c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b82c6:	6800      	ldr	r0, [r0, #0]
   b82c8:	3101      	adds	r1, #1
   b82ca:	f7ff fe55 	bl	b7f78 <realloc>
	if (newbuffer) {
   b82ce:	b110      	cbz	r0, b82d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b82d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b82d4:	2001      	movs	r0, #1
	}
	return 0;
}
   b82d6:	bd38      	pop	{r3, r4, r5, pc}

000b82d8 <_ZN6String7reserveEj>:
{
   b82d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b82da:	6803      	ldr	r3, [r0, #0]
{
   b82dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b82de:	b123      	cbz	r3, b82ea <_ZN6String7reserveEj+0x12>
   b82e0:	6843      	ldr	r3, [r0, #4]
   b82e2:	428b      	cmp	r3, r1
   b82e4:	d301      	bcc.n	b82ea <_ZN6String7reserveEj+0x12>
   b82e6:	2001      	movs	r0, #1
}
   b82e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b82ea:	4620      	mov	r0, r4
   b82ec:	f7ff ffe8 	bl	b82c0 <_ZN6String12changeBufferEj>
   b82f0:	2800      	cmp	r0, #0
   b82f2:	d0f9      	beq.n	b82e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b82f4:	68a3      	ldr	r3, [r4, #8]
   b82f6:	2b00      	cmp	r3, #0
   b82f8:	d1f5      	bne.n	b82e6 <_ZN6String7reserveEj+0xe>
   b82fa:	6822      	ldr	r2, [r4, #0]
   b82fc:	7013      	strb	r3, [r2, #0]
   b82fe:	e7f2      	b.n	b82e6 <_ZN6String7reserveEj+0xe>

000b8300 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8302:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8304:	4611      	mov	r1, r2
   b8306:	9201      	str	r2, [sp, #4]
{
   b8308:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b830a:	f7ff ffe5 	bl	b82d8 <_ZN6String7reserveEj>
   b830e:	9a01      	ldr	r2, [sp, #4]
   b8310:	b928      	cbnz	r0, b831e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8312:	4620      	mov	r0, r4
   b8314:	f7ff ffc9 	bl	b82aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8318:	4620      	mov	r0, r4
   b831a:	b003      	add	sp, #12
   b831c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b831e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8320:	4629      	mov	r1, r5
   b8322:	6820      	ldr	r0, [r4, #0]
   b8324:	f001 ff28 	bl	ba178 <memcpy>
	buffer[len] = 0;
   b8328:	6822      	ldr	r2, [r4, #0]
   b832a:	68a3      	ldr	r3, [r4, #8]
   b832c:	2100      	movs	r1, #0
   b832e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8330:	e7f2      	b.n	b8318 <_ZN6String4copyEPKcj+0x18>

000b8332 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8332:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8334:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8336:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b833a:	4604      	mov	r4, r0
	len = 0;
   b833c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b833e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8340:	b141      	cbz	r1, b8354 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8342:	4608      	mov	r0, r1
   b8344:	9101      	str	r1, [sp, #4]
   b8346:	f001 ff6d 	bl	ba224 <strlen>
   b834a:	9901      	ldr	r1, [sp, #4]
   b834c:	4602      	mov	r2, r0
   b834e:	4620      	mov	r0, r4
   b8350:	f7ff ffd6 	bl	b8300 <_ZN6String4copyEPKcj>
}
   b8354:	4620      	mov	r0, r4
   b8356:	b002      	add	sp, #8
   b8358:	bd10      	pop	{r4, pc}

000b835a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b835a:	b538      	push	{r3, r4, r5, lr}
   b835c:	4605      	mov	r5, r0
	if (buffer) {
   b835e:	6800      	ldr	r0, [r0, #0]
{
   b8360:	460c      	mov	r4, r1
	if (buffer) {
   b8362:	b168      	cbz	r0, b8380 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8364:	686a      	ldr	r2, [r5, #4]
   b8366:	688b      	ldr	r3, [r1, #8]
   b8368:	429a      	cmp	r2, r3
   b836a:	d307      	bcc.n	b837c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b836c:	6809      	ldr	r1, [r1, #0]
   b836e:	f001 ff51 	bl	ba214 <strcpy>
			len = rhs.len;
   b8372:	68a3      	ldr	r3, [r4, #8]
   b8374:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8376:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8378:	60a3      	str	r3, [r4, #8]
}
   b837a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b837c:	f7ff fdf4 	bl	b7f68 <free>
	buffer = rhs.buffer;
   b8380:	6823      	ldr	r3, [r4, #0]
   b8382:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8384:	6863      	ldr	r3, [r4, #4]
   b8386:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8388:	68a3      	ldr	r3, [r4, #8]
   b838a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b838c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b838e:	e9c4 3300 	strd	r3, r3, [r4]
   b8392:	e7f1      	b.n	b8378 <_ZN6String4moveERS_+0x1e>

000b8394 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8394:	4288      	cmp	r0, r1
{
   b8396:	b510      	push	{r4, lr}
   b8398:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b839a:	d005      	beq.n	b83a8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b839c:	680b      	ldr	r3, [r1, #0]
   b839e:	b12b      	cbz	r3, b83ac <_ZN6StringaSERKS_+0x18>
   b83a0:	688a      	ldr	r2, [r1, #8]
   b83a2:	4619      	mov	r1, r3
   b83a4:	f7ff ffac 	bl	b8300 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b83a8:	4620      	mov	r0, r4
   b83aa:	bd10      	pop	{r4, pc}
	else invalidate();
   b83ac:	f7ff ff7d 	bl	b82aa <_ZN6String10invalidateEv>
   b83b0:	e7fa      	b.n	b83a8 <_ZN6StringaSERKS_+0x14>

000b83b2 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b83b2:	b510      	push	{r4, lr}
	buffer = NULL;
   b83b4:	2300      	movs	r3, #0
String::String(const String &value)
   b83b6:	4604      	mov	r4, r0
	capacity = 0;
   b83b8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b83bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b83be:	7303      	strb	r3, [r0, #12]
	*this = value;
   b83c0:	f7ff ffe8 	bl	b8394 <_ZN6StringaSERKS_>
}
   b83c4:	4620      	mov	r0, r4
   b83c6:	bd10      	pop	{r4, pc}

000b83c8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b83c8:	4288      	cmp	r0, r1
{
   b83ca:	b510      	push	{r4, lr}
   b83cc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b83ce:	d001      	beq.n	b83d4 <_ZN6StringaSEOS_+0xc>
   b83d0:	f7ff ffc3 	bl	b835a <_ZN6String4moveERS_>
	return *this;
}
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd10      	pop	{r4, pc}

000b83d8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b83d8:	b513      	push	{r0, r1, r4, lr}
   b83da:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b83dc:	b159      	cbz	r1, b83f6 <_ZN6StringaSEPKc+0x1e>
   b83de:	4608      	mov	r0, r1
   b83e0:	9101      	str	r1, [sp, #4]
   b83e2:	f001 ff1f 	bl	ba224 <strlen>
   b83e6:	9901      	ldr	r1, [sp, #4]
   b83e8:	4602      	mov	r2, r0
   b83ea:	4620      	mov	r0, r4
   b83ec:	f7ff ff88 	bl	b8300 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b83f0:	4620      	mov	r0, r4
   b83f2:	b002      	add	sp, #8
   b83f4:	bd10      	pop	{r4, pc}
	else invalidate();
   b83f6:	f7ff ff58 	bl	b82aa <_ZN6String10invalidateEv>
   b83fa:	e7f9      	b.n	b83f0 <_ZN6StringaSEPKc+0x18>

000b83fc <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b83fc:	b510      	push	{r4, lr}
   b83fe:	4604      	mov	r4, r0
   b8400:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8402:	2300      	movs	r3, #0
	capacity = 0;
   b8404:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8408:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b840a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b840c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b840e:	a901      	add	r1, sp, #4
   b8410:	f7ff ff2e 	bl	b8270 <itoa>
	*this = buf;
   b8414:	a901      	add	r1, sp, #4
   b8416:	4620      	mov	r0, r4
   b8418:	f7ff ffde 	bl	b83d8 <_ZN6StringaSEPKc>
}
   b841c:	4620      	mov	r0, r4
   b841e:	b00a      	add	sp, #40	; 0x28
   b8420:	bd10      	pop	{r4, pc}

000b8422 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   b8422:	b510      	push	{r4, lr}
   b8424:	4604      	mov	r4, r0
   b8426:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b8428:	2300      	movs	r3, #0
	capacity = 0;
   b842a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b842e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8430:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   b8432:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   b8434:	2301      	movs	r3, #1
   b8436:	a901      	add	r1, sp, #4
   b8438:	f7ff fef5 	bl	b8226 <ultoa>
	*this = buf;
   b843c:	a901      	add	r1, sp, #4
   b843e:	4620      	mov	r0, r4
   b8440:	f7ff ffca 	bl	b83d8 <_ZN6StringaSEPKc>
}
   b8444:	4620      	mov	r0, r4
   b8446:	b00a      	add	sp, #40	; 0x28
   b8448:	bd10      	pop	{r4, pc}

000b844a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b844a:	b570      	push	{r4, r5, r6, lr}
   b844c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b844e:	460e      	mov	r6, r1
   b8450:	b909      	cbnz	r1, b8456 <_ZN6String6concatEPKcj+0xc>
   b8452:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8454:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8456:	b16a      	cbz	r2, b8474 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8458:	6884      	ldr	r4, [r0, #8]
   b845a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b845c:	4621      	mov	r1, r4
   b845e:	f7ff ff3b 	bl	b82d8 <_ZN6String7reserveEj>
   b8462:	2800      	cmp	r0, #0
   b8464:	d0f5      	beq.n	b8452 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8466:	6828      	ldr	r0, [r5, #0]
   b8468:	68ab      	ldr	r3, [r5, #8]
   b846a:	4631      	mov	r1, r6
   b846c:	4418      	add	r0, r3
   b846e:	f001 fed1 	bl	ba214 <strcpy>
	len = newlen;
   b8472:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8474:	2001      	movs	r0, #1
   b8476:	e7ed      	b.n	b8454 <_ZN6String6concatEPKcj+0xa>

000b8478 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b8478:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b847a:	688a      	ldr	r2, [r1, #8]
   b847c:	6809      	ldr	r1, [r1, #0]
{
   b847e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b8480:	f7ff ffe3 	bl	b844a <_ZN6String6concatEPKcj>
   b8484:	b910      	cbnz	r0, b848c <_ZplRK15StringSumHelperRK6String+0x14>
   b8486:	4620      	mov	r0, r4
   b8488:	f7ff ff0f 	bl	b82aa <_ZN6String10invalidateEv>
	return a;
}
   b848c:	4620      	mov	r0, r4
   b848e:	bd10      	pop	{r4, pc}

000b8490 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b8490:	b513      	push	{r0, r1, r4, lr}
   b8492:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8494:	b929      	cbnz	r1, b84a2 <_ZplRK15StringSumHelperPKc+0x12>
   b8496:	4620      	mov	r0, r4
   b8498:	f7ff ff07 	bl	b82aa <_ZN6String10invalidateEv>
	return a;
}
   b849c:	4620      	mov	r0, r4
   b849e:	b002      	add	sp, #8
   b84a0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b84a2:	4608      	mov	r0, r1
   b84a4:	9101      	str	r1, [sp, #4]
   b84a6:	f001 febd 	bl	ba224 <strlen>
   b84aa:	9901      	ldr	r1, [sp, #4]
   b84ac:	4602      	mov	r2, r0
   b84ae:	4620      	mov	r0, r4
   b84b0:	f7ff ffcb 	bl	b844a <_ZN6String6concatEPKcj>
   b84b4:	2800      	cmp	r0, #0
   b84b6:	d0ee      	beq.n	b8496 <_ZplRK15StringSumHelperPKc+0x6>
   b84b8:	e7f0      	b.n	b849c <_ZplRK15StringSumHelperPKc+0xc>
	...

000b84bc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b84bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b84be:	429a      	cmp	r2, r3
{
   b84c0:	460f      	mov	r7, r1
   b84c2:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b84c4:	490c      	ldr	r1, [pc, #48]	; (b84f8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b84c6:	bf88      	it	hi
   b84c8:	4613      	movhi	r3, r2
{
   b84ca:	4614      	mov	r4, r2
   b84cc:	4606      	mov	r6, r0
	if (left > right) {
   b84ce:	bf84      	itt	hi
   b84d0:	462c      	movhi	r4, r5
   b84d2:	461d      	movhi	r5, r3
	String out;
   b84d4:	f7ff ff2d 	bl	b8332 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b84d8:	68bb      	ldr	r3, [r7, #8]
   b84da:	42a3      	cmp	r3, r4
   b84dc:	d30a      	bcc.n	b84f4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b84de:	6839      	ldr	r1, [r7, #0]
   b84e0:	42ab      	cmp	r3, r5
   b84e2:	bf94      	ite	ls
   b84e4:	ebc4 0203 	rsbls	r2, r4, r3
   b84e8:	ebc4 0205 	rsbhi	r2, r4, r5
   b84ec:	4421      	add	r1, r4
   b84ee:	4630      	mov	r0, r6
   b84f0:	f7ff ff06 	bl	b8300 <_ZN6String4copyEPKcj>
	return out;
}
   b84f4:	4630      	mov	r0, r6
   b84f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b84f8:	000ba4c3 	.word	0x000ba4c3

000b84fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b84fc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b84fe:	6843      	ldr	r3, [r0, #4]
   b8500:	3b01      	subs	r3, #1
    {
   b8502:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8504:	6043      	str	r3, [r0, #4]
   b8506:	b963      	cbnz	r3, b8522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b8508:	6803      	ldr	r3, [r0, #0]
   b850a:	689b      	ldr	r3, [r3, #8]
   b850c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b850e:	68a3      	ldr	r3, [r4, #8]
   b8510:	3b01      	subs	r3, #1
   b8512:	60a3      	str	r3, [r4, #8]
   b8514:	b92b      	cbnz	r3, b8522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8516:	6823      	ldr	r3, [r4, #0]
   b8518:	4620      	mov	r0, r4
   b851a:	68db      	ldr	r3, [r3, #12]
        }
    }
   b851c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8520:	4718      	bx	r3
    }
   b8522:	bd10      	pop	{r4, pc}

000b8524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8524:	4802      	ldr	r0, [pc, #8]	; (b8530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8526:	2300      	movs	r3, #0
   b8528:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b852a:	f7ff baf1 	b.w	b7b10 <os_mutex_recursive_create>
   b852e:	bf00      	nop
   b8530:	2003e6dc 	.word	0x2003e6dc

000b8534 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b8534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8536:	4606      	mov	r6, r0
   b8538:	460d      	mov	r5, r1
  size_t n = 0;
   b853a:	188f      	adds	r7, r1, r2
   b853c:	2400      	movs	r4, #0
  while (size--) {
   b853e:	42bd      	cmp	r5, r7
   b8540:	d00c      	beq.n	b855c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b8542:	6833      	ldr	r3, [r6, #0]
   b8544:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8548:	689b      	ldr	r3, [r3, #8]
   b854a:	4630      	mov	r0, r6
   b854c:	4798      	blx	r3
     if (chunk>=0)
   b854e:	1e03      	subs	r3, r0, #0
   b8550:	db01      	blt.n	b8556 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b8552:	441c      	add	r4, r3
  while (size--) {
   b8554:	e7f3      	b.n	b853e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b8556:	2c00      	cmp	r4, #0
   b8558:	bf08      	it	eq
   b855a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b855c:	4620      	mov	r0, r4
   b855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8560 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b8560:	b508      	push	{r3, lr}
  return write(str);
   b8562:	f7fe fa75 	bl	b6a50 <_ZN5Print5writeEPKc>
}
   b8566:	bd08      	pop	{r3, pc}

000b8568 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8568:	6803      	ldr	r3, [r0, #0]
   b856a:	689b      	ldr	r3, [r3, #8]
   b856c:	4718      	bx	r3

000b856e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b856e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8570:	210d      	movs	r1, #13
{
   b8572:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8574:	f7ff fff8 	bl	b8568 <_ZN5Print5printEc>
  n += print('\n');
   b8578:	210a      	movs	r1, #10
  size_t n = print('\r');
   b857a:	4604      	mov	r4, r0
  n += print('\n');
   b857c:	4628      	mov	r0, r5
   b857e:	f7ff fff3 	bl	b8568 <_ZN5Print5printEc>
  return n;
}
   b8582:	4420      	add	r0, r4
   b8584:	bd38      	pop	{r3, r4, r5, pc}

000b8586 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b8586:	b538      	push	{r3, r4, r5, lr}
   b8588:	4605      	mov	r5, r0
  return write(str);
   b858a:	f7fe fa61 	bl	b6a50 <_ZN5Print5writeEPKc>
   b858e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8590:	4628      	mov	r0, r5
   b8592:	f7ff ffec 	bl	b856e <_ZN5Print7printlnEv>
  return n;
}
   b8596:	4420      	add	r0, r4
   b8598:	bd38      	pop	{r3, r4, r5, pc}

000b859a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b859a:	b530      	push	{r4, r5, lr}
   b859c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b859e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b85a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b85a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b85a6:	bf98      	it	ls
   b85a8:	220a      	movls	r2, #10
   b85aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b85ac:	460d      	mov	r5, r1
   b85ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b85b2:	fb01 5312 	mls	r3, r1, r2, r5
   b85b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b85ba:	2b09      	cmp	r3, #9
   b85bc:	bf94      	ite	ls
   b85be:	3330      	addls	r3, #48	; 0x30
   b85c0:	3337      	addhi	r3, #55	; 0x37
   b85c2:	b2db      	uxtb	r3, r3
  } while(n);
   b85c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b85c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b85ca:	d9ef      	bls.n	b85ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b85cc:	4621      	mov	r1, r4
   b85ce:	f7fe fa3f 	bl	b6a50 <_ZN5Print5writeEPKc>
}
   b85d2:	b00b      	add	sp, #44	; 0x2c
   b85d4:	bd30      	pop	{r4, r5, pc}

000b85d6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b85d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85da:	b086      	sub	sp, #24
   b85dc:	af00      	add	r7, sp, #0
   b85de:	4605      	mov	r5, r0
   b85e0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b85e2:	1d38      	adds	r0, r7, #4
   b85e4:	2114      	movs	r1, #20
{
   b85e6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b85e8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b85ea:	f7ff fcd5 	bl	b7f98 <vsnprintf>

    if (n<bufsize)
   b85ee:	2813      	cmp	r0, #19
   b85f0:	d80e      	bhi.n	b8610 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b85f2:	1d39      	adds	r1, r7, #4
   b85f4:	4628      	mov	r0, r5
   b85f6:	f7fe fa2b 	bl	b6a50 <_ZN5Print5writeEPKc>
   b85fa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b85fc:	b11e      	cbz	r6, b8606 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b85fe:	4628      	mov	r0, r5
   b8600:	f7ff ffb5 	bl	b856e <_ZN5Print7printlnEv>
   b8604:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8606:	4620      	mov	r0, r4
   b8608:	3718      	adds	r7, #24
   b860a:	46bd      	mov	sp, r7
   b860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b8610:	f100 0308 	add.w	r3, r0, #8
   b8614:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8618:	46e8      	mov	r8, sp
        char bigger[n+1];
   b861a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b861e:	4622      	mov	r2, r4
   b8620:	1c41      	adds	r1, r0, #1
   b8622:	683b      	ldr	r3, [r7, #0]
   b8624:	4668      	mov	r0, sp
   b8626:	f7ff fcb7 	bl	b7f98 <vsnprintf>
  return write(str);
   b862a:	4669      	mov	r1, sp
   b862c:	4628      	mov	r0, r5
   b862e:	f7fe fa0f 	bl	b6a50 <_ZN5Print5writeEPKc>
   b8632:	4604      	mov	r4, r0
   b8634:	46c5      	mov	sp, r8
   b8636:	e7e1      	b.n	b85fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8638 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8638:	b510      	push	{r4, lr}
   b863a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b863c:	f7ff fa58 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8640:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b8642:	6823      	ldr	r3, [r4, #0]
   b8644:	4620      	mov	r0, r4
   b8646:	695b      	ldr	r3, [r3, #20]
   b8648:	4798      	blx	r3
    if (c >= 0) return c;
   b864a:	2800      	cmp	r0, #0
   b864c:	da08      	bge.n	b8660 <_ZN6Stream9timedReadEv+0x28>
   b864e:	f7ff fa4f 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b8652:	68e3      	ldr	r3, [r4, #12]
   b8654:	1ac0      	subs	r0, r0, r3
   b8656:	68a3      	ldr	r3, [r4, #8]
   b8658:	4298      	cmp	r0, r3
   b865a:	d3f2      	bcc.n	b8642 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b865c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b8660:	bd10      	pop	{r4, pc}

000b8662 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b8662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8666:	4607      	mov	r7, r0
   b8668:	460c      	mov	r4, r1
   b866a:	188e      	adds	r6, r1, r2
   b866c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b866e:	42b5      	cmp	r5, r6
   b8670:	eba5 0804 	sub.w	r8, r5, r4
   b8674:	d007      	beq.n	b8686 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b8676:	4638      	mov	r0, r7
   b8678:	f7ff ffde 	bl	b8638 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b867c:	1e03      	subs	r3, r0, #0
   b867e:	db02      	blt.n	b8686 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b8680:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b8684:	e7f3      	b.n	b866e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b8686:	4640      	mov	r0, r8
   b8688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b868c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b868c:	2300      	movs	r3, #0
   b868e:	6840      	ldr	r0, [r0, #4]
   b8690:	461a      	mov	r2, r3
   b8692:	4619      	mov	r1, r3
   b8694:	f7ff bc10 	b.w	b7eb8 <network_on>

000b8698 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8698:	4b01      	ldr	r3, [pc, #4]	; (b86a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b869a:	4a02      	ldr	r2, [pc, #8]	; (b86a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b869c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b869e:	4770      	bx	lr
   b86a0:	2003e6e0 	.word	0x2003e6e0
   b86a4:	000bab34 	.word	0x000bab34

000b86a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b86a8:	4b02      	ldr	r3, [pc, #8]	; (b86b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b86aa:	681a      	ldr	r2, [r3, #0]
   b86ac:	4b02      	ldr	r3, [pc, #8]	; (b86b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b86ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b86b0:	4770      	bx	lr
   b86b2:	bf00      	nop
   b86b4:	2003dfc0 	.word	0x2003dfc0
   b86b8:	2003e6e4 	.word	0x2003e6e4

000b86bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b86bc:	2100      	movs	r1, #0
   b86be:	f7ff bbb7 	b.w	b7e30 <system_delay_ms>
	...

000b86c4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b86c4:	b510      	push	{r4, lr}
   b86c6:	4b04      	ldr	r3, [pc, #16]	; (b86d8 <_ZN9TCPClientD1Ev+0x14>)
   b86c8:	6003      	str	r3, [r0, #0]
   b86ca:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b86cc:	6980      	ldr	r0, [r0, #24]
   b86ce:	b108      	cbz	r0, b86d4 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b86d0:	f7ff ff14 	bl	b84fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b86d4:	4620      	mov	r0, r4
   b86d6:	bd10      	pop	{r4, pc}
   b86d8:	000bac2c 	.word	0x000bac2c

000b86dc <_ZN9TCPClientD0Ev>:
   b86dc:	b510      	push	{r4, lr}
   b86de:	4604      	mov	r4, r0
   b86e0:	f7ff fff0 	bl	b86c4 <_ZN9TCPClientD1Ev>
   b86e4:	4620      	mov	r0, r4
   b86e6:	211c      	movs	r1, #28
   b86e8:	f7fb fcd7 	bl	b409a <_ZdlPvj>
   b86ec:	4620      	mov	r0, r4
   b86ee:	bd10      	pop	{r4, pc}

000b86f0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b86f0:	4b01      	ldr	r3, [pc, #4]	; (b86f8 <_GLOBAL__sub_I_RGB+0x8>)
   b86f2:	2200      	movs	r2, #0
   b86f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b86f6:	4770      	bx	lr
   b86f8:	2003e6e8 	.word	0x2003e6e8

000b86fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b86fc:	4b01      	ldr	r3, [pc, #4]	; (b8704 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b86fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8700:	4770      	bx	lr
   b8702:	bf00      	nop
   b8704:	2003dfc4 	.word	0x2003dfc4

000b8708 <serialEventRun>:
{
   b8708:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b870a:	4b0b      	ldr	r3, [pc, #44]	; (b8738 <serialEventRun+0x30>)
   b870c:	b143      	cbz	r3, b8720 <serialEventRun+0x18>
   b870e:	f000 f989 	bl	b8a24 <_Z16_fetch_usbserialv>
   b8712:	6803      	ldr	r3, [r0, #0]
   b8714:	691b      	ldr	r3, [r3, #16]
   b8716:	4798      	blx	r3
   b8718:	2800      	cmp	r0, #0
   b871a:	dd01      	ble.n	b8720 <serialEventRun+0x18>
        serialEvent();
   b871c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8720:	4b06      	ldr	r3, [pc, #24]	; (b873c <serialEventRun+0x34>)
   b8722:	b143      	cbz	r3, b8736 <serialEventRun+0x2e>
   b8724:	f000 ff50 	bl	b95c8 <_Z22__fetch_global_Serial1v>
   b8728:	6803      	ldr	r3, [r0, #0]
   b872a:	691b      	ldr	r3, [r3, #16]
   b872c:	4798      	blx	r3
   b872e:	2800      	cmp	r0, #0
   b8730:	dd01      	ble.n	b8736 <serialEventRun+0x2e>
        serialEvent1();
   b8732:	f3af 8000 	nop.w
}
   b8736:	bd08      	pop	{r3, pc}
	...

000b8740 <_post_loop>:
{
   b8740:	b508      	push	{r3, lr}
	serialEventRun();
   b8742:	f7ff ffe1 	bl	b8708 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8746:	f7ff f9d3 	bl	b7af0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b874a:	4b01      	ldr	r3, [pc, #4]	; (b8750 <_post_loop+0x10>)
   b874c:	6018      	str	r0, [r3, #0]
}
   b874e:	bd08      	pop	{r3, pc}
   b8750:	2003e740 	.word	0x2003e740

000b8754 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8754:	4805      	ldr	r0, [pc, #20]	; (b876c <_Z33system_initialize_user_backup_ramv+0x18>)
   b8756:	4a06      	ldr	r2, [pc, #24]	; (b8770 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8758:	4906      	ldr	r1, [pc, #24]	; (b8774 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b875a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b875c:	1a12      	subs	r2, r2, r0
   b875e:	f001 fd0b 	bl	ba178 <memcpy>
    __backup_sram_signature = signature;
   b8762:	4b05      	ldr	r3, [pc, #20]	; (b8778 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8764:	4a05      	ldr	r2, [pc, #20]	; (b877c <_Z33system_initialize_user_backup_ramv+0x28>)
   b8766:	601a      	str	r2, [r3, #0]
}
   b8768:	bd08      	pop	{r3, pc}
   b876a:	bf00      	nop
   b876c:	2003f400 	.word	0x2003f400
   b8770:	2003f404 	.word	0x2003f404
   b8774:	000bafa0 	.word	0x000bafa0
   b8778:	2003f400 	.word	0x2003f400
   b877c:	9a271c1e 	.word	0x9a271c1e

000b8780 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8780:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8782:	2300      	movs	r3, #0
   b8784:	9300      	str	r3, [sp, #0]
   b8786:	461a      	mov	r2, r3
   b8788:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b878c:	f7ff fb6a 	bl	b7e64 <system_ctrl_set_result>
}
   b8790:	b003      	add	sp, #12
   b8792:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8798 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8798:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b879a:	8843      	ldrh	r3, [r0, #2]
   b879c:	2b0a      	cmp	r3, #10
   b879e:	d008      	beq.n	b87b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b87a0:	2b50      	cmp	r3, #80	; 0x50
   b87a2:	d10b      	bne.n	b87bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b87a4:	4b09      	ldr	r3, [pc, #36]	; (b87cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b87a6:	681b      	ldr	r3, [r3, #0]
   b87a8:	b14b      	cbz	r3, b87be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b87aa:	b003      	add	sp, #12
   b87ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b87b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b87b2:	f7ff ffe5 	bl	b8780 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b87b6:	b003      	add	sp, #12
   b87b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b87bc:	2300      	movs	r3, #0
   b87be:	9300      	str	r3, [sp, #0]
   b87c0:	461a      	mov	r2, r3
   b87c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b87c6:	f7ff fb4d 	bl	b7e64 <system_ctrl_set_result>
}
   b87ca:	e7f4      	b.n	b87b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b87cc:	2003e6fc 	.word	0x2003e6fc

000b87d0 <module_user_init_hook>:
{
   b87d0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b87d2:	4812      	ldr	r0, [pc, #72]	; (b881c <module_user_init_hook+0x4c>)
   b87d4:	2100      	movs	r1, #0
   b87d6:	f7ff fbf7 	bl	b7fc8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b87da:	4b11      	ldr	r3, [pc, #68]	; (b8820 <module_user_init_hook+0x50>)
   b87dc:	681a      	ldr	r2, [r3, #0]
   b87de:	4b11      	ldr	r3, [pc, #68]	; (b8824 <module_user_init_hook+0x54>)
   b87e0:	429a      	cmp	r2, r3
   b87e2:	4b11      	ldr	r3, [pc, #68]	; (b8828 <module_user_init_hook+0x58>)
   b87e4:	bf0c      	ite	eq
   b87e6:	2201      	moveq	r2, #1
   b87e8:	2200      	movne	r2, #0
   b87ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b87ec:	d001      	beq.n	b87f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b87ee:	f7ff ffb1 	bl	b8754 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b87f2:	f7ff f965 	bl	b7ac0 <HAL_RNG_GetRandomNumber>
   b87f6:	4604      	mov	r4, r0
    srand(seed);
   b87f8:	f001 fcd4 	bl	ba1a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b87fc:	4b0b      	ldr	r3, [pc, #44]	; (b882c <module_user_init_hook+0x5c>)
   b87fe:	b113      	cbz	r3, b8806 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8800:	4620      	mov	r0, r4
   b8802:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8806:	2100      	movs	r1, #0
   b8808:	4808      	ldr	r0, [pc, #32]	; (b882c <module_user_init_hook+0x5c>)
   b880a:	f7ff fb9d 	bl	b7f48 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b880e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8812:	4807      	ldr	r0, [pc, #28]	; (b8830 <module_user_init_hook+0x60>)
   b8814:	2100      	movs	r1, #0
   b8816:	f7ff bb1b 	b.w	b7e50 <system_ctrl_set_app_request_handler>
   b881a:	bf00      	nop
   b881c:	000b86fd 	.word	0x000b86fd
   b8820:	2003f400 	.word	0x2003f400
   b8824:	9a271c1e 	.word	0x9a271c1e
   b8828:	2003e6f8 	.word	0x2003e6f8
   b882c:	00000000 	.word	0x00000000
   b8830:	000b8799 	.word	0x000b8799

000b8834 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8834:	4770      	bx	lr

000b8836 <_ZN9IPAddressD0Ev>:
   b8836:	b510      	push	{r4, lr}
   b8838:	2118      	movs	r1, #24
   b883a:	4604      	mov	r4, r0
   b883c:	f7fb fc2d 	bl	b409a <_ZdlPvj>
   b8840:	4620      	mov	r0, r4
   b8842:	bd10      	pop	{r4, pc}

000b8844 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8844:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8846:	7d03      	ldrb	r3, [r0, #20]
   b8848:	2b06      	cmp	r3, #6
{
   b884a:	b08d      	sub	sp, #52	; 0x34
   b884c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b884e:	f100 0704 	add.w	r7, r0, #4
   b8852:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8856:	d012      	beq.n	b887e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8858:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b885c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8860:	220a      	movs	r2, #10
   b8862:	4630      	mov	r0, r6
   b8864:	f7ff fe99 	bl	b859a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8868:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b886a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b886c:	d019      	beq.n	b88a2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b886e:	2c00      	cmp	r4, #0
   b8870:	d0f4      	beq.n	b885c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8872:	212e      	movs	r1, #46	; 0x2e
   b8874:	4630      	mov	r0, r6
   b8876:	f7ff fe77 	bl	b8568 <_ZN5Print5printEc>
   b887a:	4404      	add	r4, r0
   b887c:	e7ee      	b.n	b885c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b887e:	232f      	movs	r3, #47	; 0x2f
   b8880:	466a      	mov	r2, sp
   b8882:	4639      	mov	r1, r7
   b8884:	200a      	movs	r0, #10
		buf[0] = 0;
   b8886:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b888a:	f7ff f949 	bl	b7b20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b888e:	4668      	mov	r0, sp
   b8890:	f001 fcc8 	bl	ba224 <strlen>
   b8894:	6833      	ldr	r3, [r6, #0]
   b8896:	4602      	mov	r2, r0
   b8898:	68db      	ldr	r3, [r3, #12]
   b889a:	4669      	mov	r1, sp
   b889c:	4630      	mov	r0, r6
   b889e:	4798      	blx	r3
   b88a0:	4604      	mov	r4, r0
    }
    return n;
}
   b88a2:	4620      	mov	r0, r4
   b88a4:	b00d      	add	sp, #52	; 0x34
   b88a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b88a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b88a8:	b510      	push	{r4, lr}
   b88aa:	4b05      	ldr	r3, [pc, #20]	; (b88c0 <_ZN9IPAddressC1Ev+0x18>)
   b88ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b88ae:	2211      	movs	r2, #17
   b88b0:	f840 3b04 	str.w	r3, [r0], #4
   b88b4:	2100      	movs	r1, #0
   b88b6:	f001 fc6d 	bl	ba194 <memset>
}
   b88ba:	4620      	mov	r0, r4
   b88bc:	bd10      	pop	{r4, pc}
   b88be:	bf00      	nop
   b88c0:	000bab5c 	.word	0x000bab5c

000b88c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b88c4:	4603      	mov	r3, r0
   b88c6:	4a07      	ldr	r2, [pc, #28]	; (b88e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b88c8:	b510      	push	{r4, lr}
   b88ca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b88ce:	f101 0210 	add.w	r2, r1, #16
   b88d2:	f851 4b04 	ldr.w	r4, [r1], #4
   b88d6:	f843 4b04 	str.w	r4, [r3], #4
   b88da:	4291      	cmp	r1, r2
   b88dc:	d1f9      	bne.n	b88d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b88de:	780a      	ldrb	r2, [r1, #0]
   b88e0:	701a      	strb	r2, [r3, #0]
}
   b88e2:	bd10      	pop	{r4, pc}
   b88e4:	000bab5c 	.word	0x000bab5c

000b88e8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b88e8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b88ea:	2b04      	cmp	r3, #4
   b88ec:	d104      	bne.n	b88f8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b88ee:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88f0:	3800      	subs	r0, #0
   b88f2:	bf18      	it	ne
   b88f4:	2001      	movne	r0, #1
   b88f6:	4770      	bx	lr
    } else if (version() == 6) {
   b88f8:	2b06      	cmp	r3, #6
   b88fa:	d107      	bne.n	b890c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b88fc:	6843      	ldr	r3, [r0, #4]
   b88fe:	b93b      	cbnz	r3, b8910 <_ZNK9IPAddresscvbEv+0x28>
   b8900:	6883      	ldr	r3, [r0, #8]
   b8902:	b92b      	cbnz	r3, b8910 <_ZNK9IPAddresscvbEv+0x28>
   b8904:	68c3      	ldr	r3, [r0, #12]
   b8906:	b91b      	cbnz	r3, b8910 <_ZNK9IPAddresscvbEv+0x28>
   b8908:	6900      	ldr	r0, [r0, #16]
   b890a:	e7f1      	b.n	b88f0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b890c:	2000      	movs	r0, #0
   b890e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8910:	2001      	movs	r0, #1
}
   b8912:	4770      	bx	lr

000b8914 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8914:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8916:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b891a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b891e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8922:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8926:	2304      	movs	r3, #4
   b8928:	6041      	str	r1, [r0, #4]
   b892a:	7503      	strb	r3, [r0, #20]
}
   b892c:	bd10      	pop	{r4, pc}
	...

000b8930 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b8930:	b513      	push	{r0, r1, r4, lr}
   b8932:	4c04      	ldr	r4, [pc, #16]	; (b8944 <_ZN9IPAddressC1Ehhhh+0x14>)
   b8934:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b8936:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b893a:	9400      	str	r4, [sp, #0]
   b893c:	f7ff ffea 	bl	b8914 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8940:	b002      	add	sp, #8
   b8942:	bd10      	pop	{r4, pc}
   b8944:	000bab5c 	.word	0x000bab5c

000b8948 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8948:	b507      	push	{r0, r1, r2, lr}
   b894a:	4b06      	ldr	r3, [pc, #24]	; (b8964 <_ZN9IPAddressC1EPKh+0x1c>)
   b894c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b894e:	78cb      	ldrb	r3, [r1, #3]
   b8950:	9300      	str	r3, [sp, #0]
   b8952:	788b      	ldrb	r3, [r1, #2]
   b8954:	784a      	ldrb	r2, [r1, #1]
   b8956:	7809      	ldrb	r1, [r1, #0]
   b8958:	f7ff ffdc 	bl	b8914 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b895c:	b003      	add	sp, #12
   b895e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8962:	bf00      	nop
   b8964:	000bab5c 	.word	0x000bab5c

000b8968 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8968:	7441      	strb	r1, [r0, #17]
}
   b896a:	4770      	bx	lr

000b896c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b896c:	4770      	bx	lr

000b896e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b896e:	4770      	bx	lr

000b8970 <_ZN9USBSerial4readEv>:
{
   b8970:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8972:	2100      	movs	r1, #0
   b8974:	7c00      	ldrb	r0, [r0, #16]
   b8976:	f7ff fa23 	bl	b7dc0 <HAL_USB_USART_Receive_Data>
}
   b897a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b897e:	bd08      	pop	{r3, pc}

000b8980 <_ZN9USBSerial4peekEv>:
{
   b8980:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8982:	2101      	movs	r1, #1
   b8984:	7c00      	ldrb	r0, [r0, #16]
   b8986:	f7ff fa1b 	bl	b7dc0 <HAL_USB_USART_Receive_Data>
}
   b898a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b898e:	bd08      	pop	{r3, pc}

000b8990 <_ZN9USBSerial17availableForWriteEv>:
{
   b8990:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8992:	7c00      	ldrb	r0, [r0, #16]
   b8994:	f7ff fa0c 	bl	b7db0 <HAL_USB_USART_Available_Data_For_Write>
}
   b8998:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b899c:	bd08      	pop	{r3, pc}

000b899e <_ZN9USBSerial9availableEv>:
{
   b899e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b89a0:	7c00      	ldrb	r0, [r0, #16]
   b89a2:	f7ff f9fd 	bl	b7da0 <HAL_USB_USART_Available_Data>
}
   b89a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89aa:	bd08      	pop	{r3, pc}

000b89ac <_ZN9USBSerial5writeEh>:
{
   b89ac:	b513      	push	{r0, r1, r4, lr}
   b89ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b89b0:	7c00      	ldrb	r0, [r0, #16]
{
   b89b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b89b4:	f7ff f9fc 	bl	b7db0 <HAL_USB_USART_Available_Data_For_Write>
   b89b8:	2800      	cmp	r0, #0
   b89ba:	9901      	ldr	r1, [sp, #4]
   b89bc:	dc01      	bgt.n	b89c2 <_ZN9USBSerial5writeEh+0x16>
   b89be:	7c60      	ldrb	r0, [r4, #17]
   b89c0:	b120      	cbz	r0, b89cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b89c2:	7c20      	ldrb	r0, [r4, #16]
   b89c4:	f7ff fa04 	bl	b7dd0 <HAL_USB_USART_Send_Data>
   b89c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b89cc:	b002      	add	sp, #8
   b89ce:	bd10      	pop	{r4, pc}

000b89d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b89d0:	7c00      	ldrb	r0, [r0, #16]
   b89d2:	f7ff ba05 	b.w	b7de0 <HAL_USB_USART_Flush_Data>

000b89d6 <_ZN9USBSerialD0Ev>:
   b89d6:	b510      	push	{r4, lr}
   b89d8:	2114      	movs	r1, #20
   b89da:	4604      	mov	r4, r0
   b89dc:	f7fb fb5d 	bl	b409a <_ZdlPvj>
   b89e0:	4620      	mov	r0, r4
   b89e2:	bd10      	pop	{r4, pc}

000b89e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b89e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b89e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b89ea:	4604      	mov	r4, r0
   b89ec:	4608      	mov	r0, r1
   b89ee:	2100      	movs	r1, #0
   b89f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b89f4:	4b04      	ldr	r3, [pc, #16]	; (b8a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b89f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b89f8:	2301      	movs	r3, #1
  _serial = serial;
   b89fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b89fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b89fe:	4611      	mov	r1, r2
   b8a00:	f7ff f9be 	bl	b7d80 <HAL_USB_USART_Init>
}
   b8a04:	4620      	mov	r0, r4
   b8a06:	bd10      	pop	{r4, pc}
   b8a08:	000bab70 	.word	0x000bab70

000b8a0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8a0c:	7c00      	ldrb	r0, [r0, #16]
   b8a0e:	2200      	movs	r2, #0
   b8a10:	f7ff b9be 	b.w	b7d90 <HAL_USB_USART_Begin>

000b8a14 <_Z19acquireSerialBufferv>:
{
   b8a14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8a16:	2214      	movs	r2, #20
{
   b8a18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8a1a:	2100      	movs	r1, #0
   b8a1c:	f001 fbba 	bl	ba194 <memset>
}
   b8a20:	4620      	mov	r0, r4
   b8a22:	bd10      	pop	{r4, pc}

000b8a24 <_Z16_fetch_usbserialv>:
{
   b8a24:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a26:	4c0f      	ldr	r4, [pc, #60]	; (b8a64 <_Z16_fetch_usbserialv+0x40>)
{
   b8a28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8a2a:	a803      	add	r0, sp, #12
   b8a2c:	f7ff fff2 	bl	b8a14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a30:	7821      	ldrb	r1, [r4, #0]
   b8a32:	f3bf 8f5b 	dmb	ish
   b8a36:	f011 0101 	ands.w	r1, r1, #1
   b8a3a:	d10f      	bne.n	b8a5c <_Z16_fetch_usbserialv+0x38>
   b8a3c:	4620      	mov	r0, r4
   b8a3e:	9101      	str	r1, [sp, #4]
   b8a40:	f7fb fb2d 	bl	b409e <__cxa_guard_acquire>
   b8a44:	9901      	ldr	r1, [sp, #4]
   b8a46:	b148      	cbz	r0, b8a5c <_Z16_fetch_usbserialv+0x38>
   b8a48:	aa03      	add	r2, sp, #12
   b8a4a:	4807      	ldr	r0, [pc, #28]	; (b8a68 <_Z16_fetch_usbserialv+0x44>)
   b8a4c:	f7ff ffca 	bl	b89e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8a50:	4620      	mov	r0, r4
   b8a52:	f7fb fb29 	bl	b40a8 <__cxa_guard_release>
   b8a56:	4805      	ldr	r0, [pc, #20]	; (b8a6c <_Z16_fetch_usbserialv+0x48>)
   b8a58:	f001 fb70 	bl	ba13c <atexit>
	return _usbserial;
}
   b8a5c:	4802      	ldr	r0, [pc, #8]	; (b8a68 <_Z16_fetch_usbserialv+0x44>)
   b8a5e:	b008      	add	sp, #32
   b8a60:	bd10      	pop	{r4, pc}
   b8a62:	bf00      	nop
   b8a64:	2003e700 	.word	0x2003e700
   b8a68:	2003e704 	.word	0x2003e704
   b8a6c:	000b896d 	.word	0x000b896d

000b8a70 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8a70:	4700      	bx	r0
	...

000b8a74 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8a74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8a78:	2400      	movs	r4, #0
{
   b8a7a:	461d      	mov	r5, r3
   b8a7c:	460f      	mov	r7, r1
   b8a7e:	4690      	mov	r8, r2
   b8a80:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8a82:	f7fe ffe5 	bl	b7a50 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8a86:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a88:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8a8c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8a90:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8a94:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8a98:	bfa2      	ittt	ge
   b8a9a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8a9e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8aa2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8aa4:	4907      	ldr	r1, [pc, #28]	; (b8ac4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8aa6:	9400      	str	r4, [sp, #0]
   b8aa8:	4643      	mov	r3, r8
   b8aaa:	463a      	mov	r2, r7
   b8aac:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8aae:	bfa8      	it	ge
   b8ab0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8ab4:	f7fe ffc4 	bl	b7a40 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8ab8:	fab0 f080 	clz	r0, r0
   b8abc:	0940      	lsrs	r0, r0, #5
   b8abe:	b004      	add	sp, #16
   b8ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ac4:	000b8a71 	.word	0x000b8a71

000b8ac8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   b8ac8:	f7fe bfd2 	b.w	b7a70 <HAL_Interrupts_Disable_All>

000b8acc <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   b8acc:	f7fe bfc8 	b.w	b7a60 <HAL_Interrupts_Enable_All>

000b8ad0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8ad0:	4770      	bx	lr

000b8ad2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8ad2:	7441      	strb	r1, [r0, #17]
}
   b8ad4:	4770      	bx	lr

000b8ad6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8ad6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8ad8:	7c00      	ldrb	r0, [r0, #16]
   b8ada:	f7ff f869 	bl	b7bb0 <hal_usart_available_data_for_write>
}
   b8ade:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8ae2:	bd08      	pop	{r3, pc}

000b8ae4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8ae4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8ae6:	7c00      	ldrb	r0, [r0, #16]
   b8ae8:	f7ff f83a 	bl	b7b60 <hal_usart_available>
}
   b8aec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8af0:	bd08      	pop	{r3, pc}

000b8af2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8af2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8af4:	7c00      	ldrb	r0, [r0, #16]
   b8af6:	f7ff f843 	bl	b7b80 <hal_usart_peek>
}
   b8afa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8afe:	bd08      	pop	{r3, pc}

000b8b00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8b00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8b02:	7c00      	ldrb	r0, [r0, #16]
   b8b04:	f7ff f834 	bl	b7b70 <hal_usart_read>
}
   b8b08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8b0c:	bd08      	pop	{r3, pc}

000b8b0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8b0e:	7c00      	ldrb	r0, [r0, #16]
   b8b10:	f7ff b83e 	b.w	b7b90 <hal_usart_flush>

000b8b14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b16:	7c45      	ldrb	r5, [r0, #17]
{
   b8b18:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b1a:	b12d      	cbz	r5, b8b28 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8b1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8b1e:	b003      	add	sp, #12
   b8b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8b24:	f7ff b814 	b.w	b7b50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b28:	7c00      	ldrb	r0, [r0, #16]
   b8b2a:	9101      	str	r1, [sp, #4]
   b8b2c:	f7ff f840 	bl	b7bb0 <hal_usart_available_data_for_write>
   b8b30:	2800      	cmp	r0, #0
   b8b32:	9901      	ldr	r1, [sp, #4]
   b8b34:	dcf2      	bgt.n	b8b1c <_ZN11USARTSerial5writeEh+0x8>
}
   b8b36:	4628      	mov	r0, r5
   b8b38:	b003      	add	sp, #12
   b8b3a:	bd30      	pop	{r4, r5, pc}

000b8b3c <_ZN11USARTSerialD0Ev>:
   b8b3c:	b510      	push	{r4, lr}
   b8b3e:	2114      	movs	r1, #20
   b8b40:	4604      	mov	r4, r0
   b8b42:	f7fb faaa 	bl	b409a <_ZdlPvj>
   b8b46:	4620      	mov	r0, r4
   b8b48:	bd10      	pop	{r4, pc}
	...

000b8b4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8b4c:	b510      	push	{r4, lr}
   b8b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8b52:	4604      	mov	r4, r0
   b8b54:	4608      	mov	r0, r1
   b8b56:	4611      	mov	r1, r2
   b8b58:	2200      	movs	r2, #0
   b8b5a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8b5e:	4b04      	ldr	r3, [pc, #16]	; (b8b70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8b60:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8b62:	2301      	movs	r3, #1
  _serial = serial;
   b8b64:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8b66:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8b68:	f7ff f82a 	bl	b7bc0 <hal_usart_init_ex>
}
   b8b6c:	4620      	mov	r0, r4
   b8b6e:	bd10      	pop	{r4, pc}
   b8b70:	000baba0 	.word	0x000baba0

000b8b74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8b74:	4770      	bx	lr

000b8b76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b78:	4606      	mov	r6, r0
   b8b7a:	4615      	mov	r5, r2
   b8b7c:	460c      	mov	r4, r1
   b8b7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8b80:	42bc      	cmp	r4, r7
   b8b82:	d006      	beq.n	b8b92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8b84:	6833      	ldr	r3, [r6, #0]
   b8b86:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8b8a:	689b      	ldr	r3, [r3, #8]
   b8b8c:	4630      	mov	r0, r6
   b8b8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8b90:	e7f6      	b.n	b8b80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8b92:	4628      	mov	r0, r5
   b8b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8b96:	7c00      	ldrb	r0, [r0, #16]
   b8b98:	2200      	movs	r2, #0
   b8b9a:	f7ff b831 	b.w	b7c00 <hal_i2c_write>

000b8b9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8b9e:	7c00      	ldrb	r0, [r0, #16]
   b8ba0:	2100      	movs	r1, #0
   b8ba2:	f7ff b835 	b.w	b7c10 <hal_i2c_available>

000b8ba6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8ba6:	7c00      	ldrb	r0, [r0, #16]
   b8ba8:	2100      	movs	r1, #0
   b8baa:	f7ff b839 	b.w	b7c20 <hal_i2c_read>

000b8bae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8bae:	7c00      	ldrb	r0, [r0, #16]
   b8bb0:	2100      	movs	r1, #0
   b8bb2:	f7ff b83d 	b.w	b7c30 <hal_i2c_peek>

000b8bb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8bb6:	7c00      	ldrb	r0, [r0, #16]
   b8bb8:	2100      	movs	r1, #0
   b8bba:	f7ff b841 	b.w	b7c40 <hal_i2c_flush>

000b8bbe <_ZN7TwoWireD0Ev>:
   b8bbe:	b510      	push	{r4, lr}
   b8bc0:	2114      	movs	r1, #20
   b8bc2:	4604      	mov	r4, r0
   b8bc4:	f7fb fa69 	bl	b409a <_ZdlPvj>
   b8bc8:	4620      	mov	r0, r4
   b8bca:	bd10      	pop	{r4, pc}

000b8bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8bcc:	b510      	push	{r4, lr}
   b8bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8bd2:	4604      	mov	r4, r0
   b8bd4:	4608      	mov	r0, r1
   b8bd6:	2100      	movs	r1, #0
   b8bd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8bdc:	4b03      	ldr	r3, [pc, #12]	; (b8bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8bde:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8be0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8be2:	4611      	mov	r1, r2
   b8be4:	f7ff f83c 	bl	b7c60 <hal_i2c_init>
}
   b8be8:	4620      	mov	r0, r4
   b8bea:	bd10      	pop	{r4, pc}
   b8bec:	000babd0 	.word	0x000babd0

000b8bf0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8bf0:	2300      	movs	r3, #0
   b8bf2:	7c00      	ldrb	r0, [r0, #16]
   b8bf4:	461a      	mov	r2, r3
   b8bf6:	4619      	mov	r1, r3
   b8bf8:	f7fe bfea 	b.w	b7bd0 <hal_i2c_begin>

000b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8bfe:	2200      	movs	r2, #0
   b8c00:	2314      	movs	r3, #20
   b8c02:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8c06:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8c0a:	780b      	ldrb	r3, [r1, #0]
   b8c0c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c10:	684b      	ldr	r3, [r1, #4]
   b8c12:	9303      	str	r3, [sp, #12]
   b8c14:	68cb      	ldr	r3, [r1, #12]
   b8c16:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8c18:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8c1a:	7a0b      	ldrb	r3, [r1, #8]
   b8c1c:	9305      	str	r3, [sp, #20]
   b8c1e:	a901      	add	r1, sp, #4
   b8c20:	f7ff f826 	bl	b7c70 <hal_i2c_request_ex>
}
   b8c24:	b007      	add	sp, #28
   b8c26:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c2a <_ZN7TwoWire11requestFromEhjh>:
{
   b8c2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8c2c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8c2e:	f88d 1000 	strb.w	r1, [sp]
   b8c32:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8c36:	9103      	str	r1, [sp, #12]
   b8c38:	bf18      	it	ne
   b8c3a:	2301      	movne	r3, #1
   b8c3c:	4669      	mov	r1, sp
    size_ = size;
   b8c3e:	9201      	str	r2, [sp, #4]
   b8c40:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c44:	f7ff ffda 	bl	b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8c48:	b005      	add	sp, #20
   b8c4a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c4e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8c4e:	2301      	movs	r3, #1
   b8c50:	f7ff bfeb 	b.w	b8c2a <_ZN7TwoWire11requestFromEhjh>

000b8c54 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8c54:	7c00      	ldrb	r0, [r0, #16]
   b8c56:	2200      	movs	r2, #0
   b8c58:	f7fe bfc2 	b.w	b7be0 <hal_i2c_begin_transmission>

000b8c5c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8c5c:	b2c9      	uxtb	r1, r1
   b8c5e:	f7ff bff9 	b.w	b8c54 <_ZN7TwoWire17beginTransmissionEh>

000b8c62 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8c62:	7c00      	ldrb	r0, [r0, #16]
   b8c64:	2200      	movs	r2, #0
   b8c66:	f7fe bfc3 	b.w	b7bf0 <hal_i2c_end_transmission>

000b8c6a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8c6a:	2101      	movs	r1, #1
   b8c6c:	f7ff bff9 	b.w	b8c62 <_ZN7TwoWire15endTransmissionEh>

000b8c70 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8c70:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8c72:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8c74:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8c78:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8c7a:	2201      	movs	r2, #1
   b8c7c:	f04f 33ff 	mov.w	r3, #4294967295
   b8c80:	f10d 0107 	add.w	r1, sp, #7
   b8c84:	47a0      	blx	r4
}
   b8c86:	b002      	add	sp, #8
   b8c88:	bd10      	pop	{r4, pc}

000b8c8a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8c8a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8c8c:	6803      	ldr	r3, [r0, #0]
   b8c8e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8c90:	f04f 33ff 	mov.w	r3, #4294967295
   b8c94:	46a4      	mov	ip, r4
}
   b8c96:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8c9a:	4760      	bx	ip

000b8c9c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8c9c:	b513      	push	{r0, r1, r4, lr}
   b8c9e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8ca0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8ca2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8ca6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8ca8:	f10d 0107 	add.w	r1, sp, #7
   b8cac:	2201      	movs	r2, #1
   b8cae:	47a0      	blx	r4
}
   b8cb0:	b002      	add	sp, #8
   b8cb2:	bd10      	pop	{r4, pc}

000b8cb4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8cb4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8cb6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8cb8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8cbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8cc0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8cc2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8cc4:	d008      	beq.n	b8cd8 <_ZN9TCPClient4readEv+0x24>
   b8cc6:	6963      	ldr	r3, [r4, #20]
   b8cc8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8ccc:	1c51      	adds	r1, r2, #1
   b8cce:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8cd2:	4413      	add	r3, r2
   b8cd4:	7918      	ldrb	r0, [r3, #4]
}
   b8cd6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8cd8:	6803      	ldr	r3, [r0, #0]
   b8cda:	691b      	ldr	r3, [r3, #16]
   b8cdc:	4798      	blx	r3
   b8cde:	2800      	cmp	r0, #0
   b8ce0:	d1f1      	bne.n	b8cc6 <_ZN9TCPClient4readEv+0x12>
   b8ce2:	f04f 30ff 	mov.w	r0, #4294967295
   b8ce6:	e7f6      	b.n	b8cd6 <_ZN9TCPClient4readEv+0x22>

000b8ce8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8ce8:	4770      	bx	lr

000b8cea <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8cea:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8cec:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8cee:	43c0      	mvns	r0, r0
   b8cf0:	0fc0      	lsrs	r0, r0, #31
   b8cf2:	4770      	bx	lr

000b8cf4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8cf4:	4770      	bx	lr
	...

000b8cf8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8cf8:	4b06      	ldr	r3, [pc, #24]	; (b8d14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8cfa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8cfc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8cfe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8d02:	d005      	beq.n	b8d10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8d04:	4608      	mov	r0, r1
   b8d06:	f000 fcc1 	bl	b968c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8d0a:	2800      	cmp	r0, #0
   b8d0c:	bf08      	it	eq
   b8d0e:	2400      	moveq	r4, #0
      }
   b8d10:	4620      	mov	r0, r4
   b8d12:	bd10      	pop	{r4, pc}
   b8d14:	000bab2c 	.word	0x000bab2c

000b8d18 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8d18:	b510      	push	{r4, lr}
   b8d1a:	21ac      	movs	r1, #172	; 0xac
   b8d1c:	4604      	mov	r4, r0
   b8d1e:	f7fb f9bc 	bl	b409a <_ZdlPvj>
   b8d22:	4620      	mov	r0, r4
   b8d24:	bd10      	pop	{r4, pc}

000b8d26 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8d26:	21ac      	movs	r1, #172	; 0xac
   b8d28:	f7fb b9b7 	b.w	b409a <_ZdlPvj>

000b8d2c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8d30:	f04f 0800 	mov.w	r8, #0
   b8d34:	b086      	sub	sp, #24
   b8d36:	461c      	mov	r4, r3
   b8d38:	f8c0 8004 	str.w	r8, [r0, #4]
   b8d3c:	4605      	mov	r5, r0
   b8d3e:	460e      	mov	r6, r1
   b8d40:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8d42:	4641      	mov	r1, r8
   b8d44:	2210      	movs	r2, #16
   b8d46:	a802      	add	r0, sp, #8
   b8d48:	f001 fa24 	bl	ba194 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8d4c:	1c63      	adds	r3, r4, #1
   b8d4e:	d009      	beq.n	b8d64 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d54:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8d58:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8d5c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8d60:	435c      	muls	r4, r3
   b8d62:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8d64:	6968      	ldr	r0, [r5, #20]
   b8d66:	2310      	movs	r3, #16
   b8d68:	9300      	str	r3, [sp, #0]
   b8d6a:	6800      	ldr	r0, [r0, #0]
   b8d6c:	ab02      	add	r3, sp, #8
   b8d6e:	f241 0205 	movw	r2, #4101	; 0x1005
   b8d72:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8d76:	f7fe ff83 	bl	b7c80 <sock_setsockopt>
    if (ret < 0) {
   b8d7a:	2800      	cmp	r0, #0
   b8d7c:	da07      	bge.n	b8d8e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8d7e:	f7ff f913 	bl	b7fa8 <__errno>
   b8d82:	6803      	ldr	r3, [r0, #0]
   b8d84:	606b      	str	r3, [r5, #4]
        return 0;
   b8d86:	2000      	movs	r0, #0
}
   b8d88:	b006      	add	sp, #24
   b8d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8d8e:	6968      	ldr	r0, [r5, #20]
   b8d90:	2300      	movs	r3, #0
   b8d92:	6800      	ldr	r0, [r0, #0]
   b8d94:	463a      	mov	r2, r7
   b8d96:	4631      	mov	r1, r6
   b8d98:	f7fe ff92 	bl	b7cc0 <sock_send>
    if (ret < 0) {
   b8d9c:	1e03      	subs	r3, r0, #0
   b8d9e:	dbee      	blt.n	b8d7e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8da0:	4618      	mov	r0, r3
   b8da2:	e7f1      	b.n	b8d88 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8da4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8da4:	b530      	push	{r4, r5, lr}
   b8da6:	b087      	sub	sp, #28
   b8da8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8daa:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8dac:	4668      	mov	r0, sp
   b8dae:	f7ff fdcb 	bl	b8948 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8db4:	3404      	adds	r4, #4
   b8db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8db8:	682b      	ldr	r3, [r5, #0]
   b8dba:	7023      	strb	r3, [r4, #0]
    }
   b8dbc:	b007      	add	sp, #28
   b8dbe:	bd30      	pop	{r4, r5, pc}

000b8dc0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8dc0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8dc2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8dc4:	4b05      	ldr	r3, [pc, #20]	; (b8ddc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8dc6:	4604      	mov	r4, r0
   b8dc8:	358c      	adds	r5, #140	; 0x8c
   b8dca:	f844 3b04 	str.w	r3, [r4], #4
   b8dce:	4606      	mov	r6, r0
   b8dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8dd4:	682b      	ldr	r3, [r5, #0]
   b8dd6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8dd8:	4630      	mov	r0, r6
   b8dda:	bd70      	pop	{r4, r5, r6, pc}
   b8ddc:	000bab5c 	.word	0x000bab5c

000b8de0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8de4:	4698      	mov	r8, r3
    stop();
   b8de6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8de8:	b093      	sub	sp, #76	; 0x4c
   b8dea:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8dec:	2400      	movs	r4, #0
    stop();
   b8dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8df0:	4606      	mov	r6, r0
   b8df2:	4617      	mov	r7, r2
    stop();
   b8df4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8df6:	4628      	mov	r0, r5
   b8df8:	466b      	mov	r3, sp
   b8dfa:	4622      	mov	r2, r4
   b8dfc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8dfe:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8e00:	f7fe fde6 	bl	b79d0 <netdb_getaddrinfo>
   b8e04:	4605      	mov	r5, r0
   b8e06:	2800      	cmp	r0, #0
   b8e08:	d163      	bne.n	b8ed2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8e0a:	9b00      	ldr	r3, [sp, #0]
   b8e0c:	2b00      	cmp	r3, #0
   b8e0e:	d04b      	beq.n	b8ea8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8e10:	695b      	ldr	r3, [r3, #20]
   b8e12:	2b00      	cmp	r3, #0
   b8e14:	d048      	beq.n	b8ea8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8e16:	a806      	add	r0, sp, #24
   b8e18:	f7ff fd46 	bl	b88a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8e1c:	9b00      	ldr	r3, [sp, #0]
   b8e1e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8e20:	7863      	ldrb	r3, [r4, #1]
   b8e22:	2b02      	cmp	r3, #2
   b8e24:	d104      	bne.n	b8e30 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8e26:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8e28:	a806      	add	r0, sp, #24
   b8e2a:	f7ff ffbb 	bl	b8da4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8e2e:	e026      	b.n	b8e7e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8e30:	2b0a      	cmp	r3, #10
   b8e32:	d124      	bne.n	b8e7e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8e34:	2211      	movs	r2, #17
   b8e36:	4629      	mov	r1, r5
   b8e38:	a801      	add	r0, sp, #4
   b8e3a:	f001 f9ab 	bl	ba194 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8e3e:	68a3      	ldr	r3, [r4, #8]
   b8e40:	2b00      	cmp	r3, #0
   b8e42:	d038      	beq.n	b8eb6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8e44:	f104 0308 	add.w	r3, r4, #8
   b8e48:	f10d 0c04 	add.w	ip, sp, #4
   b8e4c:	3418      	adds	r4, #24
   b8e4e:	6818      	ldr	r0, [r3, #0]
   b8e50:	6859      	ldr	r1, [r3, #4]
   b8e52:	4662      	mov	r2, ip
   b8e54:	c203      	stmia	r2!, {r0, r1}
   b8e56:	3308      	adds	r3, #8
   b8e58:	42a3      	cmp	r3, r4
   b8e5a:	4694      	mov	ip, r2
   b8e5c:	d1f7      	bne.n	b8e4e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8e5e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8e60:	a901      	add	r1, sp, #4
   b8e62:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8e64:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8e68:	f7ff fd2c 	bl	b88c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8e6c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8e70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8e74:	ac07      	add	r4, sp, #28
   b8e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e78:	f8dc 3000 	ldr.w	r3, [ip]
   b8e7c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b8e7e:	a806      	add	r0, sp, #24
   b8e80:	f7ff fd32 	bl	b88e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b8e84:	b180      	cbz	r0, b8ea8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b8e86:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b8e88:	ad07      	add	r5, sp, #28
   b8e8a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8e8e:	4b12      	ldr	r3, [pc, #72]	; (b8ed8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b8e90:	930c      	str	r3, [sp, #48]	; 0x30
   b8e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e94:	ac0d      	add	r4, sp, #52	; 0x34
   b8e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e98:	682b      	ldr	r3, [r5, #0]
   b8e9a:	7023      	strb	r3, [r4, #0]
   b8e9c:	463a      	mov	r2, r7
   b8e9e:	4643      	mov	r3, r8
   b8ea0:	a90c      	add	r1, sp, #48	; 0x30
   b8ea2:	4630      	mov	r0, r6
   b8ea4:	47c8      	blx	r9
   b8ea6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8ea8:	9800      	ldr	r0, [sp, #0]
   b8eaa:	f7fe fd89 	bl	b79c0 <netdb_freeaddrinfo>
}
   b8eae:	4628      	mov	r0, r5
   b8eb0:	b013      	add	sp, #76	; 0x4c
   b8eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8eb6:	68e3      	ldr	r3, [r4, #12]
   b8eb8:	2b00      	cmp	r3, #0
   b8eba:	d1c3      	bne.n	b8e44 <_ZN9TCPClient7connectEPKctm+0x64>
   b8ebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8ec0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b8ec4:	f7fe fe34 	bl	b7b30 <inet_htonl>
   b8ec8:	4581      	cmp	r9, r0
   b8eca:	d1bb      	bne.n	b8e44 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8ecc:	f104 0114 	add.w	r1, r4, #20
   b8ed0:	e7aa      	b.n	b8e28 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8ed2:	4625      	mov	r5, r4
   b8ed4:	e7e8      	b.n	b8ea8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8ed6:	bf00      	nop
   b8ed8:	000bab5c 	.word	0x000bab5c

000b8edc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8edc:	b538      	push	{r3, r4, r5, lr}
   b8ede:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8ee0:	681a      	ldr	r2, [r3, #0]
   b8ee2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8ee4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8ee6:	da10      	bge.n	b8f0a <_ZN9TCPClient9connectedEv+0x2e>
   b8ee8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8eec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8ef0:	429a      	cmp	r2, r3
   b8ef2:	d10a      	bne.n	b8f0a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8ef4:	6803      	ldr	r3, [r0, #0]
   b8ef6:	691b      	ldr	r3, [r3, #16]
   b8ef8:	4798      	blx	r3
        if (!rv) {
   b8efa:	4604      	mov	r4, r0
   b8efc:	b928      	cbnz	r0, b8f0a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8efe:	682b      	ldr	r3, [r5, #0]
   b8f00:	4628      	mov	r0, r5
   b8f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8f04:	4798      	blx	r3
        rv = available();
   b8f06:	4620      	mov	r0, r4
}
   b8f08:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8f0a:	2001      	movs	r0, #1
   b8f0c:	e7fc      	b.n	b8f08 <_ZN9TCPClient9connectedEv+0x2c>

000b8f0e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8f0e:	b510      	push	{r4, lr}
   b8f10:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8f12:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8f16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8f1a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8f1c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8f1e:	d005      	beq.n	b8f2c <_ZN9TCPClient4peekEv+0x1e>
   b8f20:	6963      	ldr	r3, [r4, #20]
   b8f22:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8f26:	4413      	add	r3, r2
   b8f28:	7918      	ldrb	r0, [r3, #4]
}
   b8f2a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8f2c:	6803      	ldr	r3, [r0, #0]
   b8f2e:	691b      	ldr	r3, [r3, #16]
   b8f30:	4798      	blx	r3
   b8f32:	2800      	cmp	r0, #0
   b8f34:	d1f4      	bne.n	b8f20 <_ZN9TCPClient4peekEv+0x12>
   b8f36:	f04f 30ff 	mov.w	r0, #4294967295
   b8f3a:	e7f6      	b.n	b8f2a <_ZN9TCPClient4peekEv+0x1c>

000b8f3c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f3e:	6943      	ldr	r3, [r0, #20]
   b8f40:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b8f42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8f46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8f4a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8f4c:	4605      	mov	r5, r0
   b8f4e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b8f50:	d016      	beq.n	b8f80 <_ZN9TCPClient4readEPhj+0x44>
   b8f52:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8f54:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8f58:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8f5c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b8f5e:	42bc      	cmp	r4, r7
   b8f60:	bf28      	it	cs
   b8f62:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8f64:	3304      	adds	r3, #4
   b8f66:	4622      	mov	r2, r4
   b8f68:	4419      	add	r1, r3
   b8f6a:	4630      	mov	r0, r6
   b8f6c:	f001 f904 	bl	ba178 <memcpy>
   b8f70:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b8f72:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8f76:	4423      	add	r3, r4
   b8f78:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8f7c:	4620      	mov	r0, r4
   b8f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8f80:	6803      	ldr	r3, [r0, #0]
   b8f82:	691b      	ldr	r3, [r3, #16]
   b8f84:	4798      	blx	r3
   b8f86:	2800      	cmp	r0, #0
   b8f88:	d1e3      	bne.n	b8f52 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b8f8a:	f04f 34ff 	mov.w	r4, #4294967295
   b8f8e:	e7f5      	b.n	b8f7c <_ZN9TCPClient4readEPhj+0x40>

000b8f90 <_ZN9TCPClient12flush_bufferEv>:
   b8f90:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8f92:	2300      	movs	r3, #0
   b8f94:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8f98:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8f9a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8f9e:	4770      	bx	lr

000b8fa0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8fa4:	461f      	mov	r7, r3
    stop();
   b8fa6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8fa8:	460c      	mov	r4, r1
    stop();
   b8faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8fac:	b08a      	sub	sp, #40	; 0x28
   b8fae:	4605      	mov	r5, r0
   b8fb0:	4616      	mov	r6, r2
    stop();
   b8fb2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8fb4:	7d23      	ldrb	r3, [r4, #20]
   b8fb6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8fba:	2b04      	cmp	r3, #4
   b8fbc:	bf0c      	ite	eq
   b8fbe:	2002      	moveq	r0, #2
   b8fc0:	200a      	movne	r0, #10
   b8fc2:	2206      	movs	r2, #6
   b8fc4:	2101      	movs	r1, #1
   b8fc6:	f7fe fe83 	bl	b7cd0 <sock_socket>
   b8fca:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8fce:	696b      	ldr	r3, [r5, #20]
   b8fd0:	681b      	ldr	r3, [r3, #0]
   b8fd2:	2b00      	cmp	r3, #0
   b8fd4:	da08      	bge.n	b8fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8fd6:	682b      	ldr	r3, [r5, #0]
   b8fd8:	4628      	mov	r0, r5
   b8fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8fdc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8fde:	4798      	blx	r3
}
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	b00a      	add	sp, #40	; 0x28
   b8fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8fe8:	4628      	mov	r0, r5
   b8fea:	f7ff ffd1 	bl	b8f90 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8fee:	b1b7      	cbz	r7, b901e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8ff0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ff2:	a903      	add	r1, sp, #12
   b8ff4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8ff6:	9303      	str	r3, [sp, #12]
   b8ff8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8ffc:	f7fe fd58 	bl	b7ab0 <if_index_to_name>
   b9000:	2800      	cmp	r0, #0
   b9002:	d1e8      	bne.n	b8fd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9004:	6968      	ldr	r0, [r5, #20]
   b9006:	2306      	movs	r3, #6
   b9008:	9300      	str	r3, [sp, #0]
   b900a:	6800      	ldr	r0, [r0, #0]
   b900c:	ab03      	add	r3, sp, #12
   b900e:	f241 020b 	movw	r2, #4107	; 0x100b
   b9012:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9016:	f7fe fe33 	bl	b7c80 <sock_setsockopt>
   b901a:	2800      	cmp	r0, #0
   b901c:	d1db      	bne.n	b8fd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b901e:	221c      	movs	r2, #28
   b9020:	2100      	movs	r1, #0
   b9022:	a803      	add	r0, sp, #12
   b9024:	f001 f8b6 	bl	ba194 <memset>
    if (ip.version() == 4) {
   b9028:	7d23      	ldrb	r3, [r4, #20]
   b902a:	2b04      	cmp	r3, #4
   b902c:	d11d      	bne.n	b906a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b902e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9032:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9034:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9038:	f7fe fd82 	bl	b7b40 <inet_htons>
   b903c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9040:	6860      	ldr	r0, [r4, #4]
   b9042:	f7fe fd75 	bl	b7b30 <inet_htonl>
   b9046:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9048:	696b      	ldr	r3, [r5, #20]
   b904a:	221c      	movs	r2, #28
   b904c:	6818      	ldr	r0, [r3, #0]
   b904e:	a903      	add	r1, sp, #12
   b9050:	f7fe fe26 	bl	b7ca0 <sock_connect>
   b9054:	2800      	cmp	r0, #0
   b9056:	d1be      	bne.n	b8fd6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9058:	3404      	adds	r4, #4
   b905a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b905c:	696d      	ldr	r5, [r5, #20]
   b905e:	358c      	adds	r5, #140	; 0x8c
   b9060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9062:	6823      	ldr	r3, [r4, #0]
   b9064:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9066:	2401      	movs	r4, #1
   b9068:	e7ba      	b.n	b8fe0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b906a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b906e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9070:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9074:	f7fe fd64 	bl	b7b40 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9078:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b907a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b907e:	1d23      	adds	r3, r4, #4
   b9080:	f104 0714 	add.w	r7, r4, #20
   b9084:	6818      	ldr	r0, [r3, #0]
   b9086:	6859      	ldr	r1, [r3, #4]
   b9088:	4632      	mov	r2, r6
   b908a:	c203      	stmia	r2!, {r0, r1}
   b908c:	3308      	adds	r3, #8
   b908e:	42bb      	cmp	r3, r7
   b9090:	4616      	mov	r6, r2
   b9092:	d1f7      	bne.n	b9084 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9094:	e7d8      	b.n	b9048 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9098 <_ZN9TCPClient9availableEv>:
{
   b9098:	b530      	push	{r4, r5, lr}
   b909a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b909c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b90a0:	b08b      	sub	sp, #44	; 0x2c
   b90a2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b90a4:	b12b      	cbz	r3, b90b2 <_ZN9TCPClient9availableEv+0x1a>
   b90a6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b90aa:	429a      	cmp	r2, r3
   b90ac:	d101      	bne.n	b90b2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b90ae:	f7ff ff6f 	bl	b8f90 <_ZN9TCPClient12flush_bufferEv>
   b90b2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b90b4:	6808      	ldr	r0, [r1, #0]
   b90b6:	2800      	cmp	r0, #0
   b90b8:	db18      	blt.n	b90ec <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b90ba:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b90be:	2d7f      	cmp	r5, #127	; 0x7f
   b90c0:	d814      	bhi.n	b90ec <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b90c2:	3104      	adds	r1, #4
   b90c4:	2308      	movs	r3, #8
   b90c6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b90ca:	4429      	add	r1, r5
   b90cc:	f7fe fdf0 	bl	b7cb0 <sock_recv>
            if (ret > 0) {
   b90d0:	2800      	cmp	r0, #0
   b90d2:	dd13      	ble.n	b90fc <_ZN9TCPClient9availableEv+0x64>
   b90d4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b90d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90da:	b90a      	cbnz	r2, b90e0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b90dc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b90e0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b90e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90e6:	4410      	add	r0, r2
   b90e8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b90ec:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b90ee:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b90f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b90f6:	1ac0      	subs	r0, r0, r3
   b90f8:	b00b      	add	sp, #44	; 0x2c
   b90fa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b90fc:	f7fe ff54 	bl	b7fa8 <__errno>
   b9100:	6803      	ldr	r3, [r0, #0]
   b9102:	2b0b      	cmp	r3, #11
   b9104:	d0f2      	beq.n	b90ec <_ZN9TCPClient9availableEv+0x54>
   b9106:	f7fe ff4f 	bl	b7fa8 <__errno>
   b910a:	6803      	ldr	r3, [r0, #0]
   b910c:	2b0b      	cmp	r3, #11
   b910e:	d0ed      	beq.n	b90ec <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9110:	2320      	movs	r3, #32
   b9112:	2500      	movs	r5, #0
   b9114:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9118:	f7fe ff46 	bl	b7fa8 <__errno>
   b911c:	6803      	ldr	r3, [r0, #0]
   b911e:	9301      	str	r3, [sp, #4]
   b9120:	4b08      	ldr	r3, [pc, #32]	; (b9144 <_ZN9TCPClient9availableEv+0xac>)
   b9122:	4909      	ldr	r1, [pc, #36]	; (b9148 <_ZN9TCPClient9availableEv+0xb0>)
   b9124:	9300      	str	r3, [sp, #0]
   b9126:	aa02      	add	r2, sp, #8
   b9128:	462b      	mov	r3, r5
   b912a:	2032      	movs	r0, #50	; 0x32
   b912c:	f7fe fe68 	bl	b7e00 <log_message>
                    sock_close(d_->sock);
   b9130:	6963      	ldr	r3, [r4, #20]
   b9132:	6818      	ldr	r0, [r3, #0]
   b9134:	f7fe fdac 	bl	b7c90 <sock_close>
   b9138:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b913a:	f04f 32ff 	mov.w	r2, #4294967295
   b913e:	601a      	str	r2, [r3, #0]
   b9140:	e7d4      	b.n	b90ec <_ZN9TCPClient9availableEv+0x54>
   b9142:	bf00      	nop
   b9144:	000babf7 	.word	0x000babf7
   b9148:	000babf0 	.word	0x000babf0

000b914c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b914c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b914e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9150:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9152:	6818      	ldr	r0, [r3, #0]
   b9154:	2800      	cmp	r0, #0
   b9156:	db01      	blt.n	b915c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9158:	f7fe fd9a 	bl	b7c90 <sock_close>
   b915c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b915e:	f04f 32ff 	mov.w	r2, #4294967295
   b9162:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9164:	6960      	ldr	r0, [r4, #20]
   b9166:	2211      	movs	r2, #17
   b9168:	2100      	movs	r1, #0
   b916a:	308c      	adds	r0, #140	; 0x8c
   b916c:	f001 f812 	bl	ba194 <memset>
    flush_buffer();
   b9170:	4620      	mov	r0, r4
}
   b9172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9176:	f7ff bf0b 	b.w	b8f90 <_ZN9TCPClient12flush_bufferEv>

000b917a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b917a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b917c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b917e:	4604      	mov	r4, r0
          total(0) {
   b9180:	6001      	str	r1, [r0, #0]
   b9182:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9186:	3088      	adds	r0, #136	; 0x88
   b9188:	f7ff fb8e 	bl	b88a8 <_ZN9IPAddressC1Ev>
}
   b918c:	4620      	mov	r0, r4
   b918e:	bd10      	pop	{r4, pc}

000b9190 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9190:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9192:	2300      	movs	r3, #0
   b9194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9198:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b919c:	4a0e      	ldr	r2, [pc, #56]	; (b91d8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b919e:	6103      	str	r3, [r0, #16]
   b91a0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b91a2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b91a4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b91a6:	20ac      	movs	r0, #172	; 0xac
   b91a8:	9101      	str	r1, [sp, #4]
   b91aa:	f7fa ff72 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b91ae:	1e05      	subs	r5, r0, #0
   b91b0:	f105 060c 	add.w	r6, r5, #12
   b91b4:	d008      	beq.n	b91c8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b91b6:	2301      	movs	r3, #1
   b91b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b91bc:	4b07      	ldr	r3, [pc, #28]	; (b91dc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b91be:	9901      	ldr	r1, [sp, #4]
   b91c0:	602b      	str	r3, [r5, #0]
   b91c2:	4630      	mov	r0, r6
   b91c4:	f7ff ffd9 	bl	b917a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b91c8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b91ca:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b91ce:	f7ff fedf 	bl	b8f90 <_ZN9TCPClient12flush_bufferEv>
}
   b91d2:	b002      	add	sp, #8
   b91d4:	bd70      	pop	{r4, r5, r6, pc}
   b91d6:	bf00      	nop
   b91d8:	000bac2c 	.word	0x000bac2c
   b91dc:	000bac10 	.word	0x000bac10

000b91e0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b91e0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b91e2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b91e6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b91e8:	f7ff ffd2 	bl	b9190 <_ZN9TCPClientC1Ei>
}
   b91ec:	4620      	mov	r0, r4
   b91ee:	bd10      	pop	{r4, pc}

000b91f0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b91f0:	b510      	push	{r4, lr}
   b91f2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b91f4:	6800      	ldr	r0, [r0, #0]
   b91f6:	2800      	cmp	r0, #0
   b91f8:	db01      	blt.n	b91fe <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b91fa:	f7fe fd49 	bl	b7c90 <sock_close>
    }
}
   b91fe:	4620      	mov	r0, r4
   b9200:	bd10      	pop	{r4, pc}

000b9202 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b9202:	300c      	adds	r0, #12
   b9204:	f7ff bff4 	b.w	b91f0 <_ZN9TCPClient4DataD1Ev>

000b9208 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9208:	2200      	movs	r2, #0
   b920a:	6840      	ldr	r0, [r0, #4]
   b920c:	4611      	mov	r1, r2
   b920e:	f7fe be4b 	b.w	b7ea8 <network_ready>

000b9212 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b9212:	2200      	movs	r2, #0
   b9214:	6840      	ldr	r0, [r0, #4]
   b9216:	4611      	mov	r1, r2
   b9218:	f7fe be66 	b.w	b7ee8 <network_listening>

000b921c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b921c:	2200      	movs	r2, #0
   b921e:	6840      	ldr	r0, [r0, #4]
   b9220:	4611      	mov	r1, r2
   b9222:	f7fe be71 	b.w	b7f08 <network_get_listen_timeout>

000b9226 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9226:	6840      	ldr	r0, [r0, #4]
   b9228:	2200      	movs	r2, #0
   b922a:	f7fe be65 	b.w	b7ef8 <network_set_listen_timeout>

000b922e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b922e:	6840      	ldr	r0, [r0, #4]
   b9230:	2200      	movs	r2, #0
   b9232:	f081 0101 	eor.w	r1, r1, #1
   b9236:	f7fe be4f 	b.w	b7ed8 <network_listen>

000b923a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b923a:	2300      	movs	r3, #0
   b923c:	6840      	ldr	r0, [r0, #4]
   b923e:	461a      	mov	r2, r3
   b9240:	4619      	mov	r1, r3
   b9242:	f7fe be41 	b.w	b7ec8 <network_off>

000b9246 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9246:	2200      	movs	r2, #0
   b9248:	6840      	ldr	r0, [r0, #4]
   b924a:	4611      	mov	r1, r2
   b924c:	f7fe be1c 	b.w	b7e88 <network_connecting>

000b9250 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9250:	6840      	ldr	r0, [r0, #4]
   b9252:	2200      	movs	r2, #0
   b9254:	2102      	movs	r1, #2
   b9256:	f7fe be1f 	b.w	b7e98 <network_disconnect>

000b925a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b925a:	2300      	movs	r3, #0
   b925c:	6840      	ldr	r0, [r0, #4]
   b925e:	461a      	mov	r2, r3
   b9260:	f7fe be0a 	b.w	b7e78 <network_connect>

000b9264 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b9264:	4b02      	ldr	r3, [pc, #8]	; (b9270 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b9266:	2204      	movs	r2, #4
   b9268:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b926a:	4a02      	ldr	r2, [pc, #8]	; (b9274 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b926c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b926e:	4770      	bx	lr
   b9270:	2003e718 	.word	0x2003e718
   b9274:	000bac78 	.word	0x000bac78

000b9278 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9278:	2300      	movs	r3, #0
   b927a:	6840      	ldr	r0, [r0, #4]
   b927c:	461a      	mov	r2, r3
   b927e:	f7fe bdfb 	b.w	b7e78 <network_connect>

000b9282 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b9282:	6840      	ldr	r0, [r0, #4]
   b9284:	2200      	movs	r2, #0
   b9286:	2102      	movs	r1, #2
   b9288:	f7fe be06 	b.w	b7e98 <network_disconnect>

000b928c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b928c:	2200      	movs	r2, #0
   b928e:	6840      	ldr	r0, [r0, #4]
   b9290:	4611      	mov	r1, r2
   b9292:	f7fe bdf9 	b.w	b7e88 <network_connecting>

000b9296 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9296:	2200      	movs	r2, #0
   b9298:	6840      	ldr	r0, [r0, #4]
   b929a:	4611      	mov	r1, r2
   b929c:	f7fe be04 	b.w	b7ea8 <network_ready>

000b92a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b92a0:	2300      	movs	r3, #0
   b92a2:	6840      	ldr	r0, [r0, #4]
   b92a4:	461a      	mov	r2, r3
   b92a6:	4619      	mov	r1, r3
   b92a8:	f7fe be06 	b.w	b7eb8 <network_on>

000b92ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b92ac:	2300      	movs	r3, #0
   b92ae:	6840      	ldr	r0, [r0, #4]
   b92b0:	461a      	mov	r2, r3
   b92b2:	4619      	mov	r1, r3
   b92b4:	f7fe be08 	b.w	b7ec8 <network_off>

000b92b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b92b8:	6840      	ldr	r0, [r0, #4]
   b92ba:	2100      	movs	r1, #0
   b92bc:	f7fe be2c 	b.w	b7f18 <network_is_on>

000b92c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b92c0:	6840      	ldr	r0, [r0, #4]
   b92c2:	2100      	movs	r1, #0
   b92c4:	f7fe be30 	b.w	b7f28 <network_is_off>

000b92c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b92c8:	6840      	ldr	r0, [r0, #4]
   b92ca:	2200      	movs	r2, #0
   b92cc:	f081 0101 	eor.w	r1, r1, #1
   b92d0:	f7fe be02 	b.w	b7ed8 <network_listen>

000b92d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b92d4:	6840      	ldr	r0, [r0, #4]
   b92d6:	2200      	movs	r2, #0
   b92d8:	f7fe be0e 	b.w	b7ef8 <network_set_listen_timeout>

000b92dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b92dc:	2200      	movs	r2, #0
   b92de:	6840      	ldr	r0, [r0, #4]
   b92e0:	4611      	mov	r1, r2
   b92e2:	f7fe be11 	b.w	b7f08 <network_get_listen_timeout>

000b92e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b92e6:	2200      	movs	r2, #0
   b92e8:	6840      	ldr	r0, [r0, #4]
   b92ea:	4611      	mov	r1, r2
   b92ec:	f7fe bdfc 	b.w	b7ee8 <network_listening>

000b92f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b92f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b92f4:	b095      	sub	sp, #84	; 0x54
   b92f6:	4614      	mov	r4, r2
   b92f8:	460d      	mov	r5, r1
   b92fa:	4607      	mov	r7, r0
    IPAddress addr;
   b92fc:	f7ff fad4 	bl	b88a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b9300:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b9302:	221c      	movs	r2, #28
   b9304:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b9306:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b9308:	f000 ff44 	bl	ba194 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b930c:	2340      	movs	r3, #64	; 0x40
   b930e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b9310:	4620      	mov	r0, r4
   b9312:	466b      	mov	r3, sp
   b9314:	aa0c      	add	r2, sp, #48	; 0x30
   b9316:	2100      	movs	r1, #0
   b9318:	f7fe fb5a 	bl	b79d0 <netdb_getaddrinfo>
    if (!r) {
   b931c:	4604      	mov	r4, r0
   b931e:	2800      	cmp	r0, #0
   b9320:	d14b      	bne.n	b93ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b9322:	4602      	mov	r2, r0
   b9324:	2101      	movs	r1, #1
   b9326:	6868      	ldr	r0, [r5, #4]
   b9328:	f7fe fdbe 	bl	b7ea8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b932c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b932e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9330:	4622      	mov	r2, r4
   b9332:	6868      	ldr	r0, [r5, #4]
   b9334:	f7fe fdb8 	bl	b7ea8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9338:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b933a:	4681      	mov	r9, r0
        bool ok = false;
   b933c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b933e:	2e00      	cmp	r6, #0
   b9340:	d03b      	beq.n	b93ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b9342:	2900      	cmp	r1, #0
   b9344:	d139      	bne.n	b93ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9346:	6873      	ldr	r3, [r6, #4]
   b9348:	2b02      	cmp	r3, #2
   b934a:	d003      	beq.n	b9354 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b934c:	2b0a      	cmp	r3, #10
   b934e:	d011      	beq.n	b9374 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9350:	69f6      	ldr	r6, [r6, #28]
   b9352:	e7f4      	b.n	b933e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9354:	f1b8 0f00 	cmp.w	r8, #0
   b9358:	d0fa      	beq.n	b9350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b935a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b935c:	a806      	add	r0, sp, #24
   b935e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b9360:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b9362:	f7ff faf1 	bl	b8948 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9368:	1d3c      	adds	r4, r7, #4
   b936a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b936c:	682b      	ldr	r3, [r5, #0]
   b936e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9370:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b9372:	e7ed      	b.n	b9350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9374:	f1b9 0f00 	cmp.w	r9, #0
   b9378:	d0ea      	beq.n	b9350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b937a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b937c:	2210      	movs	r2, #16
   b937e:	a801      	add	r0, sp, #4
   b9380:	f000 ff08 	bl	ba194 <memset>
                    a.v = 6;
   b9384:	2306      	movs	r3, #6
   b9386:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b938a:	ad01      	add	r5, sp, #4
   b938c:	f104 0308 	add.w	r3, r4, #8
   b9390:	3418      	adds	r4, #24
   b9392:	6818      	ldr	r0, [r3, #0]
   b9394:	6859      	ldr	r1, [r3, #4]
   b9396:	462a      	mov	r2, r5
   b9398:	c203      	stmia	r2!, {r0, r1}
   b939a:	3308      	adds	r3, #8
   b939c:	42a3      	cmp	r3, r4
   b939e:	4615      	mov	r5, r2
   b93a0:	d1f7      	bne.n	b9392 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b93a2:	a901      	add	r1, sp, #4
   b93a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b93a6:	ad07      	add	r5, sp, #28
   b93a8:	f7ff fa8c 	bl	b88c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b93ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b93ae:	1d3c      	adds	r4, r7, #4
   b93b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b93b2:	682b      	ldr	r3, [r5, #0]
   b93b4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b93b6:	4649      	mov	r1, r9
   b93b8:	e7ca      	b.n	b9350 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b93ba:	9800      	ldr	r0, [sp, #0]
   b93bc:	f7fe fb00 	bl	b79c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b93c0:	4638      	mov	r0, r7
   b93c2:	b015      	add	sp, #84	; 0x54
   b93c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b93c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b93c8:	4b02      	ldr	r3, [pc, #8]	; (b93d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b93ca:	4a03      	ldr	r2, [pc, #12]	; (b93d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b93cc:	601a      	str	r2, [r3, #0]
   b93ce:	2200      	movs	r2, #0
   b93d0:	605a      	str	r2, [r3, #4]

} // spark
   b93d2:	4770      	bx	lr
   b93d4:	2003e720 	.word	0x2003e720
   b93d8:	000bacb4 	.word	0x000bacb4

000b93dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b93dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b93de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b93e0:	d902      	bls.n	b93e8 <pinAvailable+0xc>
    return false;
   b93e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b93e4:	b002      	add	sp, #8
   b93e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b93e8:	f1a0 030b 	sub.w	r3, r0, #11
   b93ec:	2b02      	cmp	r3, #2
   b93ee:	d81a      	bhi.n	b9426 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b93f0:	4c17      	ldr	r4, [pc, #92]	; (b9450 <pinAvailable+0x74>)
   b93f2:	7821      	ldrb	r1, [r4, #0]
   b93f4:	f3bf 8f5b 	dmb	ish
   b93f8:	f011 0101 	ands.w	r1, r1, #1
   b93fc:	d10b      	bne.n	b9416 <pinAvailable+0x3a>
   b93fe:	4620      	mov	r0, r4
   b9400:	9101      	str	r1, [sp, #4]
   b9402:	f7fa fe4c 	bl	b409e <__cxa_guard_acquire>
   b9406:	9901      	ldr	r1, [sp, #4]
   b9408:	b128      	cbz	r0, b9416 <pinAvailable+0x3a>
   b940a:	4812      	ldr	r0, [pc, #72]	; (b9454 <pinAvailable+0x78>)
   b940c:	f7fe fe28 	bl	b8060 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b9410:	4620      	mov	r0, r4
   b9412:	f7fa fe49 	bl	b40a8 <__cxa_guard_release>
   b9416:	4b0f      	ldr	r3, [pc, #60]	; (b9454 <pinAvailable+0x78>)
   b9418:	7818      	ldrb	r0, [r3, #0]
   b941a:	f7fe fc79 	bl	b7d10 <hal_spi_is_enabled>
   b941e:	2800      	cmp	r0, #0
   b9420:	d1df      	bne.n	b93e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b9422:	2001      	movs	r0, #1
   b9424:	e7de      	b.n	b93e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b9426:	2801      	cmp	r0, #1
   b9428:	d809      	bhi.n	b943e <pinAvailable+0x62>
   b942a:	f000 f909 	bl	b9640 <_Z19__fetch_global_Wirev>
   b942e:	2100      	movs	r1, #0
   b9430:	7c00      	ldrb	r0, [r0, #16]
   b9432:	f7fe fc0d 	bl	b7c50 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b9436:	f080 0001 	eor.w	r0, r0, #1
   b943a:	b2c0      	uxtb	r0, r0
   b943c:	e7d2      	b.n	b93e4 <pinAvailable+0x8>
   b943e:	3809      	subs	r0, #9
   b9440:	2801      	cmp	r0, #1
   b9442:	d8ee      	bhi.n	b9422 <pinAvailable+0x46>
   b9444:	f000 f8c0 	bl	b95c8 <_Z22__fetch_global_Serial1v>
   b9448:	7c00      	ldrb	r0, [r0, #16]
   b944a:	f7fe fba9 	bl	b7ba0 <hal_usart_is_enabled>
   b944e:	e7f2      	b.n	b9436 <pinAvailable+0x5a>
   b9450:	2003e02c 	.word	0x2003e02c
   b9454:	2003e030 	.word	0x2003e030

000b9458 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9458:	2823      	cmp	r0, #35	; 0x23
{
   b945a:	b538      	push	{r3, r4, r5, lr}
   b945c:	4604      	mov	r4, r0
   b945e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9460:	d80a      	bhi.n	b9478 <pinMode+0x20>
   b9462:	29ff      	cmp	r1, #255	; 0xff
   b9464:	d008      	beq.n	b9478 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9466:	f7ff ffb9 	bl	b93dc <pinAvailable>
   b946a:	b128      	cbz	r0, b9478 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b946c:	4629      	mov	r1, r5
   b946e:	4620      	mov	r0, r4
}
   b9470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9474:	f7fe bac4 	b.w	b7a00 <HAL_Pin_Mode>
}
   b9478:	bd38      	pop	{r3, r4, r5, pc}

000b947a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b947a:	b538      	push	{r3, r4, r5, lr}
   b947c:	4604      	mov	r4, r0
   b947e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9480:	f7fe fac6 	bl	b7a10 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9484:	28ff      	cmp	r0, #255	; 0xff
   b9486:	d010      	beq.n	b94aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9488:	2806      	cmp	r0, #6
   b948a:	d804      	bhi.n	b9496 <digitalWrite+0x1c>
   b948c:	234d      	movs	r3, #77	; 0x4d
   b948e:	fa23 f000 	lsr.w	r0, r3, r0
   b9492:	07c3      	lsls	r3, r0, #31
   b9494:	d409      	bmi.n	b94aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9496:	4620      	mov	r0, r4
   b9498:	f7ff ffa0 	bl	b93dc <pinAvailable>
   b949c:	b128      	cbz	r0, b94aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b949e:	4629      	mov	r1, r5
   b94a0:	4620      	mov	r0, r4
}
   b94a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b94a6:	f7fe babb 	b.w	b7a20 <HAL_GPIO_Write>
}
   b94aa:	bd38      	pop	{r3, r4, r5, pc}

000b94ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b94ac:	b510      	push	{r4, lr}
   b94ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b94b0:	f7fe faae 	bl	b7a10 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b94b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b94b6:	b2db      	uxtb	r3, r3
   b94b8:	2b01      	cmp	r3, #1
   b94ba:	d908      	bls.n	b94ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b94bc:	4620      	mov	r0, r4
   b94be:	f7ff ff8d 	bl	b93dc <pinAvailable>
   b94c2:	b120      	cbz	r0, b94ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b94c4:	4620      	mov	r0, r4
}
   b94c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b94ca:	f7fe bab1 	b.w	b7a30 <HAL_GPIO_Read>
}
   b94ce:	2000      	movs	r0, #0
   b94d0:	bd10      	pop	{r4, pc}

000b94d2 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b94d2:	280d      	cmp	r0, #13
{
   b94d4:	b510      	push	{r4, lr}
   b94d6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b94d8:	bf9c      	itt	ls
   b94da:	340e      	addls	r4, #14
   b94dc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b94de:	4620      	mov	r0, r4
   b94e0:	f7ff ff7c 	bl	b93dc <pinAvailable>
   b94e4:	b150      	cbz	r0, b94fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b94e6:	2103      	movs	r1, #3
   b94e8:	4620      	mov	r0, r4
   b94ea:	f7fe fa81 	bl	b79f0 <HAL_Validate_Pin_Function>
   b94ee:	2803      	cmp	r0, #3
   b94f0:	d104      	bne.n	b94fc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b94f2:	4620      	mov	r0, r4
}
   b94f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b94f8:	f7fe baca 	b.w	b7a90 <hal_adc_read>
}
   b94fc:	2000      	movs	r0, #0
   b94fe:	bd10      	pop	{r4, pc}

000b9500 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b9500:	b538      	push	{r3, r4, r5, lr}
   b9502:	4604      	mov	r4, r0
   b9504:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b9506:	f7ff ff69 	bl	b93dc <pinAvailable>
   b950a:	b1f0      	cbz	r0, b954a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b950c:	2104      	movs	r1, #4
   b950e:	4620      	mov	r0, r4
   b9510:	f7fe fa6e 	bl	b79f0 <HAL_Validate_Pin_Function>
   b9514:	2804      	cmp	r0, #4
   b9516:	d105      	bne.n	b9524 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b9518:	b2a9      	uxth	r1, r5
   b951a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b951c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b9520:	f7fe baae 	b.w	b7a80 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b9524:	2102      	movs	r1, #2
   b9526:	4620      	mov	r0, r4
   b9528:	f7fe fa62 	bl	b79f0 <HAL_Validate_Pin_Function>
   b952c:	2802      	cmp	r0, #2
   b952e:	d10c      	bne.n	b954a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b9530:	4620      	mov	r0, r4
   b9532:	f7fe fa6d 	bl	b7a10 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b9536:	2801      	cmp	r0, #1
   b9538:	d001      	beq.n	b953e <_Z11analogWritetm+0x3e>
   b953a:	2804      	cmp	r0, #4
   b953c:	d105      	bne.n	b954a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b953e:	4629      	mov	r1, r5
   b9540:	4620      	mov	r0, r4
}
   b9542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b9546:	f7fe baab 	b.w	b7aa0 <hal_pwm_write_ext>
}
   b954a:	bd38      	pop	{r3, r4, r5, pc}

000b954c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9550:	4690      	mov	r8, r2
   b9552:	461f      	mov	r7, r3
   b9554:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b9556:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b9558:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b955a:	f1c4 0107 	rsb	r1, r4, #7
   b955e:	f1b8 0f00 	cmp.w	r8, #0
   b9562:	d112      	bne.n	b958a <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b9564:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b9568:	f001 0101 	and.w	r1, r1, #1
   b956c:	4630      	mov	r0, r6
   b956e:	f7ff ff84 	bl	b947a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b9572:	2101      	movs	r1, #1
   b9574:	4628      	mov	r0, r5
   b9576:	f7ff ff80 	bl	b947a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b957a:	2100      	movs	r1, #0
   b957c:	4628      	mov	r0, r5
   b957e:	f7ff ff7c 	bl	b947a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b9582:	3c01      	subs	r4, #1
   b9584:	d2e9      	bcs.n	b955a <shiftOut+0xe>
  }
}
   b9586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b958a:	fa47 f104 	asr.w	r1, r7, r4
   b958e:	e7eb      	b.n	b9568 <shiftOut+0x1c>

000b9590 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9590:	4770      	bx	lr
	...

000b9594 <_Z20acquireSerial1Bufferv>:
{
   b9594:	b538      	push	{r3, r4, r5, lr}
   b9596:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b9598:	2514      	movs	r5, #20
   b959a:	462a      	mov	r2, r5
   b959c:	2100      	movs	r1, #0
   b959e:	f000 fdf9 	bl	ba194 <memset>
   b95a2:	8025      	strh	r5, [r4, #0]
   b95a4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95a6:	4907      	ldr	r1, [pc, #28]	; (b95c4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b95a8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95aa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b95ac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95ae:	f000 f86b 	bl	b9688 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95b2:	4904      	ldr	r1, [pc, #16]	; (b95c4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b95b4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b95b6:	4628      	mov	r0, r5
   b95b8:	f000 f866 	bl	b9688 <_ZnajRKSt9nothrow_t>
    };
   b95bc:	60e0      	str	r0, [r4, #12]
}
   b95be:	4620      	mov	r0, r4
   b95c0:	bd38      	pop	{r3, r4, r5, pc}
   b95c2:	bf00      	nop
   b95c4:	000bace8 	.word	0x000bace8

000b95c8 <_Z22__fetch_global_Serial1v>:
{
   b95c8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95ca:	4d0e      	ldr	r5, [pc, #56]	; (b9604 <_Z22__fetch_global_Serial1v+0x3c>)
   b95cc:	7829      	ldrb	r1, [r5, #0]
   b95ce:	f3bf 8f5b 	dmb	ish
   b95d2:	f011 0401 	ands.w	r4, r1, #1
{
   b95d6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b95d8:	d111      	bne.n	b95fe <_Z22__fetch_global_Serial1v+0x36>
   b95da:	4628      	mov	r0, r5
   b95dc:	f7fa fd5f 	bl	b409e <__cxa_guard_acquire>
   b95e0:	b168      	cbz	r0, b95fe <_Z22__fetch_global_Serial1v+0x36>
   b95e2:	a801      	add	r0, sp, #4
   b95e4:	f7ff ffd6 	bl	b9594 <_Z20acquireSerial1Bufferv>
   b95e8:	aa01      	add	r2, sp, #4
   b95ea:	4621      	mov	r1, r4
   b95ec:	4806      	ldr	r0, [pc, #24]	; (b9608 <_Z22__fetch_global_Serial1v+0x40>)
   b95ee:	f7ff faad 	bl	b8b4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b95f2:	4628      	mov	r0, r5
   b95f4:	f7fa fd58 	bl	b40a8 <__cxa_guard_release>
   b95f8:	4804      	ldr	r0, [pc, #16]	; (b960c <_Z22__fetch_global_Serial1v+0x44>)
   b95fa:	f000 fd9f 	bl	ba13c <atexit>
    return serial1;
}
   b95fe:	4802      	ldr	r0, [pc, #8]	; (b9608 <_Z22__fetch_global_Serial1v+0x40>)
   b9600:	b007      	add	sp, #28
   b9602:	bd30      	pop	{r4, r5, pc}
   b9604:	2003e728 	.word	0x2003e728
   b9608:	2003e72c 	.word	0x2003e72c
   b960c:	000b9591 	.word	0x000b9591

000b9610 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9610:	4770      	bx	lr
	...

000b9614 <_Z17acquireWireBufferv>:
{
   b9614:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9616:	2520      	movs	r5, #32
   b9618:	2314      	movs	r3, #20
{
   b961a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b961c:	6003      	str	r3, [r0, #0]
   b961e:	6085      	str	r5, [r0, #8]
   b9620:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9622:	4906      	ldr	r1, [pc, #24]	; (b963c <_Z17acquireWireBufferv+0x28>)
   b9624:	4628      	mov	r0, r5
   b9626:	f000 f82f 	bl	b9688 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b962a:	4904      	ldr	r1, [pc, #16]	; (b963c <_Z17acquireWireBufferv+0x28>)
	};
   b962c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b962e:	4628      	mov	r0, r5
   b9630:	f000 f82a 	bl	b9688 <_ZnajRKSt9nothrow_t>
	};
   b9634:	60e0      	str	r0, [r4, #12]
}
   b9636:	4620      	mov	r0, r4
   b9638:	bd38      	pop	{r3, r4, r5, pc}
   b963a:	bf00      	nop
   b963c:	000bace8 	.word	0x000bace8

000b9640 <_Z19__fetch_global_Wirev>:
{
   b9640:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9642:	4d0e      	ldr	r5, [pc, #56]	; (b967c <_Z19__fetch_global_Wirev+0x3c>)
   b9644:	7829      	ldrb	r1, [r5, #0]
   b9646:	f3bf 8f5b 	dmb	ish
   b964a:	f011 0401 	ands.w	r4, r1, #1
{
   b964e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b9650:	d111      	bne.n	b9676 <_Z19__fetch_global_Wirev+0x36>
   b9652:	4628      	mov	r0, r5
   b9654:	f7fa fd23 	bl	b409e <__cxa_guard_acquire>
   b9658:	b168      	cbz	r0, b9676 <_Z19__fetch_global_Wirev+0x36>
   b965a:	a801      	add	r0, sp, #4
   b965c:	f7ff ffda 	bl	b9614 <_Z17acquireWireBufferv>
   b9660:	aa01      	add	r2, sp, #4
   b9662:	4621      	mov	r1, r4
   b9664:	4806      	ldr	r0, [pc, #24]	; (b9680 <_Z19__fetch_global_Wirev+0x40>)
   b9666:	f7ff fab1 	bl	b8bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b966a:	4628      	mov	r0, r5
   b966c:	f7fa fd1c 	bl	b40a8 <__cxa_guard_release>
   b9670:	4804      	ldr	r0, [pc, #16]	; (b9684 <_Z19__fetch_global_Wirev+0x44>)
   b9672:	f000 fd63 	bl	ba13c <atexit>
	return wire;
}
   b9676:	4802      	ldr	r0, [pc, #8]	; (b9680 <_Z19__fetch_global_Wirev+0x40>)
   b9678:	b007      	add	sp, #28
   b967a:	bd30      	pop	{r4, r5, pc}
   b967c:	2003e744 	.word	0x2003e744
   b9680:	2003e748 	.word	0x2003e748
   b9684:	000b9611 	.word	0x000b9611

000b9688 <_ZnajRKSt9nothrow_t>:
   b9688:	f7fa bd05 	b.w	b4096 <_Znaj>

000b968c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b968c:	4901      	ldr	r1, [pc, #4]	; (b9694 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b968e:	f000 b8f9 	b.w	b9884 <_ZNKSt9type_infoeqERKS_>
   b9692:	bf00      	nop
   b9694:	000bad04 	.word	0x000bad04

000b9698 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b969a:	2400      	movs	r4, #0
   b969c:	2310      	movs	r3, #16
   b969e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b96a2:	6803      	ldr	r3, [r0, #0]
   b96a4:	4615      	mov	r5, r2
   b96a6:	699e      	ldr	r6, [r3, #24]
   b96a8:	6812      	ldr	r2, [r2, #0]
   b96aa:	466b      	mov	r3, sp
   b96ac:	e9cd 4400 	strd	r4, r4, [sp]
   b96b0:	47b0      	blx	r6
   b96b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b96b6:	f003 0306 	and.w	r3, r3, #6
   b96ba:	2b06      	cmp	r3, #6
   b96bc:	bf03      	ittte	eq
   b96be:	9b00      	ldreq	r3, [sp, #0]
   b96c0:	602b      	streq	r3, [r5, #0]
   b96c2:	2001      	moveq	r0, #1
   b96c4:	4620      	movne	r0, r4
   b96c6:	b004      	add	sp, #16
   b96c8:	bd70      	pop	{r4, r5, r6, pc}

000b96ca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b96ca:	9800      	ldr	r0, [sp, #0]
   b96cc:	4290      	cmp	r0, r2
   b96ce:	bf14      	ite	ne
   b96d0:	2001      	movne	r0, #1
   b96d2:	2006      	moveq	r0, #6
   b96d4:	4770      	bx	lr
	...

000b96d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b96d8:	b510      	push	{r4, lr}
   b96da:	4b03      	ldr	r3, [pc, #12]	; (b96e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b96dc:	6003      	str	r3, [r0, #0]
   b96de:	4604      	mov	r4, r0
   b96e0:	f000 f8cd 	bl	b987e <_ZNSt9type_infoD1Ev>
   b96e4:	4620      	mov	r0, r4
   b96e6:	bd10      	pop	{r4, pc}
   b96e8:	000bad44 	.word	0x000bad44

000b96ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b96ec:	b510      	push	{r4, lr}
   b96ee:	4604      	mov	r4, r0
   b96f0:	f7ff fff2 	bl	b96d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b96f4:	4620      	mov	r0, r4
   b96f6:	2108      	movs	r1, #8
   b96f8:	f7fa fccf 	bl	b409a <_ZdlPvj>
   b96fc:	4620      	mov	r0, r4
   b96fe:	bd10      	pop	{r4, pc}

000b9700 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9704:	461f      	mov	r7, r3
   b9706:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b970a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b970e:	4598      	cmp	r8, r3
   b9710:	4606      	mov	r6, r0
   b9712:	4615      	mov	r5, r2
   b9714:	d107      	bne.n	b9726 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9716:	9907      	ldr	r1, [sp, #28]
   b9718:	f000 f8b4 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b971c:	b118      	cbz	r0, b9726 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b971e:	7165      	strb	r5, [r4, #5]
   b9720:	2000      	movs	r0, #0
   b9722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9726:	4639      	mov	r1, r7
   b9728:	4630      	mov	r0, r6
   b972a:	f000 f8ab 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b972e:	2800      	cmp	r0, #0
   b9730:	d0f6      	beq.n	b9720 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9732:	2301      	movs	r3, #1
   b9734:	f8c4 8000 	str.w	r8, [r4]
   b9738:	7125      	strb	r5, [r4, #4]
   b973a:	71a3      	strb	r3, [r4, #6]
   b973c:	e7f0      	b.n	b9720 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b973e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b973e:	b538      	push	{r3, r4, r5, lr}
   b9740:	4615      	mov	r5, r2
   b9742:	461c      	mov	r4, r3
   b9744:	f000 f89e 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b9748:	b120      	cbz	r0, b9754 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b974a:	2308      	movs	r3, #8
   b974c:	60e3      	str	r3, [r4, #12]
   b974e:	2306      	movs	r3, #6
   b9750:	6025      	str	r5, [r4, #0]
   b9752:	7123      	strb	r3, [r4, #4]
   b9754:	bd38      	pop	{r3, r4, r5, pc}

000b9756 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9756:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9758:	4605      	mov	r5, r0
   b975a:	460c      	mov	r4, r1
   b975c:	9201      	str	r2, [sp, #4]
   b975e:	461e      	mov	r6, r3
   b9760:	f000 f890 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b9764:	b950      	cbnz	r0, b977c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9766:	2e03      	cmp	r6, #3
   b9768:	d808      	bhi.n	b977c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b976a:	6823      	ldr	r3, [r4, #0]
   b976c:	9a01      	ldr	r2, [sp, #4]
   b976e:	695b      	ldr	r3, [r3, #20]
   b9770:	4629      	mov	r1, r5
   b9772:	4620      	mov	r0, r4
   b9774:	b002      	add	sp, #8
   b9776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b977a:	4718      	bx	r3
   b977c:	b002      	add	sp, #8
   b977e:	bd70      	pop	{r4, r5, r6, pc}

000b9780 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9780:	b510      	push	{r4, lr}
   b9782:	4b03      	ldr	r3, [pc, #12]	; (b9790 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9784:	6003      	str	r3, [r0, #0]
   b9786:	4604      	mov	r4, r0
   b9788:	f7ff ffa6 	bl	b96d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b978c:	4620      	mov	r0, r4
   b978e:	bd10      	pop	{r4, pc}
   b9790:	000bada4 	.word	0x000bada4

000b9794 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9794:	b510      	push	{r4, lr}
   b9796:	4604      	mov	r4, r0
   b9798:	f7ff fff2 	bl	b9780 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b979c:	4620      	mov	r0, r4
   b979e:	210c      	movs	r1, #12
   b97a0:	f7fa fc7b 	bl	b409a <_ZdlPvj>
   b97a4:	4620      	mov	r0, r4
   b97a6:	bd10      	pop	{r4, pc}

000b97a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b97a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b97aa:	9f08      	ldr	r7, [sp, #32]
   b97ac:	4297      	cmp	r7, r2
   b97ae:	4605      	mov	r5, r0
   b97b0:	460e      	mov	r6, r1
   b97b2:	4614      	mov	r4, r2
   b97b4:	d00a      	beq.n	b97cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b97b6:	68a8      	ldr	r0, [r5, #8]
   b97b8:	6802      	ldr	r2, [r0, #0]
   b97ba:	9708      	str	r7, [sp, #32]
   b97bc:	6a15      	ldr	r5, [r2, #32]
   b97be:	4631      	mov	r1, r6
   b97c0:	4622      	mov	r2, r4
   b97c2:	46ac      	mov	ip, r5
   b97c4:	b003      	add	sp, #12
   b97c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b97ca:	4760      	bx	ip
   b97cc:	4619      	mov	r1, r3
   b97ce:	9301      	str	r3, [sp, #4]
   b97d0:	f000 f858 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b97d4:	9b01      	ldr	r3, [sp, #4]
   b97d6:	2800      	cmp	r0, #0
   b97d8:	d0ed      	beq.n	b97b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b97da:	2006      	movs	r0, #6
   b97dc:	b003      	add	sp, #12
   b97de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b97e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b97e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b97e4:	460d      	mov	r5, r1
   b97e6:	4619      	mov	r1, r3
   b97e8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b97ec:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b97f0:	4681      	mov	r9, r0
   b97f2:	4617      	mov	r7, r2
   b97f4:	4698      	mov	r8, r3
   b97f6:	f000 f845 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b97fa:	b190      	cbz	r0, b9822 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b97fc:	2d00      	cmp	r5, #0
   b97fe:	6034      	str	r4, [r6, #0]
   b9800:	7137      	strb	r7, [r6, #4]
   b9802:	db09      	blt.n	b9818 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9804:	1961      	adds	r1, r4, r5
   b9806:	458a      	cmp	sl, r1
   b9808:	bf0c      	ite	eq
   b980a:	2106      	moveq	r1, #6
   b980c:	2101      	movne	r1, #1
   b980e:	71b1      	strb	r1, [r6, #6]
   b9810:	2000      	movs	r0, #0
   b9812:	b001      	add	sp, #4
   b9814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9818:	3502      	adds	r5, #2
   b981a:	d1f9      	bne.n	b9810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b981c:	2301      	movs	r3, #1
   b981e:	71b3      	strb	r3, [r6, #6]
   b9820:	e7f6      	b.n	b9810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9822:	4554      	cmp	r4, sl
   b9824:	d106      	bne.n	b9834 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9826:	4659      	mov	r1, fp
   b9828:	4648      	mov	r0, r9
   b982a:	f000 f82b 	bl	b9884 <_ZNKSt9type_infoeqERKS_>
   b982e:	b108      	cbz	r0, b9834 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9830:	7177      	strb	r7, [r6, #5]
   b9832:	e7ed      	b.n	b9810 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9834:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9838:	6803      	ldr	r3, [r0, #0]
   b983a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b983e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9842:	69dc      	ldr	r4, [r3, #28]
   b9844:	463a      	mov	r2, r7
   b9846:	4643      	mov	r3, r8
   b9848:	4629      	mov	r1, r5
   b984a:	46a4      	mov	ip, r4
   b984c:	b001      	add	sp, #4
   b984e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9852:	4760      	bx	ip

000b9854 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9858:	4607      	mov	r7, r0
   b985a:	460c      	mov	r4, r1
   b985c:	4615      	mov	r5, r2
   b985e:	461e      	mov	r6, r3
   b9860:	f7ff ff6d 	bl	b973e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9864:	b948      	cbnz	r0, b987a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9866:	68b8      	ldr	r0, [r7, #8]
   b9868:	6803      	ldr	r3, [r0, #0]
   b986a:	699f      	ldr	r7, [r3, #24]
   b986c:	462a      	mov	r2, r5
   b986e:	4633      	mov	r3, r6
   b9870:	4621      	mov	r1, r4
   b9872:	46bc      	mov	ip, r7
   b9874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9878:	4760      	bx	ip
   b987a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b987e <_ZNSt9type_infoD1Ev>:
   b987e:	4770      	bx	lr

000b9880 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9880:	2000      	movs	r0, #0
   b9882:	4770      	bx	lr

000b9884 <_ZNKSt9type_infoeqERKS_>:
   b9884:	4281      	cmp	r1, r0
   b9886:	b508      	push	{r3, lr}
   b9888:	d00e      	beq.n	b98a8 <_ZNKSt9type_infoeqERKS_+0x24>
   b988a:	6840      	ldr	r0, [r0, #4]
   b988c:	7803      	ldrb	r3, [r0, #0]
   b988e:	2b2a      	cmp	r3, #42	; 0x2a
   b9890:	d00c      	beq.n	b98ac <_ZNKSt9type_infoeqERKS_+0x28>
   b9892:	6849      	ldr	r1, [r1, #4]
   b9894:	780b      	ldrb	r3, [r1, #0]
   b9896:	2b2a      	cmp	r3, #42	; 0x2a
   b9898:	bf08      	it	eq
   b989a:	3101      	addeq	r1, #1
   b989c:	f000 fcb0 	bl	ba200 <strcmp>
   b98a0:	fab0 f080 	clz	r0, r0
   b98a4:	0940      	lsrs	r0, r0, #5
   b98a6:	bd08      	pop	{r3, pc}
   b98a8:	2001      	movs	r0, #1
   b98aa:	e7fc      	b.n	b98a6 <_ZNKSt9type_infoeqERKS_+0x22>
   b98ac:	2000      	movs	r0, #0
   b98ae:	e7fa      	b.n	b98a6 <_ZNKSt9type_infoeqERKS_+0x22>

000b98b0 <__aeabi_drsub>:
   b98b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b98b4:	e002      	b.n	b98bc <__adddf3>
   b98b6:	bf00      	nop

000b98b8 <__aeabi_dsub>:
   b98b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b98bc <__adddf3>:
   b98bc:	b530      	push	{r4, r5, lr}
   b98be:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b98c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b98c6:	ea94 0f05 	teq	r4, r5
   b98ca:	bf08      	it	eq
   b98cc:	ea90 0f02 	teqeq	r0, r2
   b98d0:	bf1f      	itttt	ne
   b98d2:	ea54 0c00 	orrsne.w	ip, r4, r0
   b98d6:	ea55 0c02 	orrsne.w	ip, r5, r2
   b98da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b98de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b98e2:	f000 80e2 	beq.w	b9aaa <__adddf3+0x1ee>
   b98e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b98ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b98ee:	bfb8      	it	lt
   b98f0:	426d      	neglt	r5, r5
   b98f2:	dd0c      	ble.n	b990e <__adddf3+0x52>
   b98f4:	442c      	add	r4, r5
   b98f6:	ea80 0202 	eor.w	r2, r0, r2
   b98fa:	ea81 0303 	eor.w	r3, r1, r3
   b98fe:	ea82 0000 	eor.w	r0, r2, r0
   b9902:	ea83 0101 	eor.w	r1, r3, r1
   b9906:	ea80 0202 	eor.w	r2, r0, r2
   b990a:	ea81 0303 	eor.w	r3, r1, r3
   b990e:	2d36      	cmp	r5, #54	; 0x36
   b9910:	bf88      	it	hi
   b9912:	bd30      	pophi	{r4, r5, pc}
   b9914:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b9918:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b991c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9920:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9924:	d002      	beq.n	b992c <__adddf3+0x70>
   b9926:	4240      	negs	r0, r0
   b9928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b992c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9930:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9934:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b9938:	d002      	beq.n	b9940 <__adddf3+0x84>
   b993a:	4252      	negs	r2, r2
   b993c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9940:	ea94 0f05 	teq	r4, r5
   b9944:	f000 80a7 	beq.w	b9a96 <__adddf3+0x1da>
   b9948:	f1a4 0401 	sub.w	r4, r4, #1
   b994c:	f1d5 0e20 	rsbs	lr, r5, #32
   b9950:	db0d      	blt.n	b996e <__adddf3+0xb2>
   b9952:	fa02 fc0e 	lsl.w	ip, r2, lr
   b9956:	fa22 f205 	lsr.w	r2, r2, r5
   b995a:	1880      	adds	r0, r0, r2
   b995c:	f141 0100 	adc.w	r1, r1, #0
   b9960:	fa03 f20e 	lsl.w	r2, r3, lr
   b9964:	1880      	adds	r0, r0, r2
   b9966:	fa43 f305 	asr.w	r3, r3, r5
   b996a:	4159      	adcs	r1, r3
   b996c:	e00e      	b.n	b998c <__adddf3+0xd0>
   b996e:	f1a5 0520 	sub.w	r5, r5, #32
   b9972:	f10e 0e20 	add.w	lr, lr, #32
   b9976:	2a01      	cmp	r2, #1
   b9978:	fa03 fc0e 	lsl.w	ip, r3, lr
   b997c:	bf28      	it	cs
   b997e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b9982:	fa43 f305 	asr.w	r3, r3, r5
   b9986:	18c0      	adds	r0, r0, r3
   b9988:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b998c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9990:	d507      	bpl.n	b99a2 <__adddf3+0xe6>
   b9992:	f04f 0e00 	mov.w	lr, #0
   b9996:	f1dc 0c00 	rsbs	ip, ip, #0
   b999a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b999e:	eb6e 0101 	sbc.w	r1, lr, r1
   b99a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b99a6:	d31b      	bcc.n	b99e0 <__adddf3+0x124>
   b99a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b99ac:	d30c      	bcc.n	b99c8 <__adddf3+0x10c>
   b99ae:	0849      	lsrs	r1, r1, #1
   b99b0:	ea5f 0030 	movs.w	r0, r0, rrx
   b99b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b99b8:	f104 0401 	add.w	r4, r4, #1
   b99bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b99c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b99c4:	f080 809a 	bcs.w	b9afc <__adddf3+0x240>
   b99c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b99cc:	bf08      	it	eq
   b99ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b99d2:	f150 0000 	adcs.w	r0, r0, #0
   b99d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b99da:	ea41 0105 	orr.w	r1, r1, r5
   b99de:	bd30      	pop	{r4, r5, pc}
   b99e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b99e4:	4140      	adcs	r0, r0
   b99e6:	eb41 0101 	adc.w	r1, r1, r1
   b99ea:	3c01      	subs	r4, #1
   b99ec:	bf28      	it	cs
   b99ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b99f2:	d2e9      	bcs.n	b99c8 <__adddf3+0x10c>
   b99f4:	f091 0f00 	teq	r1, #0
   b99f8:	bf04      	itt	eq
   b99fa:	4601      	moveq	r1, r0
   b99fc:	2000      	moveq	r0, #0
   b99fe:	fab1 f381 	clz	r3, r1
   b9a02:	bf08      	it	eq
   b9a04:	3320      	addeq	r3, #32
   b9a06:	f1a3 030b 	sub.w	r3, r3, #11
   b9a0a:	f1b3 0220 	subs.w	r2, r3, #32
   b9a0e:	da0c      	bge.n	b9a2a <__adddf3+0x16e>
   b9a10:	320c      	adds	r2, #12
   b9a12:	dd08      	ble.n	b9a26 <__adddf3+0x16a>
   b9a14:	f102 0c14 	add.w	ip, r2, #20
   b9a18:	f1c2 020c 	rsb	r2, r2, #12
   b9a1c:	fa01 f00c 	lsl.w	r0, r1, ip
   b9a20:	fa21 f102 	lsr.w	r1, r1, r2
   b9a24:	e00c      	b.n	b9a40 <__adddf3+0x184>
   b9a26:	f102 0214 	add.w	r2, r2, #20
   b9a2a:	bfd8      	it	le
   b9a2c:	f1c2 0c20 	rsble	ip, r2, #32
   b9a30:	fa01 f102 	lsl.w	r1, r1, r2
   b9a34:	fa20 fc0c 	lsr.w	ip, r0, ip
   b9a38:	bfdc      	itt	le
   b9a3a:	ea41 010c 	orrle.w	r1, r1, ip
   b9a3e:	4090      	lslle	r0, r2
   b9a40:	1ae4      	subs	r4, r4, r3
   b9a42:	bfa2      	ittt	ge
   b9a44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b9a48:	4329      	orrge	r1, r5
   b9a4a:	bd30      	popge	{r4, r5, pc}
   b9a4c:	ea6f 0404 	mvn.w	r4, r4
   b9a50:	3c1f      	subs	r4, #31
   b9a52:	da1c      	bge.n	b9a8e <__adddf3+0x1d2>
   b9a54:	340c      	adds	r4, #12
   b9a56:	dc0e      	bgt.n	b9a76 <__adddf3+0x1ba>
   b9a58:	f104 0414 	add.w	r4, r4, #20
   b9a5c:	f1c4 0220 	rsb	r2, r4, #32
   b9a60:	fa20 f004 	lsr.w	r0, r0, r4
   b9a64:	fa01 f302 	lsl.w	r3, r1, r2
   b9a68:	ea40 0003 	orr.w	r0, r0, r3
   b9a6c:	fa21 f304 	lsr.w	r3, r1, r4
   b9a70:	ea45 0103 	orr.w	r1, r5, r3
   b9a74:	bd30      	pop	{r4, r5, pc}
   b9a76:	f1c4 040c 	rsb	r4, r4, #12
   b9a7a:	f1c4 0220 	rsb	r2, r4, #32
   b9a7e:	fa20 f002 	lsr.w	r0, r0, r2
   b9a82:	fa01 f304 	lsl.w	r3, r1, r4
   b9a86:	ea40 0003 	orr.w	r0, r0, r3
   b9a8a:	4629      	mov	r1, r5
   b9a8c:	bd30      	pop	{r4, r5, pc}
   b9a8e:	fa21 f004 	lsr.w	r0, r1, r4
   b9a92:	4629      	mov	r1, r5
   b9a94:	bd30      	pop	{r4, r5, pc}
   b9a96:	f094 0f00 	teq	r4, #0
   b9a9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b9a9e:	bf06      	itte	eq
   b9aa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b9aa4:	3401      	addeq	r4, #1
   b9aa6:	3d01      	subne	r5, #1
   b9aa8:	e74e      	b.n	b9948 <__adddf3+0x8c>
   b9aaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9aae:	bf18      	it	ne
   b9ab0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9ab4:	d029      	beq.n	b9b0a <__adddf3+0x24e>
   b9ab6:	ea94 0f05 	teq	r4, r5
   b9aba:	bf08      	it	eq
   b9abc:	ea90 0f02 	teqeq	r0, r2
   b9ac0:	d005      	beq.n	b9ace <__adddf3+0x212>
   b9ac2:	ea54 0c00 	orrs.w	ip, r4, r0
   b9ac6:	bf04      	itt	eq
   b9ac8:	4619      	moveq	r1, r3
   b9aca:	4610      	moveq	r0, r2
   b9acc:	bd30      	pop	{r4, r5, pc}
   b9ace:	ea91 0f03 	teq	r1, r3
   b9ad2:	bf1e      	ittt	ne
   b9ad4:	2100      	movne	r1, #0
   b9ad6:	2000      	movne	r0, #0
   b9ad8:	bd30      	popne	{r4, r5, pc}
   b9ada:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9ade:	d105      	bne.n	b9aec <__adddf3+0x230>
   b9ae0:	0040      	lsls	r0, r0, #1
   b9ae2:	4149      	adcs	r1, r1
   b9ae4:	bf28      	it	cs
   b9ae6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b9aea:	bd30      	pop	{r4, r5, pc}
   b9aec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9af0:	bf3c      	itt	cc
   b9af2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b9af6:	bd30      	popcc	{r4, r5, pc}
   b9af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9afc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9b00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9b04:	f04f 0000 	mov.w	r0, #0
   b9b08:	bd30      	pop	{r4, r5, pc}
   b9b0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9b0e:	bf1a      	itte	ne
   b9b10:	4619      	movne	r1, r3
   b9b12:	4610      	movne	r0, r2
   b9b14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b9b18:	bf1c      	itt	ne
   b9b1a:	460b      	movne	r3, r1
   b9b1c:	4602      	movne	r2, r0
   b9b1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9b22:	bf06      	itte	eq
   b9b24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b9b28:	ea91 0f03 	teqeq	r1, r3
   b9b2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9b30:	bd30      	pop	{r4, r5, pc}
   b9b32:	bf00      	nop

000b9b34 <__aeabi_ui2d>:
   b9b34:	f090 0f00 	teq	r0, #0
   b9b38:	bf04      	itt	eq
   b9b3a:	2100      	moveq	r1, #0
   b9b3c:	4770      	bxeq	lr
   b9b3e:	b530      	push	{r4, r5, lr}
   b9b40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b48:	f04f 0500 	mov.w	r5, #0
   b9b4c:	f04f 0100 	mov.w	r1, #0
   b9b50:	e750      	b.n	b99f4 <__adddf3+0x138>
   b9b52:	bf00      	nop

000b9b54 <__aeabi_i2d>:
   b9b54:	f090 0f00 	teq	r0, #0
   b9b58:	bf04      	itt	eq
   b9b5a:	2100      	moveq	r1, #0
   b9b5c:	4770      	bxeq	lr
   b9b5e:	b530      	push	{r4, r5, lr}
   b9b60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9b64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9b68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b9b6c:	bf48      	it	mi
   b9b6e:	4240      	negmi	r0, r0
   b9b70:	f04f 0100 	mov.w	r1, #0
   b9b74:	e73e      	b.n	b99f4 <__adddf3+0x138>
   b9b76:	bf00      	nop

000b9b78 <__aeabi_f2d>:
   b9b78:	0042      	lsls	r2, r0, #1
   b9b7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b9b7e:	ea4f 0131 	mov.w	r1, r1, rrx
   b9b82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b9b86:	bf1f      	itttt	ne
   b9b88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b9b8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b9b90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b9b94:	4770      	bxne	lr
   b9b96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b9b9a:	bf08      	it	eq
   b9b9c:	4770      	bxeq	lr
   b9b9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b9ba2:	bf04      	itt	eq
   b9ba4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b9ba8:	4770      	bxeq	lr
   b9baa:	b530      	push	{r4, r5, lr}
   b9bac:	f44f 7460 	mov.w	r4, #896	; 0x380
   b9bb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9bb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9bb8:	e71c      	b.n	b99f4 <__adddf3+0x138>
   b9bba:	bf00      	nop

000b9bbc <__aeabi_ul2d>:
   b9bbc:	ea50 0201 	orrs.w	r2, r0, r1
   b9bc0:	bf08      	it	eq
   b9bc2:	4770      	bxeq	lr
   b9bc4:	b530      	push	{r4, r5, lr}
   b9bc6:	f04f 0500 	mov.w	r5, #0
   b9bca:	e00a      	b.n	b9be2 <__aeabi_l2d+0x16>

000b9bcc <__aeabi_l2d>:
   b9bcc:	ea50 0201 	orrs.w	r2, r0, r1
   b9bd0:	bf08      	it	eq
   b9bd2:	4770      	bxeq	lr
   b9bd4:	b530      	push	{r4, r5, lr}
   b9bd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b9bda:	d502      	bpl.n	b9be2 <__aeabi_l2d+0x16>
   b9bdc:	4240      	negs	r0, r0
   b9bde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9be2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9be6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b9bea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9bee:	f43f aed8 	beq.w	b99a2 <__adddf3+0xe6>
   b9bf2:	f04f 0203 	mov.w	r2, #3
   b9bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9bfa:	bf18      	it	ne
   b9bfc:	3203      	addne	r2, #3
   b9bfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9c02:	bf18      	it	ne
   b9c04:	3203      	addne	r2, #3
   b9c06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b9c0a:	f1c2 0320 	rsb	r3, r2, #32
   b9c0e:	fa00 fc03 	lsl.w	ip, r0, r3
   b9c12:	fa20 f002 	lsr.w	r0, r0, r2
   b9c16:	fa01 fe03 	lsl.w	lr, r1, r3
   b9c1a:	ea40 000e 	orr.w	r0, r0, lr
   b9c1e:	fa21 f102 	lsr.w	r1, r1, r2
   b9c22:	4414      	add	r4, r2
   b9c24:	e6bd      	b.n	b99a2 <__adddf3+0xe6>
   b9c26:	bf00      	nop

000b9c28 <__aeabi_dmul>:
   b9c28:	b570      	push	{r4, r5, r6, lr}
   b9c2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9c2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9c32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9c36:	bf1d      	ittte	ne
   b9c38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9c3c:	ea94 0f0c 	teqne	r4, ip
   b9c40:	ea95 0f0c 	teqne	r5, ip
   b9c44:	f000 f8de 	bleq	b9e04 <__aeabi_dmul+0x1dc>
   b9c48:	442c      	add	r4, r5
   b9c4a:	ea81 0603 	eor.w	r6, r1, r3
   b9c4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9c52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b9c56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9c5a:	bf18      	it	ne
   b9c5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9c60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9c68:	d038      	beq.n	b9cdc <__aeabi_dmul+0xb4>
   b9c6a:	fba0 ce02 	umull	ip, lr, r0, r2
   b9c6e:	f04f 0500 	mov.w	r5, #0
   b9c72:	fbe1 e502 	umlal	lr, r5, r1, r2
   b9c76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9c7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9c7e:	f04f 0600 	mov.w	r6, #0
   b9c82:	fbe1 5603 	umlal	r5, r6, r1, r3
   b9c86:	f09c 0f00 	teq	ip, #0
   b9c8a:	bf18      	it	ne
   b9c8c:	f04e 0e01 	orrne.w	lr, lr, #1
   b9c90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b9c94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9c98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9c9c:	d204      	bcs.n	b9ca8 <__aeabi_dmul+0x80>
   b9c9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b9ca2:	416d      	adcs	r5, r5
   b9ca4:	eb46 0606 	adc.w	r6, r6, r6
   b9ca8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9cac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9cb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b9cb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9cb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9cbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9cc0:	bf88      	it	hi
   b9cc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9cc6:	d81e      	bhi.n	b9d06 <__aeabi_dmul+0xde>
   b9cc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9ccc:	bf08      	it	eq
   b9cce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9cd2:	f150 0000 	adcs.w	r0, r0, #0
   b9cd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9cda:	bd70      	pop	{r4, r5, r6, pc}
   b9cdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9ce0:	ea46 0101 	orr.w	r1, r6, r1
   b9ce4:	ea40 0002 	orr.w	r0, r0, r2
   b9ce8:	ea81 0103 	eor.w	r1, r1, r3
   b9cec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9cf0:	bfc2      	ittt	gt
   b9cf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9cf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9cfa:	bd70      	popgt	{r4, r5, r6, pc}
   b9cfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9d00:	f04f 0e00 	mov.w	lr, #0
   b9d04:	3c01      	subs	r4, #1
   b9d06:	f300 80ab 	bgt.w	b9e60 <__aeabi_dmul+0x238>
   b9d0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9d0e:	bfde      	ittt	le
   b9d10:	2000      	movle	r0, #0
   b9d12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b9d16:	bd70      	pople	{r4, r5, r6, pc}
   b9d18:	f1c4 0400 	rsb	r4, r4, #0
   b9d1c:	3c20      	subs	r4, #32
   b9d1e:	da35      	bge.n	b9d8c <__aeabi_dmul+0x164>
   b9d20:	340c      	adds	r4, #12
   b9d22:	dc1b      	bgt.n	b9d5c <__aeabi_dmul+0x134>
   b9d24:	f104 0414 	add.w	r4, r4, #20
   b9d28:	f1c4 0520 	rsb	r5, r4, #32
   b9d2c:	fa00 f305 	lsl.w	r3, r0, r5
   b9d30:	fa20 f004 	lsr.w	r0, r0, r4
   b9d34:	fa01 f205 	lsl.w	r2, r1, r5
   b9d38:	ea40 0002 	orr.w	r0, r0, r2
   b9d3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9d44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d48:	fa21 f604 	lsr.w	r6, r1, r4
   b9d4c:	eb42 0106 	adc.w	r1, r2, r6
   b9d50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d54:	bf08      	it	eq
   b9d56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d5a:	bd70      	pop	{r4, r5, r6, pc}
   b9d5c:	f1c4 040c 	rsb	r4, r4, #12
   b9d60:	f1c4 0520 	rsb	r5, r4, #32
   b9d64:	fa00 f304 	lsl.w	r3, r0, r4
   b9d68:	fa20 f005 	lsr.w	r0, r0, r5
   b9d6c:	fa01 f204 	lsl.w	r2, r1, r4
   b9d70:	ea40 0002 	orr.w	r0, r0, r2
   b9d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9d78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9d7c:	f141 0100 	adc.w	r1, r1, #0
   b9d80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9d84:	bf08      	it	eq
   b9d86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9d8a:	bd70      	pop	{r4, r5, r6, pc}
   b9d8c:	f1c4 0520 	rsb	r5, r4, #32
   b9d90:	fa00 f205 	lsl.w	r2, r0, r5
   b9d94:	ea4e 0e02 	orr.w	lr, lr, r2
   b9d98:	fa20 f304 	lsr.w	r3, r0, r4
   b9d9c:	fa01 f205 	lsl.w	r2, r1, r5
   b9da0:	ea43 0302 	orr.w	r3, r3, r2
   b9da4:	fa21 f004 	lsr.w	r0, r1, r4
   b9da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9dac:	fa21 f204 	lsr.w	r2, r1, r4
   b9db0:	ea20 0002 	bic.w	r0, r0, r2
   b9db4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9db8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9dbc:	bf08      	it	eq
   b9dbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9dc2:	bd70      	pop	{r4, r5, r6, pc}
   b9dc4:	f094 0f00 	teq	r4, #0
   b9dc8:	d10f      	bne.n	b9dea <__aeabi_dmul+0x1c2>
   b9dca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9dce:	0040      	lsls	r0, r0, #1
   b9dd0:	eb41 0101 	adc.w	r1, r1, r1
   b9dd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9dd8:	bf08      	it	eq
   b9dda:	3c01      	subeq	r4, #1
   b9ddc:	d0f7      	beq.n	b9dce <__aeabi_dmul+0x1a6>
   b9dde:	ea41 0106 	orr.w	r1, r1, r6
   b9de2:	f095 0f00 	teq	r5, #0
   b9de6:	bf18      	it	ne
   b9de8:	4770      	bxne	lr
   b9dea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9dee:	0052      	lsls	r2, r2, #1
   b9df0:	eb43 0303 	adc.w	r3, r3, r3
   b9df4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b9df8:	bf08      	it	eq
   b9dfa:	3d01      	subeq	r5, #1
   b9dfc:	d0f7      	beq.n	b9dee <__aeabi_dmul+0x1c6>
   b9dfe:	ea43 0306 	orr.w	r3, r3, r6
   b9e02:	4770      	bx	lr
   b9e04:	ea94 0f0c 	teq	r4, ip
   b9e08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9e0c:	bf18      	it	ne
   b9e0e:	ea95 0f0c 	teqne	r5, ip
   b9e12:	d00c      	beq.n	b9e2e <__aeabi_dmul+0x206>
   b9e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e18:	bf18      	it	ne
   b9e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e1e:	d1d1      	bne.n	b9dc4 <__aeabi_dmul+0x19c>
   b9e20:	ea81 0103 	eor.w	r1, r1, r3
   b9e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e28:	f04f 0000 	mov.w	r0, #0
   b9e2c:	bd70      	pop	{r4, r5, r6, pc}
   b9e2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9e32:	bf06      	itte	eq
   b9e34:	4610      	moveq	r0, r2
   b9e36:	4619      	moveq	r1, r3
   b9e38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9e3c:	d019      	beq.n	b9e72 <__aeabi_dmul+0x24a>
   b9e3e:	ea94 0f0c 	teq	r4, ip
   b9e42:	d102      	bne.n	b9e4a <__aeabi_dmul+0x222>
   b9e44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9e48:	d113      	bne.n	b9e72 <__aeabi_dmul+0x24a>
   b9e4a:	ea95 0f0c 	teq	r5, ip
   b9e4e:	d105      	bne.n	b9e5c <__aeabi_dmul+0x234>
   b9e50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9e54:	bf1c      	itt	ne
   b9e56:	4610      	movne	r0, r2
   b9e58:	4619      	movne	r1, r3
   b9e5a:	d10a      	bne.n	b9e72 <__aeabi_dmul+0x24a>
   b9e5c:	ea81 0103 	eor.w	r1, r1, r3
   b9e60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9e64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9e6c:	f04f 0000 	mov.w	r0, #0
   b9e70:	bd70      	pop	{r4, r5, r6, pc}
   b9e72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9e76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9e7a:	bd70      	pop	{r4, r5, r6, pc}

000b9e7c <__aeabi_ddiv>:
   b9e7c:	b570      	push	{r4, r5, r6, lr}
   b9e7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9e82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9e86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9e8a:	bf1d      	ittte	ne
   b9e8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9e90:	ea94 0f0c 	teqne	r4, ip
   b9e94:	ea95 0f0c 	teqne	r5, ip
   b9e98:	f000 f8a7 	bleq	b9fea <__aeabi_ddiv+0x16e>
   b9e9c:	eba4 0405 	sub.w	r4, r4, r5
   b9ea0:	ea81 0e03 	eor.w	lr, r1, r3
   b9ea4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9ea8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9eac:	f000 8088 	beq.w	b9fc0 <__aeabi_ddiv+0x144>
   b9eb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9eb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9eb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9ebc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9ec0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9ec4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9ec8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9ecc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9ed0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9ed4:	429d      	cmp	r5, r3
   b9ed6:	bf08      	it	eq
   b9ed8:	4296      	cmpeq	r6, r2
   b9eda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9ede:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9ee2:	d202      	bcs.n	b9eea <__aeabi_ddiv+0x6e>
   b9ee4:	085b      	lsrs	r3, r3, #1
   b9ee6:	ea4f 0232 	mov.w	r2, r2, rrx
   b9eea:	1ab6      	subs	r6, r6, r2
   b9eec:	eb65 0503 	sbc.w	r5, r5, r3
   b9ef0:	085b      	lsrs	r3, r3, #1
   b9ef2:	ea4f 0232 	mov.w	r2, r2, rrx
   b9ef6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b9efa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9efe:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f02:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f06:	bf22      	ittt	cs
   b9f08:	1ab6      	subcs	r6, r6, r2
   b9f0a:	4675      	movcs	r5, lr
   b9f0c:	ea40 000c 	orrcs.w	r0, r0, ip
   b9f10:	085b      	lsrs	r3, r3, #1
   b9f12:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f16:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f1e:	bf22      	ittt	cs
   b9f20:	1ab6      	subcs	r6, r6, r2
   b9f22:	4675      	movcs	r5, lr
   b9f24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b9f28:	085b      	lsrs	r3, r3, #1
   b9f2a:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f2e:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f32:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f36:	bf22      	ittt	cs
   b9f38:	1ab6      	subcs	r6, r6, r2
   b9f3a:	4675      	movcs	r5, lr
   b9f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9f40:	085b      	lsrs	r3, r3, #1
   b9f42:	ea4f 0232 	mov.w	r2, r2, rrx
   b9f46:	ebb6 0e02 	subs.w	lr, r6, r2
   b9f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9f4e:	bf22      	ittt	cs
   b9f50:	1ab6      	subcs	r6, r6, r2
   b9f52:	4675      	movcs	r5, lr
   b9f54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9f58:	ea55 0e06 	orrs.w	lr, r5, r6
   b9f5c:	d018      	beq.n	b9f90 <__aeabi_ddiv+0x114>
   b9f5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b9f62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b9f66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9f6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9f6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b9f72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b9f76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9f7a:	d1c0      	bne.n	b9efe <__aeabi_ddiv+0x82>
   b9f7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f80:	d10b      	bne.n	b9f9a <__aeabi_ddiv+0x11e>
   b9f82:	ea41 0100 	orr.w	r1, r1, r0
   b9f86:	f04f 0000 	mov.w	r0, #0
   b9f8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9f8e:	e7b6      	b.n	b9efe <__aeabi_ddiv+0x82>
   b9f90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9f94:	bf04      	itt	eq
   b9f96:	4301      	orreq	r1, r0
   b9f98:	2000      	moveq	r0, #0
   b9f9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9f9e:	bf88      	it	hi
   b9fa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b9fa4:	f63f aeaf 	bhi.w	b9d06 <__aeabi_dmul+0xde>
   b9fa8:	ebb5 0c03 	subs.w	ip, r5, r3
   b9fac:	bf04      	itt	eq
   b9fae:	ebb6 0c02 	subseq.w	ip, r6, r2
   b9fb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9fb6:	f150 0000 	adcs.w	r0, r0, #0
   b9fba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9fbe:	bd70      	pop	{r4, r5, r6, pc}
   b9fc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9fc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9fc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9fcc:	bfc2      	ittt	gt
   b9fce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9fd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b9fd6:	bd70      	popgt	{r4, r5, r6, pc}
   b9fd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9fdc:	f04f 0e00 	mov.w	lr, #0
   b9fe0:	3c01      	subs	r4, #1
   b9fe2:	e690      	b.n	b9d06 <__aeabi_dmul+0xde>
   b9fe4:	ea45 0e06 	orr.w	lr, r5, r6
   b9fe8:	e68d      	b.n	b9d06 <__aeabi_dmul+0xde>
   b9fea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9fee:	ea94 0f0c 	teq	r4, ip
   b9ff2:	bf08      	it	eq
   b9ff4:	ea95 0f0c 	teqeq	r5, ip
   b9ff8:	f43f af3b 	beq.w	b9e72 <__aeabi_dmul+0x24a>
   b9ffc:	ea94 0f0c 	teq	r4, ip
   ba000:	d10a      	bne.n	ba018 <__aeabi_ddiv+0x19c>
   ba002:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   ba006:	f47f af34 	bne.w	b9e72 <__aeabi_dmul+0x24a>
   ba00a:	ea95 0f0c 	teq	r5, ip
   ba00e:	f47f af25 	bne.w	b9e5c <__aeabi_dmul+0x234>
   ba012:	4610      	mov	r0, r2
   ba014:	4619      	mov	r1, r3
   ba016:	e72c      	b.n	b9e72 <__aeabi_dmul+0x24a>
   ba018:	ea95 0f0c 	teq	r5, ip
   ba01c:	d106      	bne.n	ba02c <__aeabi_ddiv+0x1b0>
   ba01e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   ba022:	f43f aefd 	beq.w	b9e20 <__aeabi_dmul+0x1f8>
   ba026:	4610      	mov	r0, r2
   ba028:	4619      	mov	r1, r3
   ba02a:	e722      	b.n	b9e72 <__aeabi_dmul+0x24a>
   ba02c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   ba030:	bf18      	it	ne
   ba032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   ba036:	f47f aec5 	bne.w	b9dc4 <__aeabi_dmul+0x19c>
   ba03a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   ba03e:	f47f af0d 	bne.w	b9e5c <__aeabi_dmul+0x234>
   ba042:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   ba046:	f47f aeeb 	bne.w	b9e20 <__aeabi_dmul+0x1f8>
   ba04a:	e712      	b.n	b9e72 <__aeabi_dmul+0x24a>

000ba04c <__aeabi_d2iz>:
   ba04c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba050:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   ba054:	d215      	bcs.n	ba082 <__aeabi_d2iz+0x36>
   ba056:	d511      	bpl.n	ba07c <__aeabi_d2iz+0x30>
   ba058:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   ba05c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   ba060:	d912      	bls.n	ba088 <__aeabi_d2iz+0x3c>
   ba062:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   ba06a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   ba06e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   ba072:	fa23 f002 	lsr.w	r0, r3, r2
   ba076:	bf18      	it	ne
   ba078:	4240      	negne	r0, r0
   ba07a:	4770      	bx	lr
   ba07c:	f04f 0000 	mov.w	r0, #0
   ba080:	4770      	bx	lr
   ba082:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   ba086:	d105      	bne.n	ba094 <__aeabi_d2iz+0x48>
   ba088:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   ba08c:	bf08      	it	eq
   ba08e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   ba092:	4770      	bx	lr
   ba094:	f04f 0000 	mov.w	r0, #0
   ba098:	4770      	bx	lr
   ba09a:	bf00      	nop

000ba09c <__aeabi_d2f>:
   ba09c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   ba0a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   ba0a4:	bf24      	itt	cs
   ba0a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   ba0aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   ba0ae:	d90d      	bls.n	ba0cc <__aeabi_d2f+0x30>
   ba0b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   ba0b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   ba0b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   ba0bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   ba0c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   ba0c4:	bf08      	it	eq
   ba0c6:	f020 0001 	biceq.w	r0, r0, #1
   ba0ca:	4770      	bx	lr
   ba0cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   ba0d0:	d121      	bne.n	ba116 <__aeabi_d2f+0x7a>
   ba0d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   ba0d6:	bfbc      	itt	lt
   ba0d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   ba0dc:	4770      	bxlt	lr
   ba0de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   ba0e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   ba0e6:	f1c2 0218 	rsb	r2, r2, #24
   ba0ea:	f1c2 0c20 	rsb	ip, r2, #32
   ba0ee:	fa10 f30c 	lsls.w	r3, r0, ip
   ba0f2:	fa20 f002 	lsr.w	r0, r0, r2
   ba0f6:	bf18      	it	ne
   ba0f8:	f040 0001 	orrne.w	r0, r0, #1
   ba0fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   ba100:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   ba104:	fa03 fc0c 	lsl.w	ip, r3, ip
   ba108:	ea40 000c 	orr.w	r0, r0, ip
   ba10c:	fa23 f302 	lsr.w	r3, r3, r2
   ba110:	ea4f 0343 	mov.w	r3, r3, lsl #1
   ba114:	e7cc      	b.n	ba0b0 <__aeabi_d2f+0x14>
   ba116:	ea7f 5362 	mvns.w	r3, r2, asr #21
   ba11a:	d107      	bne.n	ba12c <__aeabi_d2f+0x90>
   ba11c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   ba120:	bf1e      	ittt	ne
   ba122:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   ba126:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   ba12a:	4770      	bxne	lr
   ba12c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   ba130:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   ba134:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   ba138:	4770      	bx	lr
   ba13a:	bf00      	nop

000ba13c <atexit>:
   ba13c:	2300      	movs	r3, #0
   ba13e:	4601      	mov	r1, r0
   ba140:	461a      	mov	r2, r3
   ba142:	4618      	mov	r0, r3
   ba144:	f000 b916 	b.w	ba374 <__register_exitproc>

000ba148 <atoi>:
   ba148:	220a      	movs	r2, #10
   ba14a:	2100      	movs	r1, #0
   ba14c:	f000 b908 	b.w	ba360 <strtol>

000ba150 <atol>:
   ba150:	220a      	movs	r2, #10
   ba152:	2100      	movs	r1, #0
   ba154:	f000 b904 	b.w	ba360 <strtol>

000ba158 <memcmp>:
   ba158:	b510      	push	{r4, lr}
   ba15a:	3901      	subs	r1, #1
   ba15c:	4402      	add	r2, r0
   ba15e:	4290      	cmp	r0, r2
   ba160:	d101      	bne.n	ba166 <memcmp+0xe>
   ba162:	2000      	movs	r0, #0
   ba164:	e005      	b.n	ba172 <memcmp+0x1a>
   ba166:	7803      	ldrb	r3, [r0, #0]
   ba168:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba16c:	42a3      	cmp	r3, r4
   ba16e:	d001      	beq.n	ba174 <memcmp+0x1c>
   ba170:	1b18      	subs	r0, r3, r4
   ba172:	bd10      	pop	{r4, pc}
   ba174:	3001      	adds	r0, #1
   ba176:	e7f2      	b.n	ba15e <memcmp+0x6>

000ba178 <memcpy>:
   ba178:	440a      	add	r2, r1
   ba17a:	4291      	cmp	r1, r2
   ba17c:	f100 33ff 	add.w	r3, r0, #4294967295
   ba180:	d100      	bne.n	ba184 <memcpy+0xc>
   ba182:	4770      	bx	lr
   ba184:	b510      	push	{r4, lr}
   ba186:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba18a:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba18e:	4291      	cmp	r1, r2
   ba190:	d1f9      	bne.n	ba186 <memcpy+0xe>
   ba192:	bd10      	pop	{r4, pc}

000ba194 <memset>:
   ba194:	4402      	add	r2, r0
   ba196:	4603      	mov	r3, r0
   ba198:	4293      	cmp	r3, r2
   ba19a:	d100      	bne.n	ba19e <memset+0xa>
   ba19c:	4770      	bx	lr
   ba19e:	f803 1b01 	strb.w	r1, [r3], #1
   ba1a2:	e7f9      	b.n	ba198 <memset+0x4>

000ba1a4 <srand>:
   ba1a4:	b538      	push	{r3, r4, r5, lr}
   ba1a6:	4b10      	ldr	r3, [pc, #64]	; (ba1e8 <srand+0x44>)
   ba1a8:	681d      	ldr	r5, [r3, #0]
   ba1aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba1ac:	4604      	mov	r4, r0
   ba1ae:	b9b3      	cbnz	r3, ba1de <srand+0x3a>
   ba1b0:	2018      	movs	r0, #24
   ba1b2:	f7fd fed1 	bl	b7f58 <malloc>
   ba1b6:	4602      	mov	r2, r0
   ba1b8:	63a8      	str	r0, [r5, #56]	; 0x38
   ba1ba:	b920      	cbnz	r0, ba1c6 <srand+0x22>
   ba1bc:	4b0b      	ldr	r3, [pc, #44]	; (ba1ec <srand+0x48>)
   ba1be:	480c      	ldr	r0, [pc, #48]	; (ba1f0 <srand+0x4c>)
   ba1c0:	2142      	movs	r1, #66	; 0x42
   ba1c2:	f7fd fef9 	bl	b7fb8 <__assert_func>
   ba1c6:	490b      	ldr	r1, [pc, #44]	; (ba1f4 <srand+0x50>)
   ba1c8:	4b0b      	ldr	r3, [pc, #44]	; (ba1f8 <srand+0x54>)
   ba1ca:	e9c0 1300 	strd	r1, r3, [r0]
   ba1ce:	4b0b      	ldr	r3, [pc, #44]	; (ba1fc <srand+0x58>)
   ba1d0:	6083      	str	r3, [r0, #8]
   ba1d2:	230b      	movs	r3, #11
   ba1d4:	8183      	strh	r3, [r0, #12]
   ba1d6:	2100      	movs	r1, #0
   ba1d8:	2001      	movs	r0, #1
   ba1da:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba1de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba1e0:	2200      	movs	r2, #0
   ba1e2:	611c      	str	r4, [r3, #16]
   ba1e4:	615a      	str	r2, [r3, #20]
   ba1e6:	bd38      	pop	{r3, r4, r5, pc}
   ba1e8:	2003dfc4 	.word	0x2003dfc4
   ba1ec:	000baddd 	.word	0x000baddd
   ba1f0:	000badf4 	.word	0x000badf4
   ba1f4:	abcd330e 	.word	0xabcd330e
   ba1f8:	e66d1234 	.word	0xe66d1234
   ba1fc:	0005deec 	.word	0x0005deec

000ba200 <strcmp>:
   ba200:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba204:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba208:	2a01      	cmp	r2, #1
   ba20a:	bf28      	it	cs
   ba20c:	429a      	cmpcs	r2, r3
   ba20e:	d0f7      	beq.n	ba200 <strcmp>
   ba210:	1ad0      	subs	r0, r2, r3
   ba212:	4770      	bx	lr

000ba214 <strcpy>:
   ba214:	4603      	mov	r3, r0
   ba216:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba21a:	f803 2b01 	strb.w	r2, [r3], #1
   ba21e:	2a00      	cmp	r2, #0
   ba220:	d1f9      	bne.n	ba216 <strcpy+0x2>
   ba222:	4770      	bx	lr

000ba224 <strlen>:
   ba224:	4603      	mov	r3, r0
   ba226:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba22a:	2a00      	cmp	r2, #0
   ba22c:	d1fb      	bne.n	ba226 <strlen+0x2>
   ba22e:	1a18      	subs	r0, r3, r0
   ba230:	3801      	subs	r0, #1
   ba232:	4770      	bx	lr

000ba234 <strncpy>:
   ba234:	b510      	push	{r4, lr}
   ba236:	3901      	subs	r1, #1
   ba238:	4603      	mov	r3, r0
   ba23a:	b132      	cbz	r2, ba24a <strncpy+0x16>
   ba23c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba240:	f803 4b01 	strb.w	r4, [r3], #1
   ba244:	3a01      	subs	r2, #1
   ba246:	2c00      	cmp	r4, #0
   ba248:	d1f7      	bne.n	ba23a <strncpy+0x6>
   ba24a:	441a      	add	r2, r3
   ba24c:	2100      	movs	r1, #0
   ba24e:	4293      	cmp	r3, r2
   ba250:	d100      	bne.n	ba254 <strncpy+0x20>
   ba252:	bd10      	pop	{r4, pc}
   ba254:	f803 1b01 	strb.w	r1, [r3], #1
   ba258:	e7f9      	b.n	ba24e <strncpy+0x1a>
	...

000ba25c <_strtol_l.constprop.0>:
   ba25c:	2b01      	cmp	r3, #1
   ba25e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba262:	d001      	beq.n	ba268 <_strtol_l.constprop.0+0xc>
   ba264:	2b24      	cmp	r3, #36	; 0x24
   ba266:	d906      	bls.n	ba276 <_strtol_l.constprop.0+0x1a>
   ba268:	f7fd fe9e 	bl	b7fa8 <__errno>
   ba26c:	2316      	movs	r3, #22
   ba26e:	6003      	str	r3, [r0, #0]
   ba270:	2000      	movs	r0, #0
   ba272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba276:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba35c <_strtol_l.constprop.0+0x100>
   ba27a:	460d      	mov	r5, r1
   ba27c:	462e      	mov	r6, r5
   ba27e:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba282:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba286:	f017 0708 	ands.w	r7, r7, #8
   ba28a:	d1f7      	bne.n	ba27c <_strtol_l.constprop.0+0x20>
   ba28c:	2c2d      	cmp	r4, #45	; 0x2d
   ba28e:	d132      	bne.n	ba2f6 <_strtol_l.constprop.0+0x9a>
   ba290:	782c      	ldrb	r4, [r5, #0]
   ba292:	2701      	movs	r7, #1
   ba294:	1cb5      	adds	r5, r6, #2
   ba296:	2b00      	cmp	r3, #0
   ba298:	d05b      	beq.n	ba352 <_strtol_l.constprop.0+0xf6>
   ba29a:	2b10      	cmp	r3, #16
   ba29c:	d109      	bne.n	ba2b2 <_strtol_l.constprop.0+0x56>
   ba29e:	2c30      	cmp	r4, #48	; 0x30
   ba2a0:	d107      	bne.n	ba2b2 <_strtol_l.constprop.0+0x56>
   ba2a2:	782c      	ldrb	r4, [r5, #0]
   ba2a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba2a8:	2c58      	cmp	r4, #88	; 0x58
   ba2aa:	d14d      	bne.n	ba348 <_strtol_l.constprop.0+0xec>
   ba2ac:	786c      	ldrb	r4, [r5, #1]
   ba2ae:	2310      	movs	r3, #16
   ba2b0:	3502      	adds	r5, #2
   ba2b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba2b6:	f108 38ff 	add.w	r8, r8, #4294967295
   ba2ba:	f04f 0c00 	mov.w	ip, #0
   ba2be:	fbb8 f9f3 	udiv	r9, r8, r3
   ba2c2:	4666      	mov	r6, ip
   ba2c4:	fb03 8a19 	mls	sl, r3, r9, r8
   ba2c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba2cc:	f1be 0f09 	cmp.w	lr, #9
   ba2d0:	d816      	bhi.n	ba300 <_strtol_l.constprop.0+0xa4>
   ba2d2:	4674      	mov	r4, lr
   ba2d4:	42a3      	cmp	r3, r4
   ba2d6:	dd24      	ble.n	ba322 <_strtol_l.constprop.0+0xc6>
   ba2d8:	f1bc 0f00 	cmp.w	ip, #0
   ba2dc:	db1e      	blt.n	ba31c <_strtol_l.constprop.0+0xc0>
   ba2de:	45b1      	cmp	r9, r6
   ba2e0:	d31c      	bcc.n	ba31c <_strtol_l.constprop.0+0xc0>
   ba2e2:	d101      	bne.n	ba2e8 <_strtol_l.constprop.0+0x8c>
   ba2e4:	45a2      	cmp	sl, r4
   ba2e6:	db19      	blt.n	ba31c <_strtol_l.constprop.0+0xc0>
   ba2e8:	fb06 4603 	mla	r6, r6, r3, r4
   ba2ec:	f04f 0c01 	mov.w	ip, #1
   ba2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba2f4:	e7e8      	b.n	ba2c8 <_strtol_l.constprop.0+0x6c>
   ba2f6:	2c2b      	cmp	r4, #43	; 0x2b
   ba2f8:	bf04      	itt	eq
   ba2fa:	782c      	ldrbeq	r4, [r5, #0]
   ba2fc:	1cb5      	addeq	r5, r6, #2
   ba2fe:	e7ca      	b.n	ba296 <_strtol_l.constprop.0+0x3a>
   ba300:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba304:	f1be 0f19 	cmp.w	lr, #25
   ba308:	d801      	bhi.n	ba30e <_strtol_l.constprop.0+0xb2>
   ba30a:	3c37      	subs	r4, #55	; 0x37
   ba30c:	e7e2      	b.n	ba2d4 <_strtol_l.constprop.0+0x78>
   ba30e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba312:	f1be 0f19 	cmp.w	lr, #25
   ba316:	d804      	bhi.n	ba322 <_strtol_l.constprop.0+0xc6>
   ba318:	3c57      	subs	r4, #87	; 0x57
   ba31a:	e7db      	b.n	ba2d4 <_strtol_l.constprop.0+0x78>
   ba31c:	f04f 3cff 	mov.w	ip, #4294967295
   ba320:	e7e6      	b.n	ba2f0 <_strtol_l.constprop.0+0x94>
   ba322:	f1bc 0f00 	cmp.w	ip, #0
   ba326:	da05      	bge.n	ba334 <_strtol_l.constprop.0+0xd8>
   ba328:	2322      	movs	r3, #34	; 0x22
   ba32a:	6003      	str	r3, [r0, #0]
   ba32c:	4646      	mov	r6, r8
   ba32e:	b942      	cbnz	r2, ba342 <_strtol_l.constprop.0+0xe6>
   ba330:	4630      	mov	r0, r6
   ba332:	e79e      	b.n	ba272 <_strtol_l.constprop.0+0x16>
   ba334:	b107      	cbz	r7, ba338 <_strtol_l.constprop.0+0xdc>
   ba336:	4276      	negs	r6, r6
   ba338:	2a00      	cmp	r2, #0
   ba33a:	d0f9      	beq.n	ba330 <_strtol_l.constprop.0+0xd4>
   ba33c:	f1bc 0f00 	cmp.w	ip, #0
   ba340:	d000      	beq.n	ba344 <_strtol_l.constprop.0+0xe8>
   ba342:	1e69      	subs	r1, r5, #1
   ba344:	6011      	str	r1, [r2, #0]
   ba346:	e7f3      	b.n	ba330 <_strtol_l.constprop.0+0xd4>
   ba348:	2430      	movs	r4, #48	; 0x30
   ba34a:	2b00      	cmp	r3, #0
   ba34c:	d1b1      	bne.n	ba2b2 <_strtol_l.constprop.0+0x56>
   ba34e:	2308      	movs	r3, #8
   ba350:	e7af      	b.n	ba2b2 <_strtol_l.constprop.0+0x56>
   ba352:	2c30      	cmp	r4, #48	; 0x30
   ba354:	d0a5      	beq.n	ba2a2 <_strtol_l.constprop.0+0x46>
   ba356:	230a      	movs	r3, #10
   ba358:	e7ab      	b.n	ba2b2 <_strtol_l.constprop.0+0x56>
   ba35a:	bf00      	nop
   ba35c:	000bae72 	.word	0x000bae72

000ba360 <strtol>:
   ba360:	4613      	mov	r3, r2
   ba362:	460a      	mov	r2, r1
   ba364:	4601      	mov	r1, r0
   ba366:	4802      	ldr	r0, [pc, #8]	; (ba370 <strtol+0x10>)
   ba368:	6800      	ldr	r0, [r0, #0]
   ba36a:	f7ff bf77 	b.w	ba25c <_strtol_l.constprop.0>
   ba36e:	bf00      	nop
   ba370:	2003dfc4 	.word	0x2003dfc4

000ba374 <__register_exitproc>:
   ba374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba378:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba434 <__register_exitproc+0xc0>
   ba37c:	4606      	mov	r6, r0
   ba37e:	f8d8 0000 	ldr.w	r0, [r8]
   ba382:	461f      	mov	r7, r3
   ba384:	460d      	mov	r5, r1
   ba386:	4691      	mov	r9, r2
   ba388:	f000 f856 	bl	ba438 <__retarget_lock_acquire_recursive>
   ba38c:	4b25      	ldr	r3, [pc, #148]	; (ba424 <__register_exitproc+0xb0>)
   ba38e:	681c      	ldr	r4, [r3, #0]
   ba390:	b934      	cbnz	r4, ba3a0 <__register_exitproc+0x2c>
   ba392:	4c25      	ldr	r4, [pc, #148]	; (ba428 <__register_exitproc+0xb4>)
   ba394:	601c      	str	r4, [r3, #0]
   ba396:	4b25      	ldr	r3, [pc, #148]	; (ba42c <__register_exitproc+0xb8>)
   ba398:	b113      	cbz	r3, ba3a0 <__register_exitproc+0x2c>
   ba39a:	681b      	ldr	r3, [r3, #0]
   ba39c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba3a0:	6863      	ldr	r3, [r4, #4]
   ba3a2:	2b1f      	cmp	r3, #31
   ba3a4:	dd07      	ble.n	ba3b6 <__register_exitproc+0x42>
   ba3a6:	f8d8 0000 	ldr.w	r0, [r8]
   ba3aa:	f000 f847 	bl	ba43c <__retarget_lock_release_recursive>
   ba3ae:	f04f 30ff 	mov.w	r0, #4294967295
   ba3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba3b6:	b34e      	cbz	r6, ba40c <__register_exitproc+0x98>
   ba3b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba3bc:	b988      	cbnz	r0, ba3e2 <__register_exitproc+0x6e>
   ba3be:	4b1c      	ldr	r3, [pc, #112]	; (ba430 <__register_exitproc+0xbc>)
   ba3c0:	b923      	cbnz	r3, ba3cc <__register_exitproc+0x58>
   ba3c2:	f8d8 0000 	ldr.w	r0, [r8]
   ba3c6:	f000 f838 	bl	ba43a <__retarget_lock_release>
   ba3ca:	e7f0      	b.n	ba3ae <__register_exitproc+0x3a>
   ba3cc:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba3d0:	f7fd fdc2 	bl	b7f58 <malloc>
   ba3d4:	2800      	cmp	r0, #0
   ba3d6:	d0f4      	beq.n	ba3c2 <__register_exitproc+0x4e>
   ba3d8:	2300      	movs	r3, #0
   ba3da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba3de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba3e2:	6863      	ldr	r3, [r4, #4]
   ba3e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba3e8:	2201      	movs	r2, #1
   ba3ea:	409a      	lsls	r2, r3
   ba3ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba3f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba3f4:	4313      	orrs	r3, r2
   ba3f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba3fa:	2e02      	cmp	r6, #2
   ba3fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba400:	bf02      	ittt	eq
   ba402:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba406:	4313      	orreq	r3, r2
   ba408:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba40c:	6863      	ldr	r3, [r4, #4]
   ba40e:	f8d8 0000 	ldr.w	r0, [r8]
   ba412:	1c5a      	adds	r2, r3, #1
   ba414:	3302      	adds	r3, #2
   ba416:	6062      	str	r2, [r4, #4]
   ba418:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba41c:	f000 f80e 	bl	ba43c <__retarget_lock_release_recursive>
   ba420:	2000      	movs	r0, #0
   ba422:	e7c6      	b.n	ba3b2 <__register_exitproc+0x3e>
   ba424:	2003e7e8 	.word	0x2003e7e8
   ba428:	2003e75c 	.word	0x2003e75c
   ba42c:	00000000 	.word	0x00000000
   ba430:	000b7f59 	.word	0x000b7f59
   ba434:	2003e028 	.word	0x2003e028

000ba438 <__retarget_lock_acquire_recursive>:
   ba438:	4770      	bx	lr

000ba43a <__retarget_lock_release>:
   ba43a:	4770      	bx	lr

000ba43c <__retarget_lock_release_recursive>:
   ba43c:	4770      	bx	lr

000ba43e <link_code_end>:
	...

000ba440 <dynalib_user>:
   ba440:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   ba450:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   ba460:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   ba470:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   ba480:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   ba490:	4f4d 4544 7525 003e 6925 2500 696c 6f00     MODE%u>.%i.%li.o
   ba4a0:	7475 7000 6d77 6400 0077 7761 4c00 6f6f     ut.pwm.dw.aw.Loo
   ba4b0:	0070 6948 4e00 206f 7254 6361 006b 5042     p.Hi.No Track.BP
   ba4c0:	3a4d 0020 6954 656d 4c20 6665 3a74 0020     M: .Time Left: .
   ba4d0:	003a 7474 4f43 7579 3975 3378 5874 7041     :.ttCOyuu9x3tXAp
   ba4e0:	506b 3165 346d 4d4c 4967 4235 4e4e 717a     kPe1m4LMgI5BNNzq
   ba4f0:	6435 7700 7777 0077 6a6a 6a6a 5300 2044     5d.wwww.jjjj.SD 
   ba500:	4b4f 0021 6767 6767 5300 2044 6166 6c69     OK!.gggg.SD fail
   ba510:	6465 202c 726f 6e20 746f 7020 6572 6573     ed, or not prese
   ba520:	746e 7200 7272 0072 4545 4545 4400 4552     nt.rrrr.EEEE.DRE
   ba530:	2051 6970 206e 7369 6e20 746f 6120 206e     Q pin is not an 
   ba540:	6e69 6574 7272 7075 2074 6970 006e 4141     interrupt pin.AA
   ba550:	4841 4848 0048 6f4c 6461 6e69 2e67 2e2e     AHHHH.Loading...
   ba560:	3100 6d2e 3370 3200 6d2e 3370 3300 6d2e     .1.mp3.2.mp3.3.m
   ba570:	3370 3400 6d2e 3370 3500 6d2e 3370 3600     p3.4.mp3.5.mp3.6
   ba580:	6d2e 3370 3700 6d2e 3370 4800 7261 2064     .mp3.7.mp3.Hard 
   ba590:	6f52 6b63 4220 6361 696b 676e 5420 6172     Rock Backing Tra
   ba5a0:	6b63 5000 6169 6f6e 4220 6361 696b 676e     ck.Piano Backing
   ba5b0:	5420 6172 6b63 4100 6f63 7375 6974 2063      Track.Acoustic 
   ba5c0:	6142 6b63 6e69 2067 7254 6361 006b 7546     Backing Track.Fu
   ba5d0:	6b6e 4220 6361 696b 676e 5420 6172 6b63     nk Backing Track
   ba5e0:	5200 6e20 4220 4220 6361 696b 676e 5420     .R n B Backing T
   ba5f0:	6172 6b63 5300 666f 2074 6f52 6b63 4220     rack.Soft Rock B
   ba600:	6361 696b 676e 5420 6172 6b63 4f00 6372     acking Track.Orc
   ba610:	6568 7473 6172 206c 6142 6b63 6e69 2067     hestral Backing 
   ba620:	7254 6361 006b 0000                         Track...

000ba628 <_ZTVN8particle11SPISettingsE>:
	...
   ba630:	410d 000b 40af 000b 40b1 000b               .A...@...@..

000ba63c <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   ba63c:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   ba64c:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   ba65c:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   ba66c:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   ba67c:	0064 754a 206c 3231 3220 3230 2032 3232     d.Jul 12 2022 22
   ba68c:	323a 3a31 3030 0000 0000 0000               :21:00......

000ba698 <_ZTV4File>:
	...
   ba6a0:	531b 000b 532f 000b 53a1 000b 5329 000b     .S../S...S..)S..
   ba6b0:	5301 000b 53d7 000b 5323 000b 531d 000b     .S...S..#S...S..

000ba6c0 <_ZL22BlynkReadHandlerVector>:
   ba6c0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba6d0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba6e0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba6f0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba700:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba710:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba720:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba730:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba740:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba750:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba760:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba770:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba780:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba790:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7a0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7b0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7c0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7d0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7e0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba7f0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba800:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba810:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba820:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba830:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba840:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba850:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba860:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba870:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba880:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba890:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba8a0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..
   ba8b0:	7369 000b 7369 000b 7369 000b 7369 000b     is..is..is..is..

000ba8c0 <_ZL23BlynkWriteHandlerVector>:
   ba8c0:	443d 000b 44a1 000b 447d 000b 736b 000b     =D...D..}D..ks..
   ba8d0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba8e0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba8f0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba900:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba910:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba920:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba930:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba940:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba950:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba960:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba970:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba980:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba990:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9a0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9b0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9c0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9d0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9e0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   ba9f0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa00:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa10:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa20:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa30:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa40:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa50:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa60:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa70:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa80:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baa90:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baaa0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..
   baab0:	736b 000b 736b 000b 736b 000b 736b 000b     ks..ks..ks..ks..

000baac0 <_ZTV13LiquidCrystal>:
	...
   baac8:	75c3 000b 75c5 000b 77fb 000b 8535 000b     .u...u...w..5...
   baad8:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...

000baae8 <_ZTVN5spark13EthernetClassE>:
	...
   baaf0:	8037 000b 802d 000b 8023 000b 8019 000b     7...-...#.......
   bab00:	800d 000b 8001 000b 92b9 000b 92c1 000b     ................
   bab10:	7ff5 000b 7fed 000b 7fe3 000b 7fd9 000b     ................
   bab20:	92f1 000b                                   ....

000bab24 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bab24:	0800 1810 2820 3830                         .... (08

000bab2c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bab34:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bab44:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bab54 <_ZTV9IPAddress>:
	...
   bab5c:	8845 000b 8835 000b 8837 000b               E...5...7...

000bab68 <_ZTV9USBSerial>:
	...
   bab70:	896f 000b 89d7 000b 89ad 000b 8535 000b     o...........5...
   bab80:	899f 000b 8971 000b 8981 000b 89d1 000b     ....q...........
   bab90:	8991 000b 8969 000b                         ....i...

000bab98 <_ZTV11USARTSerial>:
	...
   baba0:	8ad1 000b 8b3d 000b 8b15 000b 8535 000b     ....=.......5...
   babb0:	8ae5 000b 8b01 000b 8af3 000b 8b0f 000b     ................
   babc0:	8ad3 000b 8ad7 000b                         ........

000babc8 <_ZTV7TwoWire>:
	...
   babd0:	8b75 000b 8bbf 000b 8b97 000b 8b77 000b     u...........w...
   babe0:	8b9f 000b 8ba7 000b 8baf 000b 8bb7 000b     ................
   babf0:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bac00:	2072 203d 6425 0000                         r = %d..

000bac08 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bac10:	8cf5 000b 8d19 000b 9203 000b 8d27 000b     ............'...
   bac20:	8cf9 000b                                   ....

000bac24 <_ZTV9TCPClient>:
	...
   bac2c:	86c5 000b 86dd 000b 8c71 000b 8c8b 000b     ........q.......
   bac3c:	9099 000b 8cb5 000b 8f0f 000b 8ce9 000b     ................
   bac4c:	8fa1 000b 8de1 000b 8f3d 000b 914d 000b     ........=...M...
   bac5c:	8edd 000b 8ceb 000b 8c9d 000b 8d2d 000b     ............-...
   bac6c:	8dc1 000b                                   ....

000bac70 <_ZTVN5spark9WiFiClassE>:
	...
   bac78:	925b 000b 9251 000b 9247 000b 9209 000b     [...Q...G.......
   bac88:	868d 000b 923b 000b 92b9 000b 92c1 000b     ....;...........
   bac98:	922f 000b 9227 000b 921d 000b 9213 000b     /...'...........
   baca8:	92f1 000b                                   ....

000bacac <_ZTVN5spark12NetworkClassE>:
	...
   bacb4:	9279 000b 9283 000b 928d 000b 9297 000b     y...............
   bacc4:	92a1 000b 92ad 000b 92b9 000b 92c1 000b     ................
   bacd4:	92c9 000b 92d5 000b 92dd 000b 92e7 000b     ................
   bace4:	92f1 000b                                   ....

000bace8 <_ZSt7nothrow>:
	...

000bace9 <_ZTSSt19_Sp_make_shared_tag>:
   bace9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bacf9:	6572 5f64 6174 0067 0000                     red_tag....

000bad04 <_ZTISt19_Sp_make_shared_tag>:
   bad04:	ad44 000b ace9 000b                         D.......

000bad0c <_ZTIN10__cxxabiv117__class_type_infoE>:
   bad0c:	ada4 000b ad18 000b adc8 000b               ............

000bad18 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bad18:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bad28:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bad38:	0045 0000                                   E...

000bad3c <_ZTVN10__cxxabiv117__class_type_infoE>:
   bad3c:	0000 0000 ad0c 000b 96d9 000b 96ed 000b     ................
   bad4c:	9881 000b 9881 000b 9757 000b 9699 000b     ........W.......
   bad5c:	973f 000b 9701 000b 96cb 000b               ?...........

000bad68 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bad68:	ada4 000b ad74 000b ad0c 000b               ....t.......

000bad74 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bad74:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bad84:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bad94:	666e 456f 0000 0000                         nfoE....

000bad9c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bad9c:	0000 0000 ad68 000b 9781 000b 9795 000b     ....h...........
   badac:	9881 000b 9881 000b 9757 000b 9699 000b     ........W.......
   badbc:	9855 000b 97e1 000b 97a9 000b               U...........

000badc8 <_ZTISt9type_info>:
   badc8:	ad44 000b add0 000b                         D.......

000badd0 <_ZTSSt9type_info>:
   badd0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bade0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   badf0:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bae00:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bae10:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bae20:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bae30:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bae40:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bae50:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bae60:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000bae71 <_ctype_>:
   bae71:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bae81:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bae91:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   baea1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   baeb1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   baec1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   baed1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   baee1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   baef1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000baf72 <link_const_variable_data_end>:
	...

000baf74 <link_constructors_location>:
   baf74:	000b5125 	.word	0x000b5125
   baf78:	000b8041 	.word	0x000b8041
   baf7c:	000b81e1 	.word	0x000b81e1
   baf80:	000b8525 	.word	0x000b8525
   baf84:	000b8699 	.word	0x000b8699
   baf88:	000b86a9 	.word	0x000b86a9
   baf8c:	000b86f1 	.word	0x000b86f1
   baf90:	000b9265 	.word	0x000b9265
   baf94:	000b93c9 	.word	0x000b93c9

000baf98 <link_constructors_end>:
	...
